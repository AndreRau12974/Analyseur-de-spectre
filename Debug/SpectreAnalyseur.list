
SpectreAnalyseur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca28  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029fc  0800cbf8  0800cbf8  0001cbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5f4  0800f5f4  000200e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f5f4  0800f5f4  0001f5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5fc  0800f5fc  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5fc  0800f5fc  0001f5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f600  0800f600  0001f600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  0800f604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c0c  200000e4  0800f6e8  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cf0  0800f6e8  00020cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bedd  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000063d4  00000000  00000000  0004bff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002448  00000000  00000000  000523c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002158  00000000  00000000  00054810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000928f  00000000  00000000  00056968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002dfa0  00000000  00000000  0005fbf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117e24  00000000  00000000  0008db97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a59bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099c4  00000000  00000000  001a5a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e4 	.word	0x200000e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cbe0 	.word	0x0800cbe0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000e8 	.word	0x200000e8
 800020c:	0800cbe0 	.word	0x0800cbe0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80005b8:	4b15      	ldr	r3, [pc, #84]	; (8000610 <MX_DMA2D_Init+0x5c>)
 80005ba:	4a16      	ldr	r2, [pc, #88]	; (8000614 <MX_DMA2D_Init+0x60>)
 80005bc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <MX_DMA2D_Init+0x5c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <MX_DMA2D_Init+0x5c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_DMA2D_Init+0x5c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_DMA2D_Init+0x5c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_DMA2D_Init+0x5c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_DMA2D_Init+0x5c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <MX_DMA2D_Init+0x5c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <MX_DMA2D_Init+0x5c>)
 80005ea:	f005 fea3 	bl	8006334 <HAL_DMA2D_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80005f4:	f001 fa4e 	bl	8001a94 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005f8:	2101      	movs	r1, #1
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_DMA2D_Init+0x5c>)
 80005fc:	f006 f908 	bl	8006810 <HAL_DMA2D_ConfigLayer>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000606:	f001 fa45 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000174 	.word	0x20000174
 8000614:	4002b000 	.word	0x4002b000

08000618 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <HAL_DMA2D_MspInit+0x44>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d113      	bne.n	8000652 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <HAL_DMA2D_MspInit+0x48>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a0c      	ldr	r2, [pc, #48]	; (8000660 <HAL_DMA2D_MspInit+0x48>)
 8000630:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <HAL_DMA2D_MspInit+0x48>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2105      	movs	r1, #5
 8000646:	205a      	movs	r0, #90	; 0x5a
 8000648:	f005 f966 	bl	8005918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800064c:	205a      	movs	r0, #90	; 0x5a
 800064e:	f005 f97f 	bl	8005950 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000652:	bf00      	nop
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	4002b000 	.word	0x4002b000
 8000660:	40023800 	.word	0x40023800

08000664 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
 8000678:	615a      	str	r2, [r3, #20]
 800067a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <MX_FMC_Init+0x98>)
 800067e:	4a20      	ldr	r2, [pc, #128]	; (8000700 <MX_FMC_Init+0x9c>)
 8000680:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <MX_FMC_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <MX_FMC_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_FMC_Init+0x98>)
 8000690:	2204      	movs	r2, #4
 8000692:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <MX_FMC_Init+0x98>)
 8000696:	2210      	movs	r2, #16
 8000698:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <MX_FMC_Init+0x98>)
 800069c:	2240      	movs	r2, #64	; 0x40
 800069e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_FMC_Init+0x98>)
 80006a2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80006a6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_FMC_Init+0x98>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_FMC_Init+0x98>)
 80006b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006b4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_FMC_Init+0x98>)
 80006b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_FMC_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80006c8:	2307      	movs	r3, #7
 80006ca:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80006d0:	2307      	movs	r3, #7
 80006d2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80006d4:	2303      	movs	r3, #3
 80006d6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_FMC_Init+0x98>)
 80006e6:	f00a fcd9 	bl	800b09c <HAL_SDRAM_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80006f0:	f001 f9d0 	bl	8001a94 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200001b4 	.word	0x200001b4
 8000700:	a0000140 	.word	0xa0000140

08000704 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000718:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <HAL_FMC_MspInit+0x100>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d16d      	bne.n	80007fc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000720:	4b38      	ldr	r3, [pc, #224]	; (8000804 <HAL_FMC_MspInit+0x100>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000726:	4b38      	ldr	r3, [pc, #224]	; (8000808 <HAL_FMC_MspInit+0x104>)
 8000728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800072a:	4a37      	ldr	r2, [pc, #220]	; (8000808 <HAL_FMC_MspInit+0x104>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6393      	str	r3, [r2, #56]	; 0x38
 8000732:	4b35      	ldr	r3, [pc, #212]	; (8000808 <HAL_FMC_MspInit+0x104>)
 8000734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800073e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000742:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000750:	230c      	movs	r3, #12
 8000752:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	482c      	ldr	r0, [pc, #176]	; (800080c <HAL_FMC_MspInit+0x108>)
 800075a:	f006 f987 	bl	8006a6c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800075e:	f248 1333 	movw	r3, #33075	; 0x8133
 8000762:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000770:	230c      	movs	r3, #12
 8000772:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4619      	mov	r1, r3
 8000778:	4825      	ldr	r0, [pc, #148]	; (8000810 <HAL_FMC_MspInit+0x10c>)
 800077a:	f006 f977 	bl	8006a6c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800077e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000782:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078c:	2303      	movs	r3, #3
 800078e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000790:	230c      	movs	r3, #12
 8000792:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4619      	mov	r1, r3
 8000798:	481e      	ldr	r0, [pc, #120]	; (8000814 <HAL_FMC_MspInit+0x110>)
 800079a:	f006 f967 	bl	8006a6c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800079e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80007a2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ac:	2303      	movs	r3, #3
 80007ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007b0:	230c      	movs	r3, #12
 80007b2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	4619      	mov	r1, r3
 80007b8:	4817      	ldr	r0, [pc, #92]	; (8000818 <HAL_FMC_MspInit+0x114>)
 80007ba:	f006 f957 	bl	8006a6c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80007be:	2328      	movs	r3, #40	; 0x28
 80007c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ca:	2303      	movs	r3, #3
 80007cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007ce:	230c      	movs	r3, #12
 80007d0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4619      	mov	r1, r3
 80007d6:	4811      	ldr	r0, [pc, #68]	; (800081c <HAL_FMC_MspInit+0x118>)
 80007d8:	f006 f948 	bl	8006a6c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80007dc:	2308      	movs	r3, #8
 80007de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e8:	2303      	movs	r3, #3
 80007ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007ec:	230c      	movs	r3, #12
 80007ee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	4619      	mov	r1, r3
 80007f4:	480a      	ldr	r0, [pc, #40]	; (8000820 <HAL_FMC_MspInit+0x11c>)
 80007f6:	f006 f939 	bl	8006a6c <HAL_GPIO_Init>
 80007fa:	e000      	b.n	80007fe <HAL_FMC_MspInit+0xfa>
    return;
 80007fc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200001e8 	.word	0x200001e8
 8000808:	40023800 	.word	0x40023800
 800080c:	40021000 	.word	0x40021000
 8000810:	40021800 	.word	0x40021800
 8000814:	40020c00 	.word	0x40020c00
 8000818:	40021400 	.word	0x40021400
 800081c:	40021c00 	.word	0x40021c00
 8000820:	40020800 	.word	0x40020800

08000824 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800082c:	f7ff ff6a 	bl	8000704 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000842:	20c8      	movs	r0, #200	; 0xc8
 8000844:	f001 fe5a 	bl	80024fc <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000848:	f000 f9b4 	bl	8000bb4 <ft5336_I2C_InitializeIfRequired>
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b084      	sub	sp, #16
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800087c:	2300      	movs	r3, #0
 800087e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000880:	f000 f998 	bl	8000bb4 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000884:	2300      	movs	r3, #0
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	e010      	b.n	80008ac <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800088a:	88fb      	ldrh	r3, [r7, #6]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	21a8      	movs	r1, #168	; 0xa8
 8000890:	4618      	mov	r0, r3
 8000892:	f001 fe15 	bl	80024c0 <TS_IO_Read>
 8000896:	4603      	mov	r3, r0
 8000898:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800089a:	7b7b      	ldrb	r3, [r7, #13]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b51      	cmp	r3, #81	; 0x51
 80008a0:	d101      	bne.n	80008a6 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	3301      	adds	r3, #1
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d802      	bhi.n	80008b8 <ft5336_ReadID+0x4e>
 80008b2:	7bbb      	ldrb	r3, [r7, #14]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d0e8      	beq.n	800088a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80008b8:	7b7b      	ldrb	r3, [r7, #13]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	b29b      	uxth	r3, r3
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	4603      	mov	r3, r0
 80008ce:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80008d0:	88fb      	ldrh	r3, [r7, #6]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f97e 	bl	8000bd4 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f932 	bl	8000b44 <ft5336_TS_DisableIT>
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	2102      	movs	r1, #2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 fddf 	bl	80024c0 <TS_IO_Read>
 8000902:	4603      	mov	r3, r0
 8000904:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	b2db      	uxtb	r3, r3
 8000910:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b05      	cmp	r3, #5
 8000918:	d901      	bls.n	800091e <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <ft5336_TS_DetectTouch+0x50>)
 8000924:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000926:	4b04      	ldr	r3, [pc, #16]	; (8000938 <ft5336_TS_DetectTouch+0x50>)
 8000928:	2200      	movs	r2, #0
 800092a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	b2db      	uxtb	r3, r3
}
 8000930:	4618      	mov	r0, r3
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200001ec 	.word	0x200001ec

0800093c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800095e:	4b6d      	ldr	r3, [pc, #436]	; (8000b14 <ft5336_TS_GetXY+0x1d8>)
 8000960:	789a      	ldrb	r2, [r3, #2]
 8000962:	4b6c      	ldr	r3, [pc, #432]	; (8000b14 <ft5336_TS_GetXY+0x1d8>)
 8000964:	785b      	ldrb	r3, [r3, #1]
 8000966:	429a      	cmp	r2, r3
 8000968:	f080 80cf 	bcs.w	8000b0a <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800096c:	4b69      	ldr	r3, [pc, #420]	; (8000b14 <ft5336_TS_GetXY+0x1d8>)
 800096e:	789b      	ldrb	r3, [r3, #2]
 8000970:	2b09      	cmp	r3, #9
 8000972:	d871      	bhi.n	8000a58 <ft5336_TS_GetXY+0x11c>
 8000974:	a201      	add	r2, pc, #4	; (adr r2, 800097c <ft5336_TS_GetXY+0x40>)
 8000976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097a:	bf00      	nop
 800097c:	080009a5 	.word	0x080009a5
 8000980:	080009b7 	.word	0x080009b7
 8000984:	080009c9 	.word	0x080009c9
 8000988:	080009db 	.word	0x080009db
 800098c:	080009ed 	.word	0x080009ed
 8000990:	080009ff 	.word	0x080009ff
 8000994:	08000a11 	.word	0x08000a11
 8000998:	08000a23 	.word	0x08000a23
 800099c:	08000a35 	.word	0x08000a35
 80009a0:	08000a47 	.word	0x08000a47
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80009a4:	2304      	movs	r3, #4
 80009a6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80009a8:	2303      	movs	r3, #3
 80009aa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80009ac:	2306      	movs	r3, #6
 80009ae:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80009b0:	2305      	movs	r3, #5
 80009b2:	753b      	strb	r3, [r7, #20]
      break;
 80009b4:	e051      	b.n	8000a5a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80009b6:	230a      	movs	r3, #10
 80009b8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80009ba:	2309      	movs	r3, #9
 80009bc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80009be:	230c      	movs	r3, #12
 80009c0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80009c2:	230b      	movs	r3, #11
 80009c4:	753b      	strb	r3, [r7, #20]
      break;
 80009c6:	e048      	b.n	8000a5a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80009c8:	2310      	movs	r3, #16
 80009ca:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80009cc:	230f      	movs	r3, #15
 80009ce:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80009d0:	2312      	movs	r3, #18
 80009d2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80009d4:	2311      	movs	r3, #17
 80009d6:	753b      	strb	r3, [r7, #20]
      break;
 80009d8:	e03f      	b.n	8000a5a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80009da:	2316      	movs	r3, #22
 80009dc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80009de:	2315      	movs	r3, #21
 80009e0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80009e2:	2318      	movs	r3, #24
 80009e4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80009e6:	2317      	movs	r3, #23
 80009e8:	753b      	strb	r3, [r7, #20]
      break;
 80009ea:	e036      	b.n	8000a5a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80009ec:	231c      	movs	r3, #28
 80009ee:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80009f0:	231b      	movs	r3, #27
 80009f2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80009f4:	231e      	movs	r3, #30
 80009f6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80009f8:	231d      	movs	r3, #29
 80009fa:	753b      	strb	r3, [r7, #20]
      break;
 80009fc:	e02d      	b.n	8000a5a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80009fe:	2322      	movs	r3, #34	; 0x22
 8000a00:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000a02:	2321      	movs	r3, #33	; 0x21
 8000a04:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000a06:	2324      	movs	r3, #36	; 0x24
 8000a08:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000a0a:	2323      	movs	r3, #35	; 0x23
 8000a0c:	753b      	strb	r3, [r7, #20]
      break;
 8000a0e:	e024      	b.n	8000a5a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000a10:	2328      	movs	r3, #40	; 0x28
 8000a12:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000a14:	2327      	movs	r3, #39	; 0x27
 8000a16:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000a18:	232a      	movs	r3, #42	; 0x2a
 8000a1a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000a1c:	2329      	movs	r3, #41	; 0x29
 8000a1e:	753b      	strb	r3, [r7, #20]
      break;
 8000a20:	e01b      	b.n	8000a5a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000a22:	232e      	movs	r3, #46	; 0x2e
 8000a24:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000a26:	232d      	movs	r3, #45	; 0x2d
 8000a28:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000a2a:	2330      	movs	r3, #48	; 0x30
 8000a2c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000a2e:	232f      	movs	r3, #47	; 0x2f
 8000a30:	753b      	strb	r3, [r7, #20]
      break;
 8000a32:	e012      	b.n	8000a5a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000a34:	2334      	movs	r3, #52	; 0x34
 8000a36:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000a38:	2333      	movs	r3, #51	; 0x33
 8000a3a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000a3c:	2336      	movs	r3, #54	; 0x36
 8000a3e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000a40:	2335      	movs	r3, #53	; 0x35
 8000a42:	753b      	strb	r3, [r7, #20]
      break;
 8000a44:	e009      	b.n	8000a5a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000a46:	233a      	movs	r3, #58	; 0x3a
 8000a48:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000a4a:	2339      	movs	r3, #57	; 0x39
 8000a4c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000a4e:	233c      	movs	r3, #60	; 0x3c
 8000a50:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000a52:	233b      	movs	r3, #59	; 0x3b
 8000a54:	753b      	strb	r3, [r7, #20]
      break;
 8000a56:	e000      	b.n	8000a5a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000a58:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000a5a:	89fb      	ldrh	r3, [r7, #14]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	7dfa      	ldrb	r2, [r7, #23]
 8000a60:	4611      	mov	r1, r2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 fd2c 	bl	80024c0 <TS_IO_Read>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000a6c:	7cfb      	ldrb	r3, [r7, #19]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	4b29      	ldr	r3, [pc, #164]	; (8000b18 <ft5336_TS_GetXY+0x1dc>)
 8000a74:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000a76:	89fb      	ldrh	r3, [r7, #14]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	7dba      	ldrb	r2, [r7, #22]
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 fd1e 	bl	80024c0 <TS_IO_Read>
 8000a84:	4603      	mov	r3, r0
 8000a86:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000a88:	7cfb      	ldrb	r3, [r7, #19]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	021b      	lsls	r3, r3, #8
 8000a8e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000a92:	b21a      	sxth	r2, r3
 8000a94:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <ft5336_TS_GetXY+0x1dc>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	b21b      	sxth	r3, r3
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <ft5336_TS_GetXY+0x1dc>)
 8000aa2:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <ft5336_TS_GetXY+0x1dc>)
 8000aa6:	881a      	ldrh	r2, [r3, #0]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000aac:	89fb      	ldrh	r3, [r7, #14]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	7d7a      	ldrb	r2, [r7, #21]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fd03 	bl	80024c0 <TS_IO_Read>
 8000aba:	4603      	mov	r3, r0
 8000abc:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000abe:	7cfb      	ldrb	r3, [r7, #19]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <ft5336_TS_GetXY+0x1dc>)
 8000ac6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000ac8:	89fb      	ldrh	r3, [r7, #14]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	7d3a      	ldrb	r2, [r7, #20]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f001 fcf5 	bl	80024c0 <TS_IO_Read>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000ada:	7cfb      	ldrb	r3, [r7, #19]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	021b      	lsls	r3, r3, #8
 8000ae0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000ae4:	b21a      	sxth	r2, r3
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <ft5336_TS_GetXY+0x1dc>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	b21b      	sxth	r3, r3
 8000aec:	4313      	orrs	r3, r2
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <ft5336_TS_GetXY+0x1dc>)
 8000af4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <ft5336_TS_GetXY+0x1dc>)
 8000af8:	881a      	ldrh	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <ft5336_TS_GetXY+0x1d8>)
 8000b00:	789b      	ldrb	r3, [r3, #2]
 8000b02:	3301      	adds	r3, #1
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <ft5336_TS_GetXY+0x1d8>)
 8000b08:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200001ec 	.word	0x200001ec
 8000b18:	200001f0 	.word	0x200001f0

08000b1c <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	7bfa      	ldrb	r2, [r7, #15]
 8000b34:	21a4      	movs	r1, #164	; 0xa4
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 fca8 	bl	800248c <TS_IO_Write>
}
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	7bfa      	ldrb	r2, [r7, #15]
 8000b5c:	21a4      	movs	r1, #164	; 0xa4
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 fc94 	bl	800248c <TS_IO_Write>
}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200001ec 	.word	0x200001ec

08000bb4 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000bb8:	f7ff fff0 	bl	8000b9c <ft5336_Get_I2C_InitializedStatus>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d104      	bne.n	8000bcc <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000bc2:	f001 fc59 	bl	8002478 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000bc6:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]
  }
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200001ec 	.word	0x200001ec

08000bd4 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b090      	sub	sp, #64	; 0x40
 8000bf4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c06:	4baf      	ldr	r3, [pc, #700]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4aae      	ldr	r2, [pc, #696]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c0c:	f043 0310 	orr.w	r3, r3, #16
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4bac      	ldr	r3, [pc, #688]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0310 	and.w	r3, r3, #16
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c1e:	4ba9      	ldr	r3, [pc, #676]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4aa8      	ldr	r2, [pc, #672]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4ba6      	ldr	r3, [pc, #664]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
 8000c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4ba3      	ldr	r3, [pc, #652]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4aa2      	ldr	r2, [pc, #648]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4ba0      	ldr	r3, [pc, #640]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	4b9d      	ldr	r3, [pc, #628]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a9c      	ldr	r2, [pc, #624]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b9a      	ldr	r3, [pc, #616]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	61fb      	str	r3, [r7, #28]
 8000c64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	4b97      	ldr	r3, [pc, #604]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a96      	ldr	r2, [pc, #600]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b94      	ldr	r3, [pc, #592]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b91      	ldr	r3, [pc, #580]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a90      	ldr	r2, [pc, #576]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b8e      	ldr	r3, [pc, #568]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c96:	4b8b      	ldr	r3, [pc, #556]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a8a      	ldr	r2, [pc, #552]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000c9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b88      	ldr	r3, [pc, #544]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cae:	4b85      	ldr	r3, [pc, #532]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a84      	ldr	r2, [pc, #528]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b82      	ldr	r3, [pc, #520]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cc6:	4b7f      	ldr	r3, [pc, #508]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a7e      	ldr	r2, [pc, #504]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000ccc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b7c      	ldr	r3, [pc, #496]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cde:	4b79      	ldr	r3, [pc, #484]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a78      	ldr	r2, [pc, #480]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000ce4:	f043 0320 	orr.w	r3, r3, #32
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b76      	ldr	r3, [pc, #472]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0320 	and.w	r3, r3, #32
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf6:	4b73      	ldr	r3, [pc, #460]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a72      	ldr	r2, [pc, #456]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b70      	ldr	r3, [pc, #448]	; (8000ec4 <MX_GPIO_Init+0x2d4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2160      	movs	r1, #96	; 0x60
 8000d12:	486d      	ldr	r0, [pc, #436]	; (8000ec8 <MX_GPIO_Init+0x2d8>)
 8000d14:	f006 f962 	bl	8006fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2120      	movs	r1, #32
 8000d1c:	486b      	ldr	r0, [pc, #428]	; (8000ecc <MX_GPIO_Init+0x2dc>)
 8000d1e:	f006 f95d 	bl	8006fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2108      	movs	r1, #8
 8000d26:	4869      	ldr	r0, [pc, #420]	; (8000ecc <MX_GPIO_Init+0x2dc>)
 8000d28:	f006 f958 	bl	8006fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2108      	movs	r1, #8
 8000d30:	4867      	ldr	r0, [pc, #412]	; (8000ed0 <MX_GPIO_Init+0x2e0>)
 8000d32:	f006 f953 	bl	8006fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3c:	4865      	ldr	r0, [pc, #404]	; (8000ed4 <MX_GPIO_Init+0x2e4>)
 8000d3e:	f006 f94d 	bl	8006fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8000d42:	2200      	movs	r2, #0
 8000d44:	f645 6140 	movw	r1, #24128	; 0x5e40
 8000d48:	4863      	ldr	r0, [pc, #396]	; (8000ed8 <MX_GPIO_Init+0x2e8>)
 8000d4a:	f006 f947 	bl	8006fdc <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	21c8      	movs	r1, #200	; 0xc8
 8000d52:	4862      	ldr	r0, [pc, #392]	; (8000edc <MX_GPIO_Init+0x2ec>)
 8000d54:	f006 f942 	bl	8006fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4857      	ldr	r0, [pc, #348]	; (8000ec8 <MX_GPIO_Init+0x2d8>)
 8000d6c:	f005 fe7e 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000d70:	2304      	movs	r3, #4
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d80:	2309      	movs	r3, #9
 8000d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d88:	4619      	mov	r1, r3
 8000d8a:	484f      	ldr	r0, [pc, #316]	; (8000ec8 <MX_GPIO_Init+0x2d8>)
 8000d8c:	f005 fe6e 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000d90:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da2:	230b      	movs	r3, #11
 8000da4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000daa:	4619      	mov	r1, r3
 8000dac:	484b      	ldr	r0, [pc, #300]	; (8000edc <MX_GPIO_Init+0x2ec>)
 8000dae:	f005 fe5d 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8000db2:	f643 0323 	movw	r3, #14371	; 0x3823
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000dc4:	230a      	movs	r3, #10
 8000dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4844      	ldr	r0, [pc, #272]	; (8000ee0 <MX_GPIO_Init+0x2f0>)
 8000dd0:	f005 fe4c 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000de4:	2308      	movs	r3, #8
 8000de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dec:	4619      	mov	r1, r3
 8000dee:	4837      	ldr	r0, [pc, #220]	; (8000ecc <MX_GPIO_Init+0x2dc>)
 8000df0:	f005 fe3c 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000df4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e06:	230c      	movs	r3, #12
 8000e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4834      	ldr	r0, [pc, #208]	; (8000ee4 <MX_GPIO_Init+0x2f4>)
 8000e12:	f005 fe2b 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8000e16:	f248 1340 	movw	r3, #33088	; 0x8140
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	482f      	ldr	r0, [pc, #188]	; (8000ee8 <MX_GPIO_Init+0x2f8>)
 8000e2c:	f005 fe1e 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8000e30:	2360      	movs	r3, #96	; 0x60
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e44:	4619      	mov	r1, r3
 8000e46:	4820      	ldr	r0, [pc, #128]	; (8000ec8 <MX_GPIO_Init+0x2d8>)
 8000e48:	f005 fe10 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000e4c:	2340      	movs	r3, #64	; 0x40
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e5c:	230a      	movs	r3, #10
 8000e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e64:	4619      	mov	r1, r3
 8000e66:	481e      	ldr	r0, [pc, #120]	; (8000ee0 <MX_GPIO_Init+0x2f0>)
 8000e68:	f005 fe00 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e72:	2300      	movs	r3, #0
 8000e74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e7e:	4619      	mov	r1, r3
 8000e80:	481a      	ldr	r0, [pc, #104]	; (8000eec <MX_GPIO_Init+0x2fc>)
 8000e82:	f005 fdf3 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000e86:	2340      	movs	r3, #64	; 0x40
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e8a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480c      	ldr	r0, [pc, #48]	; (8000ecc <MX_GPIO_Init+0x2dc>)
 8000e9c:	f005 fde6 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8000ea0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000eb2:	230a      	movs	r3, #10
 8000eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <MX_GPIO_Init+0x2f8>)
 8000ebe:	f005 fdd5 	bl	8006a6c <HAL_GPIO_Init>
 8000ec2:	e015      	b.n	8000ef0 <MX_GPIO_Init+0x300>
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40020c00 	.word	0x40020c00
 8000ed0:	40022800 	.word	0x40022800
 8000ed4:	40022000 	.word	0x40022000
 8000ed8:	40021c00 	.word	0x40021c00
 8000edc:	40021800 	.word	0x40021800
 8000ee0:	40020400 	.word	0x40020400
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8000ef0:	2328      	movs	r3, #40	; 0x28
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f04:	4619      	mov	r1, r3
 8000f06:	4881      	ldr	r0, [pc, #516]	; (800110c <MX_GPIO_Init+0x51c>)
 8000f08:	f005 fdb0 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f12:	2300      	movs	r3, #0
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f1e:	4619      	mov	r1, r3
 8000f20:	487b      	ldr	r0, [pc, #492]	; (8001110 <MX_GPIO_Init+0x520>)
 8000f22:	f005 fda3 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000f26:	2308      	movs	r3, #8
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4875      	ldr	r0, [pc, #468]	; (8001114 <MX_GPIO_Init+0x524>)
 8000f3e:	f005 fd95 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8000f42:	f44f 7301 	mov.w	r3, #516	; 0x204
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f54:	4619      	mov	r1, r3
 8000f56:	4870      	ldr	r0, [pc, #448]	; (8001118 <MX_GPIO_Init+0x528>)
 8000f58:	f005 fd88 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f5c:	2310      	movs	r3, #16
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f60:	2300      	movs	r3, #0
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4867      	ldr	r0, [pc, #412]	; (800110c <MX_GPIO_Init+0x51c>)
 8000f70:	f005 fd7c 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8000f74:	2304      	movs	r3, #4
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f84:	230c      	movs	r3, #12
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	485f      	ldr	r0, [pc, #380]	; (800110c <MX_GPIO_Init+0x51c>)
 8000f90:	f005 fd6c 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8000f94:	f24a 0304 	movw	r3, #40964	; 0xa004
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	485c      	ldr	r0, [pc, #368]	; (800111c <MX_GPIO_Init+0x52c>)
 8000faa:	f005 fd5f 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4856      	ldr	r0, [pc, #344]	; (8001120 <MX_GPIO_Init+0x530>)
 8000fc8:	f005 fd50 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8000fcc:	f645 6340 	movw	r3, #24128	; 0x5e40
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	484d      	ldr	r0, [pc, #308]	; (800111c <MX_GPIO_Init+0x52c>)
 8000fe6:	f005 fd41 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000fea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ff0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ff4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ffe:	4619      	mov	r1, r3
 8001000:	4847      	ldr	r0, [pc, #284]	; (8001120 <MX_GPIO_Init+0x530>)
 8001002:	f005 fd33 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001006:	2310      	movs	r3, #16
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001016:	230a      	movs	r3, #10
 8001018:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101e:	4619      	mov	r1, r3
 8001020:	483e      	ldr	r0, [pc, #248]	; (800111c <MX_GPIO_Init+0x52c>)
 8001022:	f005 fd23 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001026:	23c8      	movs	r3, #200	; 0xc8
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103a:	4619      	mov	r1, r3
 800103c:	4836      	ldr	r0, [pc, #216]	; (8001118 <MX_GPIO_Init+0x528>)
 800103e:	f005 fd15 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001042:	2305      	movs	r3, #5
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001052:	230a      	movs	r3, #10
 8001054:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001056:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800105a:	4619      	mov	r1, r3
 800105c:	482c      	ldr	r0, [pc, #176]	; (8001110 <MX_GPIO_Init+0x520>)
 800105e:	f005 fd05 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001062:	2332      	movs	r3, #50	; 0x32
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001072:	230b      	movs	r3, #11
 8001074:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001076:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800107a:	4619      	mov	r1, r3
 800107c:	4824      	ldr	r0, [pc, #144]	; (8001110 <MX_GPIO_Init+0x520>)
 800107e:	f005 fcf5 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001082:	2304      	movs	r3, #4
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001092:	2309      	movs	r3, #9
 8001094:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800109a:	4619      	mov	r1, r3
 800109c:	4821      	ldr	r0, [pc, #132]	; (8001124 <MX_GPIO_Init+0x534>)
 800109e:	f005 fce5 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80010a2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010b4:	2309      	movs	r3, #9
 80010b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010bc:	4619      	mov	r1, r3
 80010be:	4813      	ldr	r0, [pc, #76]	; (800110c <MX_GPIO_Init+0x51c>)
 80010c0:	f005 fcd4 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010c4:	2386      	movs	r3, #134	; 0x86
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d4:	230b      	movs	r3, #11
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010dc:	4619      	mov	r1, r3
 80010de:	4812      	ldr	r0, [pc, #72]	; (8001128 <MX_GPIO_Init+0x538>)
 80010e0:	f005 fcc4 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80010e4:	2328      	movs	r3, #40	; 0x28
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f0:	2303      	movs	r3, #3
 80010f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010f4:	230a      	movs	r3, #10
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010fc:	4619      	mov	r1, r3
 80010fe:	480a      	ldr	r0, [pc, #40]	; (8001128 <MX_GPIO_Init+0x538>)
 8001100:	f005 fcb4 	bl	8006a6c <HAL_GPIO_Init>

}
 8001104:	bf00      	nop
 8001106:	3740      	adds	r7, #64	; 0x40
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40020c00 	.word	0x40020c00
 8001110:	40020800 	.word	0x40020800
 8001114:	40022800 	.word	0x40022800
 8001118:	40021800 	.word	0x40021800
 800111c:	40021c00 	.word	0x40021c00
 8001120:	40022000 	.word	0x40022000
 8001124:	40020400 	.word	0x40020400
 8001128:	40020000 	.word	0x40020000

0800112c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001132:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <MX_I2C1_Init+0x78>)
 8001134:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001138:	4a1b      	ldr	r2, [pc, #108]	; (80011a8 <MX_I2C1_Init+0x7c>)
 800113a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_I2C1_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001144:	2201      	movs	r2, #1
 8001146:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <MX_I2C1_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_I2C1_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001166:	480e      	ldr	r0, [pc, #56]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001168:	f005 ff52 	bl	8007010 <HAL_I2C_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001172:	f000 fc8f 	bl	8001a94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001176:	2100      	movs	r1, #0
 8001178:	4809      	ldr	r0, [pc, #36]	; (80011a0 <MX_I2C1_Init+0x74>)
 800117a:	f006 fcdf 	bl	8007b3c <HAL_I2CEx_ConfigAnalogFilter>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001184:	f000 fc86 	bl	8001a94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001188:	2100      	movs	r1, #0
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_I2C1_Init+0x74>)
 800118c:	f006 fd21 	bl	8007bd2 <HAL_I2CEx_ConfigDigitalFilter>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001196:	f000 fc7d 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200001f4 	.word	0x200001f4
 80011a4:	40005400 	.word	0x40005400
 80011a8:	00c0eaff 	.word	0x00c0eaff

080011ac <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <MX_I2C3_Init+0x74>)
 80011b2:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <MX_I2C3_Init+0x78>)
 80011b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_I2C3_Init+0x74>)
 80011b8:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <MX_I2C3_Init+0x7c>)
 80011ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_I2C3_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_I2C3_Init+0x74>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_I2C3_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_I2C3_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_I2C3_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_I2C3_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_I2C3_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011e6:	480e      	ldr	r0, [pc, #56]	; (8001220 <MX_I2C3_Init+0x74>)
 80011e8:	f005 ff12 	bl	8007010 <HAL_I2C_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80011f2:	f000 fc4f 	bl	8001a94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011f6:	2100      	movs	r1, #0
 80011f8:	4809      	ldr	r0, [pc, #36]	; (8001220 <MX_I2C3_Init+0x74>)
 80011fa:	f006 fc9f 	bl	8007b3c <HAL_I2CEx_ConfigAnalogFilter>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001204:	f000 fc46 	bl	8001a94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001208:	2100      	movs	r1, #0
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_I2C3_Init+0x74>)
 800120c:	f006 fce1 	bl	8007bd2 <HAL_I2CEx_ConfigDigitalFilter>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001216:	f000 fc3d 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000248 	.word	0x20000248
 8001224:	40005c00 	.word	0x40005c00
 8001228:	00c0eaff 	.word	0x00c0eaff

0800122c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b0ac      	sub	sp, #176	; 0xb0
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	2284      	movs	r2, #132	; 0x84
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f00b f85f 	bl	800c310 <memset>
  if(i2cHandle->Instance==I2C1)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a44      	ldr	r2, [pc, #272]	; (8001368 <HAL_I2C_MspInit+0x13c>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d13d      	bne.n	80012d8 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800125c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001260:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001262:	2300      	movs	r3, #0
 8001264:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001266:	f107 0318 	add.w	r3, r7, #24
 800126a:	4618      	mov	r0, r3
 800126c:	f007 fd7e 	bl	8008d6c <HAL_RCCEx_PeriphCLKConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001276:	f000 fc0d 	bl	8001a94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b3c      	ldr	r3, [pc, #240]	; (800136c <HAL_I2C_MspInit+0x140>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a3b      	ldr	r2, [pc, #236]	; (800136c <HAL_I2C_MspInit+0x140>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b39      	ldr	r3, [pc, #228]	; (800136c <HAL_I2C_MspInit+0x140>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001292:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001296:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129a:	2312      	movs	r3, #18
 800129c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ac:	2304      	movs	r3, #4
 80012ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012b6:	4619      	mov	r1, r3
 80012b8:	482d      	ldr	r0, [pc, #180]	; (8001370 <HAL_I2C_MspInit+0x144>)
 80012ba:	f005 fbd7 	bl	8006a6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <HAL_I2C_MspInit+0x140>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a2a      	ldr	r2, [pc, #168]	; (800136c <HAL_I2C_MspInit+0x140>)
 80012c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b28      	ldr	r3, [pc, #160]	; (800136c <HAL_I2C_MspInit+0x140>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80012d6:	e042      	b.n	800135e <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a25      	ldr	r2, [pc, #148]	; (8001374 <HAL_I2C_MspInit+0x148>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d13d      	bne.n	800135e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80012e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ee:	f107 0318 	add.w	r3, r7, #24
 80012f2:	4618      	mov	r0, r3
 80012f4:	f007 fd3a 	bl	8008d6c <HAL_RCCEx_PeriphCLKConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80012fe:	f000 fbc9 	bl	8001a94 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <HAL_I2C_MspInit+0x140>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a19      	ldr	r2, [pc, #100]	; (800136c <HAL_I2C_MspInit+0x140>)
 8001308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <HAL_I2C_MspInit+0x140>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800131a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800131e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001322:	2312      	movs	r3, #18
 8001324:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001328:	2301      	movs	r3, #1
 800132a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132e:	2303      	movs	r3, #3
 8001330:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001334:	2304      	movs	r3, #4
 8001336:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800133a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800133e:	4619      	mov	r1, r3
 8001340:	480d      	ldr	r0, [pc, #52]	; (8001378 <HAL_I2C_MspInit+0x14c>)
 8001342:	f005 fb93 	bl	8006a6c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_I2C_MspInit+0x140>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <HAL_I2C_MspInit+0x140>)
 800134c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_I2C_MspInit+0x140>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
}
 800135e:	bf00      	nop
 8001360:	37b0      	adds	r7, #176	; 0xb0
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40005400 	.word	0x40005400
 800136c:	40023800 	.word	0x40023800
 8001370:	40020400 	.word	0x40020400
 8001374:	40005c00 	.word	0x40005c00
 8001378:	40021c00 	.word	0x40021c00

0800137c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a15      	ldr	r2, [pc, #84]	; (80013e0 <HAL_I2C_MspDeInit+0x64>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d110      	bne.n	80013b0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_I2C_MspDeInit+0x68>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <HAL_I2C_MspDeInit+0x68>)
 8001394:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800139a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800139e:	4812      	ldr	r0, [pc, #72]	; (80013e8 <HAL_I2C_MspDeInit+0x6c>)
 80013a0:	f005 fd10 	bl	8006dc4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80013a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013a8:	480f      	ldr	r0, [pc, #60]	; (80013e8 <HAL_I2C_MspDeInit+0x6c>)
 80013aa:	f005 fd0b 	bl	8006dc4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 80013ae:	e013      	b.n	80013d8 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <HAL_I2C_MspDeInit+0x70>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d10e      	bne.n	80013d8 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_I2C_MspDeInit+0x68>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <HAL_I2C_MspDeInit+0x68>)
 80013c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80013c6:	2180      	movs	r1, #128	; 0x80
 80013c8:	4809      	ldr	r0, [pc, #36]	; (80013f0 <HAL_I2C_MspDeInit+0x74>)
 80013ca:	f005 fcfb 	bl	8006dc4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80013ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d2:	4807      	ldr	r0, [pc, #28]	; (80013f0 <HAL_I2C_MspDeInit+0x74>)
 80013d4:	f005 fcf6 	bl	8006dc4 <HAL_GPIO_DeInit>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40005400 	.word	0x40005400
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40005c00 	.word	0x40005c00
 80013f0:	40021c00 	.word	0x40021c00

080013f4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	; 0x38
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2234      	movs	r2, #52	; 0x34
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f00a ff85 	bl	800c310 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001406:	4b3a      	ldr	r3, [pc, #232]	; (80014f0 <MX_LTDC_Init+0xfc>)
 8001408:	4a3a      	ldr	r2, [pc, #232]	; (80014f4 <MX_LTDC_Init+0x100>)
 800140a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800140c:	4b38      	ldr	r3, [pc, #224]	; (80014f0 <MX_LTDC_Init+0xfc>)
 800140e:	2200      	movs	r2, #0
 8001410:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001412:	4b37      	ldr	r3, [pc, #220]	; (80014f0 <MX_LTDC_Init+0xfc>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001418:	4b35      	ldr	r3, [pc, #212]	; (80014f0 <MX_LTDC_Init+0xfc>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800141e:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <MX_LTDC_Init+0xfc>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001424:	4b32      	ldr	r3, [pc, #200]	; (80014f0 <MX_LTDC_Init+0xfc>)
 8001426:	2228      	movs	r2, #40	; 0x28
 8001428:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800142a:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <MX_LTDC_Init+0xfc>)
 800142c:	2209      	movs	r2, #9
 800142e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001430:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <MX_LTDC_Init+0xfc>)
 8001432:	2235      	movs	r2, #53	; 0x35
 8001434:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001436:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <MX_LTDC_Init+0xfc>)
 8001438:	220b      	movs	r2, #11
 800143a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800143c:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <MX_LTDC_Init+0xfc>)
 800143e:	f240 2215 	movw	r2, #533	; 0x215
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001444:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <MX_LTDC_Init+0xfc>)
 8001446:	f240 121b 	movw	r2, #283	; 0x11b
 800144a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <MX_LTDC_Init+0xfc>)
 800144e:	f240 2235 	movw	r2, #565	; 0x235
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001454:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <MX_LTDC_Init+0xfc>)
 8001456:	f240 121d 	movw	r2, #285	; 0x11d
 800145a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <MX_LTDC_Init+0xfc>)
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001464:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <MX_LTDC_Init+0xfc>)
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800146c:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <MX_LTDC_Init+0xfc>)
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001474:	481e      	ldr	r0, [pc, #120]	; (80014f0 <MX_LTDC_Init+0xfc>)
 8001476:	f006 fbf9 	bl	8007c6c <HAL_LTDC_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001480:	f000 fb08 	bl	8001a94 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001488:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800148c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001492:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001496:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001498:	2302      	movs	r3, #2
 800149a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800149c:	23ff      	movs	r3, #255	; 0xff
 800149e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80014a4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014a8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80014aa:	2307      	movs	r3, #7
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80014ae:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80014b4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80014ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_LTDC_Init+0xfc>)
 80014da:	f006 fd59 	bl	8007f90 <HAL_LTDC_ConfigLayer>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80014e4:	f000 fad6 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	3738      	adds	r7, #56	; 0x38
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	2000029c 	.word	0x2000029c
 80014f4:	40016800 	.word	0x40016800

080014f8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08e      	sub	sp, #56	; 0x38
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a55      	ldr	r2, [pc, #340]	; (800166c <HAL_LTDC_MspInit+0x174>)
 8001516:	4293      	cmp	r3, r2
 8001518:	f040 80a3 	bne.w	8001662 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800151c:	4b54      	ldr	r3, [pc, #336]	; (8001670 <HAL_LTDC_MspInit+0x178>)
 800151e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001520:	4a53      	ldr	r2, [pc, #332]	; (8001670 <HAL_LTDC_MspInit+0x178>)
 8001522:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001526:	6453      	str	r3, [r2, #68]	; 0x44
 8001528:	4b51      	ldr	r3, [pc, #324]	; (8001670 <HAL_LTDC_MspInit+0x178>)
 800152a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001530:	623b      	str	r3, [r7, #32]
 8001532:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001534:	4b4e      	ldr	r3, [pc, #312]	; (8001670 <HAL_LTDC_MspInit+0x178>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	4a4d      	ldr	r2, [pc, #308]	; (8001670 <HAL_LTDC_MspInit+0x178>)
 800153a:	f043 0310 	orr.w	r3, r3, #16
 800153e:	6313      	str	r3, [r2, #48]	; 0x30
 8001540:	4b4b      	ldr	r3, [pc, #300]	; (8001670 <HAL_LTDC_MspInit+0x178>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	61fb      	str	r3, [r7, #28]
 800154a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800154c:	4b48      	ldr	r3, [pc, #288]	; (8001670 <HAL_LTDC_MspInit+0x178>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	4a47      	ldr	r2, [pc, #284]	; (8001670 <HAL_LTDC_MspInit+0x178>)
 8001552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001556:	6313      	str	r3, [r2, #48]	; 0x30
 8001558:	4b45      	ldr	r3, [pc, #276]	; (8001670 <HAL_LTDC_MspInit+0x178>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001560:	61bb      	str	r3, [r7, #24]
 8001562:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001564:	4b42      	ldr	r3, [pc, #264]	; (8001670 <HAL_LTDC_MspInit+0x178>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	4a41      	ldr	r2, [pc, #260]	; (8001670 <HAL_LTDC_MspInit+0x178>)
 800156a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800156e:	6313      	str	r3, [r2, #48]	; 0x30
 8001570:	4b3f      	ldr	r3, [pc, #252]	; (8001670 <HAL_LTDC_MspInit+0x178>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800157c:	4b3c      	ldr	r3, [pc, #240]	; (8001670 <HAL_LTDC_MspInit+0x178>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	4a3b      	ldr	r2, [pc, #236]	; (8001670 <HAL_LTDC_MspInit+0x178>)
 8001582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001586:	6313      	str	r3, [r2, #48]	; 0x30
 8001588:	4b39      	ldr	r3, [pc, #228]	; (8001670 <HAL_LTDC_MspInit+0x178>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001594:	4b36      	ldr	r3, [pc, #216]	; (8001670 <HAL_LTDC_MspInit+0x178>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	4a35      	ldr	r2, [pc, #212]	; (8001670 <HAL_LTDC_MspInit+0x178>)
 800159a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159e:	6313      	str	r3, [r2, #48]	; 0x30
 80015a0:	4b33      	ldr	r3, [pc, #204]	; (8001670 <HAL_LTDC_MspInit+0x178>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80015ac:	2310      	movs	r3, #16
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015bc:	230e      	movs	r3, #14
 80015be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c4:	4619      	mov	r1, r3
 80015c6:	482b      	ldr	r0, [pc, #172]	; (8001674 <HAL_LTDC_MspInit+0x17c>)
 80015c8:	f005 fa50 	bl	8006a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80015cc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015de:	230e      	movs	r3, #14
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e6:	4619      	mov	r1, r3
 80015e8:	4823      	ldr	r0, [pc, #140]	; (8001678 <HAL_LTDC_MspInit+0x180>)
 80015ea:	f005 fa3f 	bl	8006a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80015ee:	23f7      	movs	r3, #247	; 0xf7
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015fe:	230e      	movs	r3, #14
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001606:	4619      	mov	r1, r3
 8001608:	481c      	ldr	r0, [pc, #112]	; (800167c <HAL_LTDC_MspInit+0x184>)
 800160a:	f005 fa2f 	bl	8006a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800160e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001620:	2309      	movs	r3, #9
 8001622:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001628:	4619      	mov	r1, r3
 800162a:	4815      	ldr	r0, [pc, #84]	; (8001680 <HAL_LTDC_MspInit+0x188>)
 800162c:	f005 fa1e 	bl	8006a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001630:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001642:	230e      	movs	r3, #14
 8001644:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164a:	4619      	mov	r1, r3
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <HAL_LTDC_MspInit+0x18c>)
 800164e:	f005 fa0d 	bl	8006a6c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2105      	movs	r1, #5
 8001656:	2058      	movs	r0, #88	; 0x58
 8001658:	f004 f95e 	bl	8005918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800165c:	2058      	movs	r0, #88	; 0x58
 800165e:	f004 f977 	bl	8005950 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001662:	bf00      	nop
 8001664:	3738      	adds	r7, #56	; 0x38
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40016800 	.word	0x40016800
 8001670:	40023800 	.word	0x40023800
 8001674:	40021000 	.word	0x40021000
 8001678:	40022400 	.word	0x40022400
 800167c:	40022800 	.word	0x40022800
 8001680:	40021800 	.word	0x40021800
 8001684:	40022000 	.word	0x40022000

08001688 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800168c:	f3bf 8f4f 	dsb	sy
}
 8001690:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001692:	f3bf 8f6f 	isb	sy
}
 8001696:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001698:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <SCB_EnableICache+0x48>)
 800169a:	2200      	movs	r2, #0
 800169c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80016a0:	f3bf 8f4f 	dsb	sy
}
 80016a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016a6:	f3bf 8f6f 	isb	sy
}
 80016aa:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <SCB_EnableICache+0x48>)
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <SCB_EnableICache+0x48>)
 80016b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80016b8:	f3bf 8f4f 	dsb	sy
}
 80016bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016be:	f3bf 8f6f 	isb	sy
}
 80016c2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <SCB_EnableDCache+0x84>)
 80016dc:	2200      	movs	r2, #0
 80016de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80016e2:	f3bf 8f4f 	dsb	sy
}
 80016e6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <SCB_EnableDCache+0x84>)
 80016ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016ee:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	0b5b      	lsrs	r3, r3, #13
 80016f4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016f8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	08db      	lsrs	r3, r3, #3
 80016fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001702:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	015a      	lsls	r2, r3, #5
 8001708:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800170c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001712:	4911      	ldr	r1, [pc, #68]	; (8001758 <SCB_EnableDCache+0x84>)
 8001714:	4313      	orrs	r3, r2
 8001716:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	1e5a      	subs	r2, r3, #1
 800171e:	60ba      	str	r2, [r7, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1ef      	bne.n	8001704 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	1e5a      	subs	r2, r3, #1
 8001728:	60fa      	str	r2, [r7, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1e5      	bne.n	80016fa <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800172e:	f3bf 8f4f 	dsb	sy
}
 8001732:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <SCB_EnableDCache+0x84>)
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <SCB_EnableDCache+0x84>)
 800173a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001740:	f3bf 8f4f 	dsb	sy
}
 8001744:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001746:	f3bf 8f6f 	isb	sy
}
 800174a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	f5ad 4d90 	sub.w	sp, sp, #18432	; 0x4800
 8001762:	b091      	sub	sp, #68	; 0x44
 8001764:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	static __IO uint32_t Volume = 100;
	uint16_t buffer[AUDIO_IN_PCM_BUFFER_SIZE];
	uint32_t i;
   	char text[50] = { };
 8001766:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800176a:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	3304      	adds	r3, #4
 8001774:	222e      	movs	r2, #46	; 0x2e
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f00a fdc9 	bl	800c310 <memset>
	static TS_StateTypeDef TS_State;
	/* Enable I-Cache */
	SCB_EnableICache();
 800177e:	f7ff ff83 	bl	8001688 <SCB_EnableICache>

	/* Enable D-Cache */
	SCB_EnableDCache();
 8001782:	f7ff ffa7 	bl	80016d4 <SCB_EnableDCache>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001786:	f003 ff9a 	bl	80056be <HAL_Init>

	/* USER CODE BEGIN Init */
	BSP_LCD_Init();
 800178a:	f001 fb5b 	bl	8002e44 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800178e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001792:	2000      	movs	r0, #0
 8001794:	f001 fbee 	bl	8002f74 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
	LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8001798:	f001 fbc4 	bl	8002f24 <BSP_LCD_GetXSize>
 800179c:	4604      	mov	r4, r0
 800179e:	f001 fbd5 	bl	8002f4c <BSP_LCD_GetYSize>
 80017a2:	4603      	mov	r3, r0
 80017a4:	fb04 f303 	mul.w	r3, r4, r3
 80017a8:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
	BSP_LCD_LayerDefaultInit(1,
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4619      	mov	r1, r3
 80017b0:	2001      	movs	r0, #1
 80017b2:	f001 fbdf 	bl	8002f74 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 80017b6:	f001 fd21 	bl	80031fc <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(0);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f001 fc3a 	bl	8003034 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(00);
 80017c0:	2000      	movs	r0, #0
 80017c2:	f001 fc79 	bl	80030b8 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 80017c6:	4856      	ldr	r0, [pc, #344]	; (8001920 <main+0x1c4>)
 80017c8:	f001 fc44 	bl	8003054 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 50);
 80017cc:	f001 fbaa 	bl	8002f24 <BSP_LCD_GetXSize>
 80017d0:	4603      	mov	r3, r0
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	2332      	movs	r3, #50	; 0x32
 80017d6:	2100      	movs	r1, #0
 80017d8:	2000      	movs	r0, #0
 80017da:	f001 fc95 	bl	8003108 <BSP_LCD_FillRect>
	BSP_LCD_SelectLayer(1);
 80017de:	2001      	movs	r0, #1
 80017e0:	f001 fc28 	bl	8003034 <BSP_LCD_SelectLayer>
	BSP_LCD_SetFont(&Font20);
 80017e4:	484f      	ldr	r0, [pc, #316]	; (8001924 <main+0x1c8>)
 80017e6:	f001 fc4d 	bl	8003084 <BSP_LCD_SetFont>
	BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 50);
 80017ea:	f001 fb9b 	bl	8002f24 <BSP_LCD_GetXSize>
 80017ee:	4603      	mov	r3, r0
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	2332      	movs	r3, #50	; 0x32
 80017f4:	2100      	movs	r1, #0
 80017f6:	2000      	movs	r0, #0
 80017f8:	f001 fc86 	bl	8003108 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f001 fc28 	bl	8003054 <BSP_LCD_SetTextColor>
	sprintf(text, "Analyseur de spectre");
 8001804:	4b48      	ldr	r3, [pc, #288]	; (8001928 <main+0x1cc>)
 8001806:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800180a:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800180e:	443b      	add	r3, r7
 8001810:	4946      	ldr	r1, [pc, #280]	; (800192c <main+0x1d0>)
 8001812:	4618      	mov	r0, r3
 8001814:	f00a fd84 	bl	800c320 <siprintf>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001818:	f000 f88e 	bl	8001938 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800181c:	f000 f8fe 	bl	8001a1c <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001820:	f7ff f9e6 	bl	8000bf0 <MX_GPIO_Init>
	//MX_ADC3_Init();
	MX_DMA2D_Init();
 8001824:	f7fe fec6 	bl	80005b4 <MX_DMA2D_Init>
	MX_FMC_Init();
 8001828:	f7fe ff1c 	bl	8000664 <MX_FMC_Init>
	MX_I2C1_Init();
 800182c:	f7ff fc7e 	bl	800112c <MX_I2C1_Init>
	MX_I2C3_Init();
 8001830:	f7ff fcbc 	bl	80011ac <MX_I2C3_Init>
	MX_LTDC_Init();
 8001834:	f7ff fdde 	bl	80013f4 <MX_LTDC_Init>
	MX_RTC_Init();
 8001838:	f000 f932 	bl	8001aa0 <MX_RTC_Init>
	MX_SPI2_Init();
 800183c:	f000 fbb2 	bl	8001fa4 <MX_SPI2_Init>
	MX_TIM1_Init();
 8001840:	f002 f99a 	bl	8003b78 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001844:	f002 f9ec 	bl	8003c20 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001848:	f002 fa38 	bl	8003cbc <MX_TIM3_Init>
	MX_TIM5_Init();
 800184c:	f002 fa84 	bl	8003d58 <MX_TIM5_Init>
	MX_TIM8_Init();
 8001850:	f002 fad0 	bl	8003df4 <MX_TIM8_Init>
	//MX_USART1_UART_Init();
	//MX_USART6_UART_Init();
	//MX_ADC1_Init();
	//MX_DAC_Init();
	//MX_UART7_Init();
	MX_SAI2_Init();
 8001854:	f000 f9f6 	bl	8001c44 <MX_SAI2_Init>

	/* USER CODE BEGIN 2 */

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001858:	f001 fb64 	bl	8002f24 <BSP_LCD_GetXSize>
 800185c:	4603      	mov	r3, r0
 800185e:	b29c      	uxth	r4, r3
 8001860:	f001 fb74 	bl	8002f4c <BSP_LCD_GetYSize>
 8001864:	4603      	mov	r3, r0
 8001866:	b29b      	uxth	r3, r3
 8001868:	4619      	mov	r1, r3
 800186a:	4620      	mov	r0, r4
 800186c:	f001 ffdc 	bl	8003828 <BSP_TS_Init>
	BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, Volume, 16000);
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <main+0x1d4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800187a:	4619      	mov	r1, r3
 800187c:	2004      	movs	r0, #4
 800187e:	f000 fe49 	bl	8002514 <BSP_AUDIO_OUT_Init>
	BSP_AUDIO_IN_Init(16000, DEFAULT_AUDIO_IN_BIT_RESOLUTION,
 8001882:	2202      	movs	r2, #2
 8001884:	2110      	movs	r1, #16
 8001886:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800188a:	f001 f89d 	bl	80029c8 <BSP_AUDIO_IN_Init>
			DEFAULT_AUDIO_IN_CHANNEL_NBR);
	for (i = 0; i < AUDIO_IN_PCM_BUFFER_SIZE; i++) {
 800188e:	2300      	movs	r3, #0
 8001890:	f644 023c 	movw	r2, #18492	; 0x483c
 8001894:	443a      	add	r2, r7
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	e013      	b.n	80018c2 <main+0x166>
		buffer[i] = 0;
 800189a:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800189e:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 80018a2:	f644 023c 	movw	r2, #18492	; 0x483c
 80018a6:	443a      	add	r2, r7
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	2100      	movs	r1, #0
 80018ac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i = 0; i < AUDIO_IN_PCM_BUFFER_SIZE; i++) {
 80018b0:	f644 033c 	movw	r3, #18492	; 0x483c
 80018b4:	443b      	add	r3, r7
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	f644 023c 	movw	r2, #18492	; 0x483c
 80018be:	443a      	add	r2, r7
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	f644 033c 	movw	r3, #18492	; 0x483c
 80018c6:	443b      	add	r3, r7
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 80018ce:	d3e4      	bcc.n	800189a <main+0x13e>
	}
	i = 0 ;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f644 023c 	movw	r2, #18492	; 0x483c
 80018d6:	443a      	add	r2, r7
 80018d8:	6013      	str	r3, [r2, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		res = BSP_AUDIO_IN_Record(buffer, AUDIO_IN_PCM_BUFFER_SIZE);
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <main+0x1d8>)
 80018dc:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80018e0:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80018e4:	443b      	add	r3, r7
 80018e6:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 80018ea:	4618      	mov	r0, r3
 80018ec:	f001 f8ea 	bl	8002ac4 <BSP_AUDIO_IN_Record>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f644 023b 	movw	r2, #18491	; 0x483b
 80018f6:	443a      	add	r2, r7
 80018f8:	7013      	strb	r3, [r2, #0]
		if( res == AUDIO_OK)
 80018fa:	f644 033b 	movw	r3, #18491	; 0x483b
 80018fe:	443b      	add	r3, r7
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1e9      	bne.n	80018da <main+0x17e>
			BSP_AUDIO_OUT_Play(buffer, AUDIO_IN_PCM_BUFFER_SIZE);
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <main+0x1d8>)
 8001908:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800190c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8001910:	443b      	add	r3, r7
 8001912:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8001916:	4618      	mov	r0, r3
 8001918:	f000 fe4e 	bl	80025b8 <BSP_AUDIO_OUT_Play>
		res = BSP_AUDIO_IN_Record(buffer, AUDIO_IN_PCM_BUFFER_SIZE);
 800191c:	e7dd      	b.n	80018da <main+0x17e>
 800191e:	bf00      	nop
 8001920:	ff404040 	.word	0xff404040
 8001924:	20000034 	.word	0x20000034
 8001928:	ffffb7c4 	.word	0xffffb7c4
 800192c:	0800cbf8 	.word	0x0800cbf8
 8001930:	20000028 	.word	0x20000028
 8001934:	ffffb7f8 	.word	0xffffb7f8

08001938 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b094      	sub	sp, #80	; 0x50
 800193c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800193e:	f107 0320 	add.w	r3, r7, #32
 8001942:	2230      	movs	r2, #48	; 0x30
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f00a fce2 	bl	800c310 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800195c:	f006 fcfe 	bl	800835c <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001960:	4b2c      	ldr	r3, [pc, #176]	; (8001a14 <SystemClock_Config+0xdc>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	4a2b      	ldr	r2, [pc, #172]	; (8001a14 <SystemClock_Config+0xdc>)
 8001966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196a:	6413      	str	r3, [r2, #64]	; 0x40
 800196c:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <SystemClock_Config+0xdc>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001978:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <SystemClock_Config+0xe0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a26      	ldr	r2, [pc, #152]	; (8001a18 <SystemClock_Config+0xe0>)
 800197e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <SystemClock_Config+0xe0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8001990:	2309      	movs	r3, #9
 8001992:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001994:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800199a:	2301      	movs	r3, #1
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800199e:	2302      	movs	r3, #2
 80019a0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80019a8:	2319      	movs	r3, #25
 80019aa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 400;
 80019ac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80019b0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019b2:	2302      	movs	r3, #2
 80019b4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 9;
 80019b6:	2309      	movs	r3, #9
 80019b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80019ba:	f107 0320 	add.w	r3, r7, #32
 80019be:	4618      	mov	r0, r3
 80019c0:	f006 fd2c 	bl	800841c <HAL_RCC_OscConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0x96>
		Error_Handler();
 80019ca:	f000 f863 	bl	8001a94 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80019ce:	f006 fcd5 	bl	800837c <HAL_PWREx_EnableOverDrive>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <SystemClock_Config+0xa4>
		Error_Handler();
 80019d8:	f000 f85c 	bl	8001a94 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80019dc:	230f      	movs	r3, #15
 80019de:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e0:	2302      	movs	r3, #2
 80019e2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019ec:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2106      	movs	r1, #6
 80019fa:	4618      	mov	r0, r3
 80019fc:	f006 ffb2 	bl	8008964 <HAL_RCC_ClockConfig>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <SystemClock_Config+0xd2>
		Error_Handler();
 8001a06:	f000 f845 	bl	8001a94 <Error_Handler>
	}
}
 8001a0a:	bf00      	nop
 8001a0c:	3750      	adds	r7, #80	; 0x50
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40007000 	.word	0x40007000

08001a1c <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b0a2      	sub	sp, #136	; 0x88
 8001a20:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2284      	movs	r2, #132	; 0x84
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f00a fc71 	bl	800c310 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <PeriphCommonClock_Config+0x50>)
 8001a30:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_SAI2;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001a32:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a36:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001a38:	2305      	movs	r3, #5
 8001a3a:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001a40:	2303      	movs	r3, #3
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001a44:	2301      	movs	r3, #1
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001a48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a4c:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	4618      	mov	r0, r3
 8001a56:	f007 f989 	bl	8008d6c <HAL_RCCEx_PeriphCLKConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <PeriphCommonClock_Config+0x48>
		Error_Handler();
 8001a60:	f000 f818 	bl	8001a94 <Error_Handler>
	}
}
 8001a64:	bf00      	nop
 8001a66:	3788      	adds	r7, #136	; 0x88
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	00100008 	.word	0x00100008

08001a70 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001a82:	f003 fe29 	bl	80056d8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40001000 	.word	0x40001000

08001a94 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a9c:	e7fe      	b.n	8001a9c <Error_Handler+0x8>
	...

08001aa0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b090      	sub	sp, #64	; 0x40
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001aa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
 8001ab4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001aba:	463b      	mov	r3, r7
 8001abc:	2228      	movs	r2, #40	; 0x28
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f00a fc25 	bl	800c310 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ac6:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <MX_RTC_Init+0x140>)
 8001ac8:	4a46      	ldr	r2, [pc, #280]	; (8001be4 <MX_RTC_Init+0x144>)
 8001aca:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001acc:	4b44      	ldr	r3, [pc, #272]	; (8001be0 <MX_RTC_Init+0x140>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ad2:	4b43      	ldr	r3, [pc, #268]	; (8001be0 <MX_RTC_Init+0x140>)
 8001ad4:	227f      	movs	r2, #127	; 0x7f
 8001ad6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ad8:	4b41      	ldr	r3, [pc, #260]	; (8001be0 <MX_RTC_Init+0x140>)
 8001ada:	22ff      	movs	r2, #255	; 0xff
 8001adc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ade:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <MX_RTC_Init+0x140>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ae4:	4b3e      	ldr	r3, [pc, #248]	; (8001be0 <MX_RTC_Init+0x140>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001aea:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <MX_RTC_Init+0x140>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001af0:	483b      	ldr	r0, [pc, #236]	; (8001be0 <MX_RTC_Init+0x140>)
 8001af2:	f007 ff7b 	bl	80099ec <HAL_RTC_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001afc:	f7ff ffca 	bl	8001a94 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001b1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b1e:	2201      	movs	r2, #1
 8001b20:	4619      	mov	r1, r3
 8001b22:	482f      	ldr	r0, [pc, #188]	; (8001be0 <MX_RTC_Init+0x140>)
 8001b24:	f007 ffe6 	bl	8009af4 <HAL_RTC_SetTime>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001b2e:	f7ff ffb1 	bl	8001a94 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b32:	2301      	movs	r3, #1
 8001b34:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4619      	mov	r1, r3
 8001b52:	4823      	ldr	r0, [pc, #140]	; (8001be0 <MX_RTC_Init+0x140>)
 8001b54:	f008 f868 	bl	8009c28 <HAL_RTC_SetDate>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001b5e:	f7ff ff99 	bl	8001a94 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b92:	463b      	mov	r3, r7
 8001b94:	2201      	movs	r2, #1
 8001b96:	4619      	mov	r1, r3
 8001b98:	4811      	ldr	r0, [pc, #68]	; (8001be0 <MX_RTC_Init+0x140>)
 8001b9a:	f008 f8c9 	bl	8009d30 <HAL_RTC_SetAlarm>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001ba4:	f7ff ff76 	bl	8001a94 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001ba8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001bae:	463b      	mov	r3, r7
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480a      	ldr	r0, [pc, #40]	; (8001be0 <MX_RTC_Init+0x140>)
 8001bb6:	f008 f8bb 	bl	8009d30 <HAL_RTC_SetAlarm>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8001bc0:	f7ff ff68 	bl	8001a94 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4805      	ldr	r0, [pc, #20]	; (8001be0 <MX_RTC_Init+0x140>)
 8001bca:	f008 fa7d 	bl	800a0c8 <HAL_RTCEx_SetTimeStamp>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8001bd4:	f7ff ff5e 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001bd8:	bf00      	nop
 8001bda:	3740      	adds	r7, #64	; 0x40
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000344 	.word	0x20000344
 8001be4:	40002800 	.word	0x40002800

08001be8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b0a4      	sub	sp, #144	; 0x90
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	2284      	movs	r2, #132	; 0x84
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f00a fb89 	bl	800c310 <memset>
  if(rtcHandle->Instance==RTC)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a0e      	ldr	r2, [pc, #56]	; (8001c3c <HAL_RTC_MspInit+0x54>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d114      	bne.n	8001c32 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c08:	2320      	movs	r3, #32
 8001c0a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c10:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	4618      	mov	r0, r3
 8001c18:	f007 f8a8 	bl	8008d6c <HAL_RCCEx_PeriphCLKConfig>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001c22:	f7ff ff37 	bl	8001a94 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_RTC_MspInit+0x58>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <HAL_RTC_MspInit+0x58>)
 8001c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c30:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c32:	bf00      	nop
 8001c34:	3790      	adds	r7, #144	; 0x90
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40002800 	.word	0x40002800
 8001c40:	40023800 	.word	0x40023800

08001c44 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001c48:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <MX_SAI2_Init+0xb4>)
 8001c4a:	4a2c      	ldr	r2, [pc, #176]	; (8001cfc <MX_SAI2_Init+0xb8>)
 8001c4c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001c4e:	4b2a      	ldr	r3, [pc, #168]	; (8001cf8 <MX_SAI2_Init+0xb4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001c54:	4b28      	ldr	r3, [pc, #160]	; (8001cf8 <MX_SAI2_Init+0xb4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c5a:	4b27      	ldr	r3, [pc, #156]	; (8001cf8 <MX_SAI2_Init+0xb4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001c60:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <MX_SAI2_Init+0xb4>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8001c66:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <MX_SAI2_Init+0xb4>)
 8001c68:	2204      	movs	r2, #4
 8001c6a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8001c6c:	4b22      	ldr	r3, [pc, #136]	; (8001cf8 <MX_SAI2_Init+0xb4>)
 8001c6e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001c72:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c74:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <MX_SAI2_Init+0xb4>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_MONOMODE;
 8001c7a:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <MX_SAI2_Init+0xb4>)
 8001c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <MX_SAI2_Init+0xb4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <MX_SAI2_Init+0xb4>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001c8e:	2302      	movs	r3, #2
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	4818      	ldr	r0, [pc, #96]	; (8001cf8 <MX_SAI2_Init+0xb4>)
 8001c96:	f008 fa7f 	bl	800a198 <HAL_SAI_InitProtocol>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_SAI2_Init+0x60>
  {
    Error_Handler();
 8001ca0:	f7ff fef8 	bl	8001a94 <Error_Handler>
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <MX_SAI2_Init+0xbc>)
 8001ca6:	4a17      	ldr	r2, [pc, #92]	; (8001d04 <MX_SAI2_Init+0xc0>)
 8001ca8:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <MX_SAI2_Init+0xbc>)
 8001cac:	2203      	movs	r2, #3
 8001cae:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <MX_SAI2_Init+0xbc>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <MX_SAI2_Init+0xbc>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <MX_SAI2_Init+0xbc>)
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <MX_SAI2_Init+0xbc>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_MONOMODE;
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <MX_SAI2_Init+0xbc>)
 8001cca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <MX_SAI2_Init+0xbc>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <MX_SAI2_Init+0xbc>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001cdc:	2302      	movs	r3, #2
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4807      	ldr	r0, [pc, #28]	; (8001d00 <MX_SAI2_Init+0xbc>)
 8001ce4:	f008 fa58 	bl	800a198 <HAL_SAI_InitProtocol>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_SAI2_Init+0xae>
  {
    Error_Handler();
 8001cee:	f7ff fed1 	bl	8001a94 <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000364 	.word	0x20000364
 8001cfc:	40015c04 	.word	0x40015c04
 8001d00:	200003e8 	.word	0x200003e8
 8001d04:	40015c24 	.word	0x40015c24

08001d08 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a69      	ldr	r2, [pc, #420]	; (8001ebc <HAL_SAI_MspInit+0x1b4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d162      	bne.n	8001de0 <HAL_SAI_MspInit+0xd8>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8001d1a:	4b69      	ldr	r3, [pc, #420]	; (8001ec0 <HAL_SAI_MspInit+0x1b8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d113      	bne.n	8001d4a <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001d22:	4b68      	ldr	r3, [pc, #416]	; (8001ec4 <HAL_SAI_MspInit+0x1bc>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	4a67      	ldr	r2, [pc, #412]	; (8001ec4 <HAL_SAI_MspInit+0x1bc>)
 8001d28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2e:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_SAI_MspInit+0x1bc>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2105      	movs	r1, #5
 8001d3e:	205b      	movs	r0, #91	; 0x5b
 8001d40:	f003 fdea 	bl	8005918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8001d44:	205b      	movs	r0, #91	; 0x5b
 8001d46:	f003 fe03 	bl	8005950 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8001d4a:	4b5d      	ldr	r3, [pc, #372]	; (8001ec0 <HAL_SAI_MspInit+0x1b8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	4a5b      	ldr	r2, [pc, #364]	; (8001ec0 <HAL_SAI_MspInit+0x1b8>)
 8001d52:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001d54:	23f0      	movs	r3, #240	; 0xf0
 8001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001d64:	230a      	movs	r3, #10
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4856      	ldr	r0, [pc, #344]	; (8001ec8 <HAL_SAI_MspInit+0x1c0>)
 8001d70:	f004 fe7c 	bl	8006a6c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8001d74:	4b55      	ldr	r3, [pc, #340]	; (8001ecc <HAL_SAI_MspInit+0x1c4>)
 8001d76:	4a56      	ldr	r2, [pc, #344]	; (8001ed0 <HAL_SAI_MspInit+0x1c8>)
 8001d78:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8001d7a:	4b54      	ldr	r3, [pc, #336]	; (8001ecc <HAL_SAI_MspInit+0x1c4>)
 8001d7c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001d80:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d82:	4b52      	ldr	r3, [pc, #328]	; (8001ecc <HAL_SAI_MspInit+0x1c4>)
 8001d84:	2240      	movs	r2, #64	; 0x40
 8001d86:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d88:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_SAI_MspInit+0x1c4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8001d8e:	4b4f      	ldr	r3, [pc, #316]	; (8001ecc <HAL_SAI_MspInit+0x1c4>)
 8001d90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d94:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d96:	4b4d      	ldr	r3, [pc, #308]	; (8001ecc <HAL_SAI_MspInit+0x1c4>)
 8001d98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d9c:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d9e:	4b4b      	ldr	r3, [pc, #300]	; (8001ecc <HAL_SAI_MspInit+0x1c4>)
 8001da0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001da4:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_NORMAL;
 8001da6:	4b49      	ldr	r3, [pc, #292]	; (8001ecc <HAL_SAI_MspInit+0x1c4>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8001dac:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_SAI_MspInit+0x1c4>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001db2:	4b46      	ldr	r3, [pc, #280]	; (8001ecc <HAL_SAI_MspInit+0x1c4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8001db8:	4844      	ldr	r0, [pc, #272]	; (8001ecc <HAL_SAI_MspInit+0x1c4>)
 8001dba:	f003 fe53 	bl	8005a64 <HAL_DMA_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_SAI_MspInit+0xc0>
    {
      Error_Handler();
 8001dc4:	f7ff fe66 	bl	8001a94 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a40      	ldr	r2, [pc, #256]	; (8001ecc <HAL_SAI_MspInit+0x1c4>)
 8001dcc:	671a      	str	r2, [r3, #112]	; 0x70
 8001dce:	4a3f      	ldr	r2, [pc, #252]	; (8001ecc <HAL_SAI_MspInit+0x1c4>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a3d      	ldr	r2, [pc, #244]	; (8001ecc <HAL_SAI_MspInit+0x1c4>)
 8001dd8:	66da      	str	r2, [r3, #108]	; 0x6c
 8001dda:	4a3c      	ldr	r2, [pc, #240]	; (8001ecc <HAL_SAI_MspInit+0x1c4>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a3b      	ldr	r2, [pc, #236]	; (8001ed4 <HAL_SAI_MspInit+0x1cc>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d163      	bne.n	8001eb2 <HAL_SAI_MspInit+0x1aa>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001dea:	4b35      	ldr	r3, [pc, #212]	; (8001ec0 <HAL_SAI_MspInit+0x1b8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d113      	bne.n	8001e1a <HAL_SAI_MspInit+0x112>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001df2:	4b34      	ldr	r3, [pc, #208]	; (8001ec4 <HAL_SAI_MspInit+0x1bc>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	4a33      	ldr	r2, [pc, #204]	; (8001ec4 <HAL_SAI_MspInit+0x1bc>)
 8001df8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfe:	4b31      	ldr	r3, [pc, #196]	; (8001ec4 <HAL_SAI_MspInit+0x1bc>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2105      	movs	r1, #5
 8001e0e:	205b      	movs	r0, #91	; 0x5b
 8001e10:	f003 fd82 	bl	8005918 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8001e14:	205b      	movs	r0, #91	; 0x5b
 8001e16:	f003 fd9b 	bl	8005950 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8001e1a:	4b29      	ldr	r3, [pc, #164]	; (8001ec0 <HAL_SAI_MspInit+0x1b8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	4a27      	ldr	r2, [pc, #156]	; (8001ec0 <HAL_SAI_MspInit+0x1b8>)
 8001e22:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001e36:	230a      	movs	r3, #10
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4825      	ldr	r0, [pc, #148]	; (8001ed8 <HAL_SAI_MspInit+0x1d0>)
 8001e42:	f004 fe13 	bl	8006a6c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream6;
 8001e46:	4b25      	ldr	r3, [pc, #148]	; (8001edc <HAL_SAI_MspInit+0x1d4>)
 8001e48:	4a25      	ldr	r2, [pc, #148]	; (8001ee0 <HAL_SAI_MspInit+0x1d8>)
 8001e4a:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 8001e4c:	4b23      	ldr	r3, [pc, #140]	; (8001edc <HAL_SAI_MspInit+0x1d4>)
 8001e4e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001e52:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e54:	4b21      	ldr	r3, [pc, #132]	; (8001edc <HAL_SAI_MspInit+0x1d4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e5a:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_SAI_MspInit+0x1d4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8001e60:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_SAI_MspInit+0x1d4>)
 8001e62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e66:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e68:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <HAL_SAI_MspInit+0x1d4>)
 8001e6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e6e:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e70:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <HAL_SAI_MspInit+0x1d4>)
 8001e72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e76:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_NORMAL;
 8001e78:	4b18      	ldr	r3, [pc, #96]	; (8001edc <HAL_SAI_MspInit+0x1d4>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8001e7e:	4b17      	ldr	r3, [pc, #92]	; (8001edc <HAL_SAI_MspInit+0x1d4>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e84:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_SAI_MspInit+0x1d4>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001e8a:	4814      	ldr	r0, [pc, #80]	; (8001edc <HAL_SAI_MspInit+0x1d4>)
 8001e8c:	f003 fdea 	bl	8005a64 <HAL_DMA_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_SAI_MspInit+0x192>
    {
      Error_Handler();
 8001e96:	f7ff fdfd 	bl	8001a94 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <HAL_SAI_MspInit+0x1d4>)
 8001e9e:	671a      	str	r2, [r3, #112]	; 0x70
 8001ea0:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_SAI_MspInit+0x1d4>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <HAL_SAI_MspInit+0x1d4>)
 8001eaa:	66da      	str	r2, [r3, #108]	; 0x6c
 8001eac:	4a0b      	ldr	r2, [pc, #44]	; (8001edc <HAL_SAI_MspInit+0x1d4>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001eb2:	bf00      	nop
 8001eb4:	3728      	adds	r7, #40	; 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40015c04 	.word	0x40015c04
 8001ec0:	2000052c 	.word	0x2000052c
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40022000 	.word	0x40022000
 8001ecc:	2000046c 	.word	0x2000046c
 8001ed0:	40026470 	.word	0x40026470
 8001ed4:	40015c24 	.word	0x40015c24
 8001ed8:	40021800 	.word	0x40021800
 8001edc:	200004cc 	.word	0x200004cc
 8001ee0:	400264a0 	.word	0x400264a0

08001ee4 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a26      	ldr	r2, [pc, #152]	; (8001f8c <HAL_SAI_MspDeInit+0xa8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d11f      	bne.n	8001f36 <HAL_SAI_MspDeInit+0x52>
    {
    SAI2_client --;
 8001ef6:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <HAL_SAI_MspDeInit+0xac>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	4a24      	ldr	r2, [pc, #144]	; (8001f90 <HAL_SAI_MspDeInit+0xac>)
 8001efe:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <HAL_SAI_MspDeInit+0xac>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d108      	bne.n	8001f1a <HAL_SAI_MspDeInit+0x36>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 8001f08:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <HAL_SAI_MspDeInit+0xb0>)
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0c:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <HAL_SAI_MspDeInit+0xb0>)
 8001f0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f12:	6453      	str	r3, [r2, #68]	; 0x44
      HAL_NVIC_DisableIRQ(SAI2_IRQn);
 8001f14:	205b      	movs	r0, #91	; 0x5b
 8001f16:	f003 fd29 	bl	800596c <HAL_NVIC_DisableIRQ>
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 8001f1a:	21f0      	movs	r1, #240	; 0xf0
 8001f1c:	481e      	ldr	r0, [pc, #120]	; (8001f98 <HAL_SAI_MspDeInit+0xb4>)
 8001f1e:	f004 ff51 	bl	8006dc4 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f26:	4618      	mov	r0, r3
 8001f28:	f003 fe4a 	bl	8005bc0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 fe45 	bl	8005bc0 <HAL_DMA_DeInit>
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a18      	ldr	r2, [pc, #96]	; (8001f9c <HAL_SAI_MspDeInit+0xb8>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d120      	bne.n	8001f82 <HAL_SAI_MspDeInit+0x9e>
    {
    SAI2_client --;
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <HAL_SAI_MspDeInit+0xac>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <HAL_SAI_MspDeInit+0xac>)
 8001f48:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <HAL_SAI_MspDeInit+0xac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d108      	bne.n	8001f64 <HAL_SAI_MspDeInit+0x80>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <HAL_SAI_MspDeInit+0xb0>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a0f      	ldr	r2, [pc, #60]	; (8001f94 <HAL_SAI_MspDeInit+0xb0>)
 8001f58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
      HAL_NVIC_DisableIRQ(SAI2_IRQn);
 8001f5e:	205b      	movs	r0, #91	; 0x5b
 8001f60:	f003 fd04 	bl	800596c <HAL_NVIC_DisableIRQ>
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 8001f64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f68:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <HAL_SAI_MspDeInit+0xbc>)
 8001f6a:	f004 ff2b 	bl	8006dc4 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 fe24 	bl	8005bc0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fe1f 	bl	8005bc0 <HAL_DMA_DeInit>
    }
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40015c04 	.word	0x40015c04
 8001f90:	2000052c 	.word	0x2000052c
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40022000 	.word	0x40022000
 8001f9c:	40015c24 	.word	0x40015c24
 8001fa0:	40021800 	.word	0x40021800

08001fa4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <MX_SPI2_Init+0x74>)
 8001faa:	4a1c      	ldr	r2, [pc, #112]	; (800201c <MX_SPI2_Init+0x78>)
 8001fac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fae:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <MX_SPI2_Init+0x74>)
 8001fb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fb6:	4b18      	ldr	r3, [pc, #96]	; (8002018 <MX_SPI2_Init+0x74>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001fbc:	4b16      	ldr	r3, [pc, #88]	; (8002018 <MX_SPI2_Init+0x74>)
 8001fbe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001fc2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <MX_SPI2_Init+0x74>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fca:	4b13      	ldr	r3, [pc, #76]	; (8002018 <MX_SPI2_Init+0x74>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <MX_SPI2_Init+0x74>)
 8001fd2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001fd6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <MX_SPI2_Init+0x74>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <MX_SPI2_Init+0x74>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <MX_SPI2_Init+0x74>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <MX_SPI2_Init+0x74>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <MX_SPI2_Init+0x74>)
 8001ff2:	2207      	movs	r2, #7
 8001ff4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <MX_SPI2_Init+0x74>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <MX_SPI2_Init+0x74>)
 8001ffe:	2208      	movs	r2, #8
 8002000:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002002:	4805      	ldr	r0, [pc, #20]	; (8002018 <MX_SPI2_Init+0x74>)
 8002004:	f009 f8db 	bl	800b1be <HAL_SPI_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800200e:	f7ff fd41 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000530 	.word	0x20000530
 800201c:	40003800 	.word	0x40003800

08002020 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <HAL_SPI_MspInit+0xb4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d144      	bne.n	80020cc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002042:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <HAL_SPI_MspInit+0xb8>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	4a24      	ldr	r2, [pc, #144]	; (80020d8 <HAL_SPI_MspInit+0xb8>)
 8002048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800204c:	6413      	str	r3, [r2, #64]	; 0x40
 800204e:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <HAL_SPI_MspInit+0xb8>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <HAL_SPI_MspInit+0xb8>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a1e      	ldr	r2, [pc, #120]	; (80020d8 <HAL_SPI_MspInit+0xb8>)
 8002060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <HAL_SPI_MspInit+0xb8>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_SPI_MspInit+0xb8>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a18      	ldr	r2, [pc, #96]	; (80020d8 <HAL_SPI_MspInit+0xb8>)
 8002078:	f043 0302 	orr.w	r3, r3, #2
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <HAL_SPI_MspInit+0xb8>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800208a:	2303      	movs	r3, #3
 800208c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800209a:	2305      	movs	r3, #5
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	4619      	mov	r1, r3
 80020a4:	480d      	ldr	r0, [pc, #52]	; (80020dc <HAL_SPI_MspInit+0xbc>)
 80020a6:	f004 fce1 	bl	8006a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80020aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80020ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020bc:	2305      	movs	r3, #5
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	4806      	ldr	r0, [pc, #24]	; (80020e0 <HAL_SPI_MspInit+0xc0>)
 80020c8:	f004 fcd0 	bl	8006a6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80020cc:	bf00      	nop
 80020ce:	3728      	adds	r7, #40	; 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40003800 	.word	0x40003800
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40022000 	.word	0x40022000
 80020e0:	40020400 	.word	0x40020400

080020e4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08c      	sub	sp, #48	; 0x30
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a51      	ldr	r2, [pc, #324]	; (8002234 <I2Cx_MspInit+0x150>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d14d      	bne.n	8002190 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80020f4:	4b50      	ldr	r3, [pc, #320]	; (8002238 <I2Cx_MspInit+0x154>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	4a4f      	ldr	r2, [pc, #316]	; (8002238 <I2Cx_MspInit+0x154>)
 80020fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002100:	4b4d      	ldr	r3, [pc, #308]	; (8002238 <I2Cx_MspInit+0x154>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002110:	2312      	movs	r3, #18
 8002112:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002118:	2302      	movs	r3, #2
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800211c:	2304      	movs	r3, #4
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002120:	f107 031c 	add.w	r3, r7, #28
 8002124:	4619      	mov	r1, r3
 8002126:	4845      	ldr	r0, [pc, #276]	; (800223c <I2Cx_MspInit+0x158>)
 8002128:	f004 fca0 	bl	8006a6c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800212c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002130:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002132:	f107 031c 	add.w	r3, r7, #28
 8002136:	4619      	mov	r1, r3
 8002138:	4840      	ldr	r0, [pc, #256]	; (800223c <I2Cx_MspInit+0x158>)
 800213a:	f004 fc97 	bl	8006a6c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800213e:	4b3e      	ldr	r3, [pc, #248]	; (8002238 <I2Cx_MspInit+0x154>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a3d      	ldr	r2, [pc, #244]	; (8002238 <I2Cx_MspInit+0x154>)
 8002144:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <I2Cx_MspInit+0x154>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002156:	4b38      	ldr	r3, [pc, #224]	; (8002238 <I2Cx_MspInit+0x154>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	4a37      	ldr	r2, [pc, #220]	; (8002238 <I2Cx_MspInit+0x154>)
 800215c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002160:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002162:	4b35      	ldr	r3, [pc, #212]	; (8002238 <I2Cx_MspInit+0x154>)
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	4a34      	ldr	r2, [pc, #208]	; (8002238 <I2Cx_MspInit+0x154>)
 8002168:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800216c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	210f      	movs	r1, #15
 8002172:	2048      	movs	r0, #72	; 0x48
 8002174:	f003 fbd0 	bl	8005918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002178:	2048      	movs	r0, #72	; 0x48
 800217a:	f003 fbe9 	bl	8005950 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	210f      	movs	r1, #15
 8002182:	2049      	movs	r0, #73	; 0x49
 8002184:	f003 fbc8 	bl	8005918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002188:	2049      	movs	r0, #73	; 0x49
 800218a:	f003 fbe1 	bl	8005950 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800218e:	e04d      	b.n	800222c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002190:	4b29      	ldr	r3, [pc, #164]	; (8002238 <I2Cx_MspInit+0x154>)
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	4a28      	ldr	r2, [pc, #160]	; (8002238 <I2Cx_MspInit+0x154>)
 8002196:	f043 0302 	orr.w	r3, r3, #2
 800219a:	6313      	str	r3, [r2, #48]	; 0x30
 800219c:	4b26      	ldr	r3, [pc, #152]	; (8002238 <I2Cx_MspInit+0x154>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80021a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ac:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80021ae:	2312      	movs	r3, #18
 80021b0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80021b6:	2302      	movs	r3, #2
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80021ba:	2304      	movs	r3, #4
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80021be:	f107 031c 	add.w	r3, r7, #28
 80021c2:	4619      	mov	r1, r3
 80021c4:	481e      	ldr	r0, [pc, #120]	; (8002240 <I2Cx_MspInit+0x15c>)
 80021c6:	f004 fc51 	bl	8006a6c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80021ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	4619      	mov	r1, r3
 80021d6:	481a      	ldr	r0, [pc, #104]	; (8002240 <I2Cx_MspInit+0x15c>)
 80021d8:	f004 fc48 	bl	8006a6c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80021dc:	4b16      	ldr	r3, [pc, #88]	; (8002238 <I2Cx_MspInit+0x154>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	4a15      	ldr	r2, [pc, #84]	; (8002238 <I2Cx_MspInit+0x154>)
 80021e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021e6:	6413      	str	r3, [r2, #64]	; 0x40
 80021e8:	4b13      	ldr	r3, [pc, #76]	; (8002238 <I2Cx_MspInit+0x154>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <I2Cx_MspInit+0x154>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4a0f      	ldr	r2, [pc, #60]	; (8002238 <I2Cx_MspInit+0x154>)
 80021fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021fe:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002200:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <I2Cx_MspInit+0x154>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <I2Cx_MspInit+0x154>)
 8002206:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800220a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800220c:	2200      	movs	r2, #0
 800220e:	210f      	movs	r1, #15
 8002210:	201f      	movs	r0, #31
 8002212:	f003 fb81 	bl	8005918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002216:	201f      	movs	r0, #31
 8002218:	f003 fb9a 	bl	8005950 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800221c:	2200      	movs	r2, #0
 800221e:	210f      	movs	r1, #15
 8002220:	2020      	movs	r0, #32
 8002222:	f003 fb79 	bl	8005918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002226:	2020      	movs	r0, #32
 8002228:	f003 fb92 	bl	8005950 <HAL_NVIC_EnableIRQ>
}
 800222c:	bf00      	nop
 800222e:	3730      	adds	r7, #48	; 0x30
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000594 	.word	0x20000594
 8002238:	40023800 	.word	0x40023800
 800223c:	40021c00 	.word	0x40021c00
 8002240:	40020400 	.word	0x40020400

08002244 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f005 f9cd 	bl	80075ec <HAL_I2C_GetState>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d125      	bne.n	80022a4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a14      	ldr	r2, [pc, #80]	; (80022ac <I2Cx_Init+0x68>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d103      	bne.n	8002268 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <I2Cx_Init+0x6c>)
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	e002      	b.n	800226e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a12      	ldr	r2, [pc, #72]	; (80022b4 <I2Cx_Init+0x70>)
 800226c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a11      	ldr	r2, [pc, #68]	; (80022b8 <I2Cx_Init+0x74>)
 8002272:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff23 	bl	80020e4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f004 feb6 	bl	8007010 <HAL_I2C_Init>
  }
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000594 	.word	0x20000594
 80022b0:	40005c00 	.word	0x40005c00
 80022b4:	40005400 	.word	0x40005400
 80022b8:	40912732 	.word	0x40912732

080022bc <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af04      	add	r7, sp, #16
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	4608      	mov	r0, r1
 80022c6:	4611      	mov	r1, r2
 80022c8:	461a      	mov	r2, r3
 80022ca:	4603      	mov	r3, r0
 80022cc:	72fb      	strb	r3, [r7, #11]
 80022ce:	460b      	mov	r3, r1
 80022d0:	813b      	strh	r3, [r7, #8]
 80022d2:	4613      	mov	r3, r2
 80022d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80022da:	7afb      	ldrb	r3, [r7, #11]
 80022dc:	b299      	uxth	r1, r3
 80022de:	88f8      	ldrh	r0, [r7, #6]
 80022e0:	893a      	ldrh	r2, [r7, #8]
 80022e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e6:	9302      	str	r3, [sp, #8]
 80022e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	4603      	mov	r3, r0
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f005 f860 	bl	80073b8 <HAL_I2C_Mem_Read>
 80022f8:	4603      	mov	r3, r0
 80022fa:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80022fc:	7dfb      	ldrb	r3, [r7, #23]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d004      	beq.n	800230c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002302:	7afb      	ldrb	r3, [r7, #11]
 8002304:	4619      	mov	r1, r3
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 f832 	bl	8002370 <I2Cx_Error>
  }
  return status;    
 800230c:	7dfb      	ldrb	r3, [r7, #23]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b08a      	sub	sp, #40	; 0x28
 800231a:	af04      	add	r7, sp, #16
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	4608      	mov	r0, r1
 8002320:	4611      	mov	r1, r2
 8002322:	461a      	mov	r2, r3
 8002324:	4603      	mov	r3, r0
 8002326:	72fb      	strb	r3, [r7, #11]
 8002328:	460b      	mov	r3, r1
 800232a:	813b      	strh	r3, [r7, #8]
 800232c:	4613      	mov	r3, r2
 800232e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002334:	7afb      	ldrb	r3, [r7, #11]
 8002336:	b299      	uxth	r1, r3
 8002338:	88f8      	ldrh	r0, [r7, #6]
 800233a:	893a      	ldrh	r2, [r7, #8]
 800233c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002340:	9302      	str	r3, [sp, #8]
 8002342:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	4603      	mov	r3, r0
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f004 ff1f 	bl	8007190 <HAL_I2C_Mem_Write>
 8002352:	4603      	mov	r3, r0
 8002354:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002356:	7dfb      	ldrb	r3, [r7, #23]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d004      	beq.n	8002366 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800235c:	7afb      	ldrb	r3, [r7, #11]
 800235e:	4619      	mov	r1, r3
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f805 	bl	8002370 <I2Cx_Error>
  }
  return status;
 8002366:	7dfb      	ldrb	r3, [r7, #23]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f004 fed7 	bl	8007130 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff ff5e 	bl	8002244 <I2Cx_Init>
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <AUDIO_IO_Init+0x10>)
 8002396:	f7ff ff55 	bl	8002244 <I2Cx_Init>
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000594 	.word	0x20000594

080023a4 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
 80023be:	460b      	mov	r3, r1
 80023c0:	80bb      	strh	r3, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 80023c6:	887b      	ldrh	r3, [r7, #2]
 80023c8:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80023ca:	89fb      	ldrh	r3, [r7, #14]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80023d2:	89fb      	ldrh	r3, [r7, #14]
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	b21a      	sxth	r2, r3
 80023da:	887b      	ldrh	r3, [r7, #2]
 80023dc:	b21b      	sxth	r3, r3
 80023de:	4313      	orrs	r3, r2
 80023e0:	b21b      	sxth	r3, r3
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80023e6:	88ba      	ldrh	r2, [r7, #4]
 80023e8:	79f9      	ldrb	r1, [r7, #7]
 80023ea:	2302      	movs	r3, #2
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	1cbb      	adds	r3, r7, #2
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2302      	movs	r3, #2
 80023f4:	4803      	ldr	r0, [pc, #12]	; (8002404 <AUDIO_IO_Write+0x50>)
 80023f6:	f7ff ff8e 	bl	8002316 <I2Cx_WriteMultiple>
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000594 	.word	0x20000594

08002408 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af02      	add	r7, sp, #8
 800240e:	4603      	mov	r3, r0
 8002410:	460a      	mov	r2, r1
 8002412:	71fb      	strb	r3, [r7, #7]
 8002414:	4613      	mov	r3, r2
 8002416:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	81bb      	strh	r3, [r7, #12]
 800241c:	2300      	movs	r3, #0
 800241e:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8002420:	88ba      	ldrh	r2, [r7, #4]
 8002422:	79f9      	ldrb	r1, [r7, #7]
 8002424:	2302      	movs	r3, #2
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	f107 030c 	add.w	r3, r7, #12
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2302      	movs	r3, #2
 8002430:	480a      	ldr	r0, [pc, #40]	; (800245c <AUDIO_IO_Read+0x54>)
 8002432:	f7ff ff43 	bl	80022bc <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8002436:	89bb      	ldrh	r3, [r7, #12]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 800243c:	89bb      	ldrh	r3, [r7, #12]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	b29b      	uxth	r3, r3
 8002442:	b21a      	sxth	r2, r3
 8002444:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002448:	4313      	orrs	r3, r2
 800244a:	b21b      	sxth	r3, r3
 800244c:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 800244e:	89fb      	ldrh	r3, [r7, #14]
 8002450:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8002452:	89bb      	ldrh	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000594 	.word	0x20000594

08002460 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f003 f955 	bl	8005718 <HAL_Delay>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <TS_IO_Init+0x10>)
 800247e:	f7ff fee1 	bl	8002244 <I2Cx_Init>
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000594 	.word	0x20000594

0800248c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af02      	add	r7, sp, #8
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
 8002496:	460b      	mov	r3, r1
 8002498:	71bb      	strb	r3, [r7, #6]
 800249a:	4613      	mov	r3, r2
 800249c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800249e:	79bb      	ldrb	r3, [r7, #6]
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	79f9      	ldrb	r1, [r7, #7]
 80024a4:	2301      	movs	r3, #1
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	1d7b      	adds	r3, r7, #5
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	2301      	movs	r3, #1
 80024ae:	4803      	ldr	r0, [pc, #12]	; (80024bc <TS_IO_Write+0x30>)
 80024b0:	f7ff ff31 	bl	8002316 <I2Cx_WriteMultiple>
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000594 	.word	0x20000594

080024c0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	4603      	mov	r3, r0
 80024c8:	460a      	mov	r2, r1
 80024ca:	71fb      	strb	r3, [r7, #7]
 80024cc:	4613      	mov	r3, r2
 80024ce:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80024d4:	79bb      	ldrb	r3, [r7, #6]
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	79f9      	ldrb	r1, [r7, #7]
 80024da:	2301      	movs	r3, #1
 80024dc:	9301      	str	r3, [sp, #4]
 80024de:	f107 030f 	add.w	r3, r7, #15
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2301      	movs	r3, #1
 80024e6:	4804      	ldr	r0, [pc, #16]	; (80024f8 <TS_IO_Read+0x38>)
 80024e8:	f7ff fee8 	bl	80022bc <I2Cx_ReadMultiple>

  return read_value;
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000594 	.word	0x20000594

080024fc <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f003 f907 	bl	8005718 <HAL_Delay>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <BSP_AUDIO_OUT_Init>:
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @note   The I2S PLL input clock must be done in the user application.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{ 
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	603a      	str	r2, [r7, #0]
 800251e:	80fb      	strh	r3, [r7, #6]
 8002520:	460b      	mov	r3, r1
 8002522:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
  uint32_t deviceid = 0x00;
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]

  /* Disable SAI */
  SAIx_Out_DeInit();
 800252c:	f000 fa36 	bl	800299c <SAIx_Out_DeInit>

  /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8002530:	2200      	movs	r2, #0
 8002532:	6839      	ldr	r1, [r7, #0]
 8002534:	481c      	ldr	r0, [pc, #112]	; (80025a8 <BSP_AUDIO_OUT_Init+0x94>)
 8002536:	f000 f98f 	bl	8002858 <BSP_AUDIO_OUT_ClockConfig>
 
  /* SAI data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800253a:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <BSP_AUDIO_OUT_Init+0x94>)
 800253c:	4a1b      	ldr	r2, [pc, #108]	; (80025ac <BSP_AUDIO_OUT_Init+0x98>)
 800253e:	601a      	str	r2, [r3, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8002540:	4819      	ldr	r0, [pc, #100]	; (80025a8 <BSP_AUDIO_OUT_Init+0x94>)
 8002542:	f008 fb1b 	bl	800ab7c <HAL_SAI_GetState>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d103      	bne.n	8002554 <BSP_AUDIO_OUT_Init+0x40>
  {
    /* Init the SAI MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 800254c:	2100      	movs	r1, #0
 800254e:	4816      	ldr	r0, [pc, #88]	; (80025a8 <BSP_AUDIO_OUT_Init+0x94>)
 8002550:	f000 f8ac 	bl	80026ac <BSP_AUDIO_OUT_MspInit>
  }
  SAIx_Out_Init(AudioFreq);
 8002554:	6838      	ldr	r0, [r7, #0]
 8002556:	f000 f9c3 	bl	80028e0 <SAIx_Out_Init>

  /* wm8994 codec initialization */
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <BSP_AUDIO_OUT_Init+0x9c>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2034      	movs	r0, #52	; 0x34
 8002560:	4798      	blx	r3
 8002562:	60b8      	str	r0, [r7, #8]
  
  if((deviceid) == WM8994_ID)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f648 1294 	movw	r2, #35220	; 0x8994
 800256a:	4293      	cmp	r3, r2
 800256c:	d109      	bne.n	8002582 <BSP_AUDIO_OUT_Init+0x6e>
  {  
    /* Reset the Codec Registers */
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <BSP_AUDIO_OUT_Init+0x9c>)
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	2034      	movs	r0, #52	; 0x34
 8002574:	4798      	blx	r3
    /* Initialize the audio driver structure */
    audio_drv = &wm8994_drv; 
 8002576:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <BSP_AUDIO_OUT_Init+0xa0>)
 8002578:	4a0d      	ldr	r2, [pc, #52]	; (80025b0 <BSP_AUDIO_OUT_Init+0x9c>)
 800257a:	601a      	str	r2, [r3, #0]
    ret = AUDIO_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
 8002580:	e001      	b.n	8002586 <BSP_AUDIO_OUT_Init+0x72>
  }
  else
  {
    ret = AUDIO_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d107      	bne.n	800259c <BSP_AUDIO_OUT_Init+0x88>
  {
    /* Initialize the codec internal registers */
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <BSP_AUDIO_OUT_Init+0xa0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681c      	ldr	r4, [r3, #0]
 8002592:	797a      	ldrb	r2, [r7, #5]
 8002594:	88f9      	ldrh	r1, [r7, #6]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2034      	movs	r0, #52	; 0x34
 800259a:	47a0      	blx	r4
  }
 
  return ret;
 800259c:	7bfb      	ldrb	r3, [r7, #15]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd90      	pop	{r4, r7, pc}
 80025a6:	bf00      	nop
 80025a8:	200005ec 	.word	0x200005ec
 80025ac:	40015c04 	.word	0x40015c04
 80025b0:	20000044 	.word	0x20000044
 80025b4:	200005e8 	.word	0x200005e8

080025b8 <BSP_AUDIO_OUT_Play>:
  * @param  Size: Number of audio data in BYTES unit.
  *         In memory, first element is for left channel, second element is for right channel
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <BSP_AUDIO_OUT_Play+0x4c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	b292      	uxth	r2, r2
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	2034      	movs	r0, #52	; 0x34
 80025d0:	4798      	blx	r3
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <BSP_AUDIO_OUT_Play+0x24>
  {  
    return AUDIO_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e00f      	b.n	80025fc <BSP_AUDIO_OUT_Play+0x44>
  }
  else
  {
    /* Update the Media layer and enable it for play */  
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025e2:	d203      	bcs.n	80025ec <BSP_AUDIO_OUT_Play+0x34>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	085b      	lsrs	r3, r3, #1
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	e001      	b.n	80025f0 <BSP_AUDIO_OUT_Play+0x38>
 80025ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025f0:	461a      	mov	r2, r3
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4804      	ldr	r0, [pc, #16]	; (8002608 <BSP_AUDIO_OUT_Play+0x50>)
 80025f6:	f008 f83b 	bl	800a670 <HAL_SAI_Transmit_DMA>
    
    return AUDIO_OK;
 80025fa:	2300      	movs	r3, #0
  }
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	200005e8 	.word	0x200005e8
 8002608:	200005ec 	.word	0x200005ec

0800260c <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8002614:	f000 f834 	bl	8002680 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8002628:	f000 f831 	bl	800268e <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 800263c:	480e      	ldr	r0, [pc, #56]	; (8002678 <HAL_SAI_ErrorCallback+0x44>)
 800263e:	f008 fa9d 	bl	800ab7c <HAL_SAI_GetState>
 8002642:	4603      	mov	r3, r0
 8002644:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8002646:	480d      	ldr	r0, [pc, #52]	; (800267c <HAL_SAI_ErrorCallback+0x48>)
 8002648:	f008 fa98 	bl	800ab7c <HAL_SAI_GetState>
 800264c:	4603      	mov	r3, r0
 800264e:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d002      	beq.n	800265c <HAL_SAI_ErrorCallback+0x28>
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	2b12      	cmp	r3, #18
 800265a:	d101      	bne.n	8002660 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 800265c:	f000 f81e 	bl	800269c <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8002660:	7bbb      	ldrb	r3, [r7, #14]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d002      	beq.n	800266c <HAL_SAI_ErrorCallback+0x38>
 8002666:	7bbb      	ldrb	r3, [r7, #14]
 8002668:	2b22      	cmp	r3, #34	; 0x22
 800266a:	d101      	bne.n	8002670 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 800266c:	f000 fa64 	bl	8002b38 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	200005ec 	.word	0x200005ec
 800267c:	20000670 	.word	0x20000670

08002680 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
/**
  * @brief  Manages the DMA full Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0
}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08c      	sub	sp, #48	; 0x30
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80026b6:	4b63      	ldr	r3, [pc, #396]	; (8002844 <BSP_AUDIO_OUT_MspInit+0x198>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	4a62      	ldr	r2, [pc, #392]	; (8002844 <BSP_AUDIO_OUT_MspInit+0x198>)
 80026bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026c0:	6453      	str	r3, [r2, #68]	; 0x44
 80026c2:	4b60      	ldr	r3, [pc, #384]	; (8002844 <BSP_AUDIO_OUT_MspInit+0x198>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026ca:	61bb      	str	r3, [r7, #24]
 80026cc:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 80026ce:	4b5d      	ldr	r3, [pc, #372]	; (8002844 <BSP_AUDIO_OUT_MspInit+0x198>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	4a5c      	ldr	r2, [pc, #368]	; (8002844 <BSP_AUDIO_OUT_MspInit+0x198>)
 80026d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d8:	6313      	str	r3, [r2, #48]	; 0x30
 80026da:	4b5a      	ldr	r3, [pc, #360]	; (8002844 <BSP_AUDIO_OUT_MspInit+0x198>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 80026e6:	4b57      	ldr	r3, [pc, #348]	; (8002844 <BSP_AUDIO_OUT_MspInit+0x198>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a56      	ldr	r2, [pc, #344]	; (8002844 <BSP_AUDIO_OUT_MspInit+0x198>)
 80026ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b54      	ldr	r3, [pc, #336]	; (8002844 <BSP_AUDIO_OUT_MspInit+0x198>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 80026fe:	4b51      	ldr	r3, [pc, #324]	; (8002844 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a50      	ldr	r2, [pc, #320]	; (8002844 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b4e      	ldr	r3, [pc, #312]	; (8002844 <BSP_AUDIO_OUT_MspInit+0x198>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800271a:	2302      	movs	r3, #2
 800271c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002722:	2303      	movs	r3, #3
 8002724:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002726:	230a      	movs	r3, #10
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 800272a:	f107 031c 	add.w	r3, r7, #28
 800272e:	4619      	mov	r1, r3
 8002730:	4845      	ldr	r0, [pc, #276]	; (8002848 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002732:	f004 f99b 	bl	8006a6c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8002736:	2320      	movs	r3, #32
 8002738:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002742:	2303      	movs	r3, #3
 8002744:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8002746:	230a      	movs	r3, #10
 8002748:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800274a:	f107 031c 	add.w	r3, r7, #28
 800274e:	4619      	mov	r1, r3
 8002750:	483d      	ldr	r0, [pc, #244]	; (8002848 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002752:	f004 f98b 	bl	8006a6c <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8002756:	2340      	movs	r3, #64	; 0x40
 8002758:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800275a:	2302      	movs	r3, #2
 800275c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002762:	2303      	movs	r3, #3
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002766:	230a      	movs	r3, #10
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800276a:	f107 031c 	add.w	r3, r7, #28
 800276e:	4619      	mov	r1, r3
 8002770:	4835      	ldr	r0, [pc, #212]	; (8002848 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002772:	f004 f97b 	bl	8006a6c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8002776:	2310      	movs	r3, #16
 8002778:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002782:	2303      	movs	r3, #3
 8002784:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002786:	230a      	movs	r3, #10
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800278a:	f107 031c 	add.w	r3, r7, #28
 800278e:	4619      	mov	r1, r3
 8002790:	482d      	ldr	r0, [pc, #180]	; (8002848 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002792:	f004 f96b 	bl	8006a6c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8002796:	4b2b      	ldr	r3, [pc, #172]	; (8002844 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a2a      	ldr	r2, [pc, #168]	; (8002844 <BSP_AUDIO_OUT_MspInit+0x198>)
 800279c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b28      	ldr	r3, [pc, #160]	; (8002844 <BSP_AUDIO_OUT_MspInit+0x198>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a26      	ldr	r2, [pc, #152]	; (800284c <BSP_AUDIO_OUT_MspInit+0x1a0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d138      	bne.n	800282a <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 80027b8:	4b25      	ldr	r3, [pc, #148]	; (8002850 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80027ba:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80027be:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80027c2:	2240      	movs	r2, #64	; 0x40
 80027c4:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80027c6:	4b22      	ldr	r3, [pc, #136]	; (8002850 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80027cc:	4b20      	ldr	r3, [pc, #128]	; (8002850 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80027ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027d2:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 80027d4:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80027d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027da:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 80027dc:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80027de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027e2:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 80027e4:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80027e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ea:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 80027ec:	4b18      	ldr	r3, [pc, #96]	; (8002850 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80027ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027f2:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80027f4:	4b16      	ldr	r3, [pc, #88]	; (8002850 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80027f6:	2204      	movs	r2, #4
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80027fc:	2203      	movs	r2, #3
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002800:	4b13      	ldr	r3, [pc, #76]	; (8002850 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002802:	2200      	movs	r2, #0
 8002804:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002808:	2200      	movs	r2, #0
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 800280c:	4b10      	ldr	r3, [pc, #64]	; (8002850 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800280e:	4a11      	ldr	r2, [pc, #68]	; (8002854 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8002810:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002816:	66da      	str	r2, [r3, #108]	; 0x6c
 8002818:	4a0d      	ldr	r2, [pc, #52]	; (8002850 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 800281e:	480c      	ldr	r0, [pc, #48]	; (8002850 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002820:	f003 f9ce 	bl	8005bc0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8002824:	480a      	ldr	r0, [pc, #40]	; (8002850 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002826:	f003 f91d 	bl	8005a64 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800282a:	2200      	movs	r2, #0
 800282c:	210e      	movs	r1, #14
 800282e:	203c      	movs	r0, #60	; 0x3c
 8002830:	f003 f872 	bl	8005918 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8002834:	203c      	movs	r0, #60	; 0x3c
 8002836:	f003 f88b 	bl	8005950 <HAL_NVIC_EnableIRQ>
}
 800283a:	bf00      	nop
 800283c:	3730      	adds	r7, #48	; 0x30
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	40022000 	.word	0x40022000
 800284c:	40015c04 	.word	0x40015c04
 8002850:	200006f4 	.word	0x200006f4
 8002854:	40026470 	.word	0x40026470

08002858 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8002858:	b580      	push	{r7, lr}
 800285a:	b0a6      	sub	sp, #152	; 0x98
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	4618      	mov	r0, r3
 800286a:	f006 fe6f 	bl	800954c <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f642 3211 	movw	r2, #11025	; 0x2b11
 8002874:	4293      	cmp	r3, r2
 8002876:	d009      	beq.n	800288c <BSP_AUDIO_OUT_ClockConfig+0x34>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f245 6222 	movw	r2, #22050	; 0x5622
 800287e:	4293      	cmp	r3, r2
 8002880:	d004      	beq.n	800288c <BSP_AUDIO_OUT_ClockConfig+0x34>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002888:	4293      	cmp	r3, r2
 800288a:	d112      	bne.n	80028b2 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800288c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002890:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8002892:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002896:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8002898:	f240 13ad 	movw	r3, #429	; 0x1ad
 800289c:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800289e:	2302      	movs	r3, #2
 80028a0:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 80028a2:	2313      	movs	r3, #19
 80028a4:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4618      	mov	r0, r3
 80028ac:	f006 fa5e 	bl	8008d6c <HAL_RCCEx_PeriphCLKConfig>
 80028b0:	e012      	b.n	80028d8 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80028b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028b6:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80028b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028bc:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 80028be:	f44f 73ac 	mov.w	r3, #344	; 0x158
 80028c2:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 80028c4:	2307      	movs	r3, #7
 80028c6:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 80028c8:	2301      	movs	r3, #1
 80028ca:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	4618      	mov	r0, r3
 80028d2:	f006 fa4b 	bl	8008d6c <HAL_RCCEx_PeriphCLKConfig>
  }
}
 80028d6:	bf00      	nop
 80028d8:	bf00      	nop
 80028da:	3798      	adds	r7, #152	; 0x98
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <SAIx_Out_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123 
  *         and user can update this configuration using 
  * @retval None
  */
static void SAIx_Out_Init(uint32_t AudioFreq)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80028e8:	4b2a      	ldr	r3, [pc, #168]	; (8002994 <SAIx_Out_Init+0xb4>)
 80028ea:	4a2b      	ldr	r2, [pc, #172]	; (8002998 <SAIx_Out_Init+0xb8>)
 80028ec:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80028ee:	4b29      	ldr	r3, [pc, #164]	; (8002994 <SAIx_Out_Init+0xb4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b27      	ldr	r3, [pc, #156]	; (8002994 <SAIx_Out_Init+0xb4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028fc:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x 
  LSBFirst: Disabled 
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80028fe:	4a25      	ldr	r2, [pc, #148]	; (8002994 <SAIx_Out_Init+0xb4>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8002904:	4b23      	ldr	r3, [pc, #140]	; (8002994 <SAIx_Out_Init+0xb4>)
 8002906:	2200      	movs	r2, #0
 8002908:	605a      	str	r2, [r3, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800290a:	4b22      	ldr	r3, [pc, #136]	; (8002994 <SAIx_Out_Init+0xb4>)
 800290c:	2200      	movs	r2, #0
 800290e:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8002910:	4b20      	ldr	r3, [pc, #128]	; (8002994 <SAIx_Out_Init+0xb4>)
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8002916:	4b1f      	ldr	r3, [pc, #124]	; (8002994 <SAIx_Out_Init+0xb4>)
 8002918:	2280      	movs	r2, #128	; 0x80
 800291a:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800291c:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <SAIx_Out_Init+0xb4>)
 800291e:	2200      	movs	r2, #0
 8002920:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002922:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <SAIx_Out_Init+0xb4>)
 8002924:	2201      	movs	r2, #1
 8002926:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8002928:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <SAIx_Out_Init+0xb4>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 800292e:	4b19      	ldr	r3, [pc, #100]	; (8002994 <SAIx_Out_Init+0xb4>)
 8002930:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002934:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002936:	4b17      	ldr	r3, [pc, #92]	; (8002994 <SAIx_Out_Init+0xb4>)
 8002938:	2201      	movs	r2, #1
 800293a:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */ 
  haudio_out_sai.FrameInit.FrameLength = 64; 
 800293c:	4b15      	ldr	r3, [pc, #84]	; (8002994 <SAIx_Out_Init+0xb4>)
 800293e:	2240      	movs	r2, #64	; 0x40
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8002942:	4b14      	ldr	r3, [pc, #80]	; (8002994 <SAIx_Out_Init+0xb4>)
 8002944:	2220      	movs	r2, #32
 8002946:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002948:	4b12      	ldr	r3, [pc, #72]	; (8002994 <SAIx_Out_Init+0xb4>)
 800294a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800294e:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002950:	4b10      	ldr	r3, [pc, #64]	; (8002994 <SAIx_Out_Init+0xb4>)
 8002952:	2200      	movs	r2, #0
 8002954:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002956:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <SAIx_Out_Init+0xb4>)
 8002958:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800295c:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot 
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800295e:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <SAIx_Out_Init+0xb4>)
 8002960:	2200      	movs	r2, #0
 8002962:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <SAIx_Out_Init+0xb4>)
 8002966:	2200      	movs	r2, #0
 8002968:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4; 
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <SAIx_Out_Init+0xb4>)
 800296c:	2204      	movs	r2, #4
 800296e:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <SAIx_Out_Init+0xb4>)
 8002972:	220f      	movs	r2, #15
 8002974:	661a      	str	r2, [r3, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8002976:	4807      	ldr	r0, [pc, #28]	; (8002994 <SAIx_Out_Init+0xb4>)
 8002978:	f007 fc42 	bl	800a200 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <SAIx_Out_Init+0xb4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	4b04      	ldr	r3, [pc, #16]	; (8002994 <SAIx_Out_Init+0xb4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800298a:	601a      	str	r2, [r3, #0]
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	200005ec 	.word	0x200005ec
 8002998:	40015c04 	.word	0x40015c04

0800299c <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80029a0:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <SAIx_Out_DeInit+0x24>)
 80029a2:	4a08      	ldr	r2, [pc, #32]	; (80029c4 <SAIx_Out_DeInit+0x28>)
 80029a4:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <SAIx_Out_DeInit+0x24>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <SAIx_Out_DeInit+0x24>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029b4:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 80029b6:	4802      	ldr	r0, [pc, #8]	; (80029c0 <SAIx_Out_DeInit+0x24>)
 80029b8:	f007 fda0 	bl	800a4fc <HAL_SAI_DeInit>
}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	200005ec 	.word	0x200005ec
 80029c4:	40015c04 	.word	0x40015c04

080029c8 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	68f9      	ldr	r1, [r7, #12]
 80029da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029de:	f000 f805 	bl	80029ec <BSP_AUDIO_IN_InitEx>
 80029e2:	4603      	mov	r3, r0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b089      	sub	sp, #36	; 0x24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	4603      	mov	r3, r0
 80029fa:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8002a04:	89fb      	ldrh	r3, [r7, #14]
 8002a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a0a:	d006      	beq.n	8002a1a <BSP_AUDIO_IN_InitEx+0x2e>
 8002a0c:	89fb      	ldrh	r3, [r7, #14]
 8002a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a12:	d002      	beq.n	8002a1a <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	77fb      	strb	r3, [r7, #31]
 8002a18:	e046      	b.n	8002aa8 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8002a1a:	f000 f9fd 	bl	8002e18 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8002a1e:	2200      	movs	r2, #0
 8002a20:	68b9      	ldr	r1, [r7, #8]
 8002a22:	4824      	ldr	r0, [pc, #144]	; (8002ab4 <BSP_AUDIO_IN_InitEx+0xc8>)
 8002a24:	f7ff ff18 	bl	8002858 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002a28:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <BSP_AUDIO_IN_InitEx+0xc8>)
 8002a2a:	4a23      	ldr	r2, [pc, #140]	; (8002ab8 <BSP_AUDIO_IN_InitEx+0xcc>)
 8002a2c:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8002a2e:	4821      	ldr	r0, [pc, #132]	; (8002ab4 <BSP_AUDIO_IN_InitEx+0xc8>)
 8002a30:	f008 f8a4 	bl	800ab7c <HAL_SAI_GetState>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d107      	bne.n	8002a4a <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	481d      	ldr	r0, [pc, #116]	; (8002ab4 <BSP_AUDIO_IN_InitEx+0xc8>)
 8002a3e:	f7ff fe35 	bl	80026ac <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8002a42:	2100      	movs	r1, #0
 8002a44:	481b      	ldr	r0, [pc, #108]	; (8002ab4 <BSP_AUDIO_IN_InitEx+0xc8>)
 8002a46:	f000 f87f 	bl	8002b48 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8002a4a:	89fb      	ldrh	r3, [r7, #14]
 8002a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a50:	d102      	bne.n	8002a58 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8002a52:	230a      	movs	r3, #10
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	e001      	b.n	8002a5c <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8002a58:	2305      	movs	r3, #5
 8002a5a:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	69b9      	ldr	r1, [r7, #24]
 8002a60:	2001      	movs	r0, #1
 8002a62:	f000 f923 	bl	8002cac <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8002a66:	4b15      	ldr	r3, [pc, #84]	; (8002abc <BSP_AUDIO_IN_InitEx+0xd0>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2034      	movs	r0, #52	; 0x34
 8002a6c:	4798      	blx	r3
 8002a6e:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f648 1294 	movw	r2, #35220	; 0x8994
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d109      	bne.n	8002a8e <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <BSP_AUDIO_IN_InitEx+0xd0>)
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	2034      	movs	r0, #52	; 0x34
 8002a80:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8002a82:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <BSP_AUDIO_IN_InitEx+0xd4>)
 8002a84:	4a0d      	ldr	r2, [pc, #52]	; (8002abc <BSP_AUDIO_IN_InitEx+0xd0>)
 8002a86:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	77fb      	strb	r3, [r7, #31]
 8002a8c:	e001      	b.n	8002a92 <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8002a92:	7ffb      	ldrb	r3, [r7, #31]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d107      	bne.n	8002aa8 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <BSP_AUDIO_IN_InitEx+0xd4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681c      	ldr	r4, [r3, #0]
 8002a9e:	89f9      	ldrh	r1, [r7, #14]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2264      	movs	r2, #100	; 0x64
 8002aa4:	2034      	movs	r0, #52	; 0x34
 8002aa6:	47a0      	blx	r4
    }
  }
  return ret;
 8002aa8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3724      	adds	r7, #36	; 0x24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd90      	pop	{r4, r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000670 	.word	0x20000670
 8002ab8:	40015c24 	.word	0x40015c24
 8002abc:	20000044 	.word	0x20000044
 8002ac0:	200005e8 	.word	0x200005e8

08002ac4 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	4805      	ldr	r0, [pc, #20]	; (8002af0 <BSP_AUDIO_IN_Record+0x2c>)
 8002adc:	f007 fe78 	bl	800a7d0 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	b2db      	uxtb	r3, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000670 	.word	0x20000670

08002af4 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002afc:	f000 f80e 	bl	8002b1c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8002b10:	f000 f80b 	bl	8002b2a <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002b2e:	bf00      	nop
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
	...

08002b48 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08c      	sub	sp, #48	; 0x30
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8002b52:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	4a4f      	ldr	r2, [pc, #316]	; (8002c94 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002b58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5e:	4b4d      	ldr	r3, [pc, #308]	; (8002c94 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b66:	61bb      	str	r3, [r7, #24]
 8002b68:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8002b6a:	4b4a      	ldr	r3, [pc, #296]	; (8002c94 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a49      	ldr	r2, [pc, #292]	; (8002c94 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8002b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b86:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002b90:	2302      	movs	r3, #2
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8002b94:	230a      	movs	r3, #10
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002b98:	f107 031c 	add.w	r3, r7, #28
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	483e      	ldr	r0, [pc, #248]	; (8002c98 <BSP_AUDIO_IN_MspInit+0x150>)
 8002ba0:	f003 ff64 	bl	8006a6c <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8002ba4:	4b3b      	ldr	r3, [pc, #236]	; (8002c94 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	4a3a      	ldr	r2, [pc, #232]	; (8002c94 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bae:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb0:	4b38      	ldr	r3, [pc, #224]	; (8002c94 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8002bbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bc0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8002bce:	f107 031c 	add.w	r3, r7, #28
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4831      	ldr	r0, [pc, #196]	; (8002c9c <BSP_AUDIO_IN_MspInit+0x154>)
 8002bd6:	f003 ff49 	bl	8006a6c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8002bda:	4b2e      	ldr	r3, [pc, #184]	; (8002c94 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	4a2d      	ldr	r2, [pc, #180]	; (8002c94 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002be0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002be4:	6313      	str	r3, [r2, #48]	; 0x30
 8002be6:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a2a      	ldr	r2, [pc, #168]	; (8002ca0 <BSP_AUDIO_IN_MspInit+0x158>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d137      	bne.n	8002c6c <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8002bfc:	4b29      	ldr	r3, [pc, #164]	; (8002ca4 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002c02:	4b28      	ldr	r3, [pc, #160]	; (8002ca4 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002c08:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002c0e:	4b25      	ldr	r3, [pc, #148]	; (8002ca4 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c14:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8002c16:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c1c:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8002c1e:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c24:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8002c26:	4b1f      	ldr	r3, [pc, #124]	; (8002ca4 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c2c:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002c2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c34:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002c36:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c3e:	2203      	movs	r2, #3
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002c42:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8002c48:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c50:	4a15      	ldr	r2, [pc, #84]	; (8002ca8 <BSP_AUDIO_IN_MspInit+0x160>)
 8002c52:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c58:	671a      	str	r2, [r3, #112]	; 0x70
 8002c5a:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8002c60:	4810      	ldr	r0, [pc, #64]	; (8002ca4 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c62:	f002 ffad 	bl	8005bc0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8002c66:	480f      	ldr	r0, [pc, #60]	; (8002ca4 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c68:	f002 fefc 	bl	8005a64 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	210f      	movs	r1, #15
 8002c70:	2046      	movs	r0, #70	; 0x46
 8002c72:	f002 fe51 	bl	8005918 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8002c76:	2046      	movs	r0, #70	; 0x46
 8002c78:	f002 fe6a 	bl	8005950 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	210f      	movs	r1, #15
 8002c80:	2028      	movs	r0, #40	; 0x28
 8002c82:	f002 fe49 	bl	8005918 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8002c86:	2028      	movs	r0, #40	; 0x28
 8002c88:	f002 fe62 	bl	8005950 <HAL_NVIC_EnableIRQ>
}
 8002c8c:	bf00      	nop
 8002c8e:	3730      	adds	r7, #48	; 0x30
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40021800 	.word	0x40021800
 8002c9c:	40021c00 	.word	0x40021c00
 8002ca0:	40015c24 	.word	0x40015c24
 8002ca4:	20000754 	.word	0x20000754
 8002ca8:	400264b8 	.word	0x400264b8

08002cac <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002cb8:	4b53      	ldr	r3, [pc, #332]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002cba:	4a54      	ldr	r2, [pc, #336]	; (8002e0c <SAIx_In_Init+0x160>)
 8002cbc:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002cbe:	4b52      	ldr	r3, [pc, #328]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4b50      	ldr	r3, [pc, #320]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ccc:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8002cce:	4a4e      	ldr	r2, [pc, #312]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8002cd4:	4a4c      	ldr	r2, [pc, #304]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8002cda:	4b4b      	ldr	r3, [pc, #300]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8002ce0:	4b49      	ldr	r3, [pc, #292]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8002ce6:	4b48      	ldr	r3, [pc, #288]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002ce8:	2280      	movs	r2, #128	; 0x80
 8002cea:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002cec:	4b46      	ldr	r3, [pc, #280]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002cf2:	4b45      	ldr	r3, [pc, #276]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8002cf8:	4b43      	ldr	r3, [pc, #268]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8002cfe:	4b42      	ldr	r3, [pc, #264]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002d00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d04:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002d06:	4b40      	ldr	r3, [pc, #256]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8002d0c:	4b3e      	ldr	r3, [pc, #248]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002d0e:	2240      	movs	r2, #64	; 0x40
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8002d12:	4b3d      	ldr	r3, [pc, #244]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002d14:	2220      	movs	r2, #32
 8002d16:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002d18:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002d1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d1e:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002d20:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002d26:	4b38      	ldr	r3, [pc, #224]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002d28:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002d2c:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8002d2e:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002d34:	4b34      	ldr	r3, [pc, #208]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8002d3a:	4b33      	ldr	r3, [pc, #204]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8002d40:	4a31      	ldr	r2, [pc, #196]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8002d46:	4830      	ldr	r0, [pc, #192]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002d48:	f007 fa5a 	bl	800a200 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002d4c:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <SAIx_In_Init+0x164>)
 8002d4e:	4a31      	ldr	r2, [pc, #196]	; (8002e14 <SAIx_In_Init+0x168>)
 8002d50:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002d52:	4b2f      	ldr	r3, [pc, #188]	; (8002e10 <SAIx_In_Init+0x164>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <SAIx_In_Init+0x164>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d60:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8002d62:	4a2b      	ldr	r2, [pc, #172]	; (8002e10 <SAIx_In_Init+0x164>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8002d68:	4b29      	ldr	r3, [pc, #164]	; (8002e10 <SAIx_In_Init+0x164>)
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8002d6e:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <SAIx_In_Init+0x164>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8002d74:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <SAIx_In_Init+0x164>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8002d7a:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <SAIx_In_Init+0x164>)
 8002d7c:	2280      	movs	r2, #128	; 0x80
 8002d7e:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002d80:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <SAIx_In_Init+0x164>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002d86:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <SAIx_In_Init+0x164>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8002d8c:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <SAIx_In_Init+0x164>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8002d92:	4b1f      	ldr	r3, [pc, #124]	; (8002e10 <SAIx_In_Init+0x164>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002d98:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <SAIx_In_Init+0x164>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8002d9e:	4b1c      	ldr	r3, [pc, #112]	; (8002e10 <SAIx_In_Init+0x164>)
 8002da0:	2240      	movs	r2, #64	; 0x40
 8002da2:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8002da4:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <SAIx_In_Init+0x164>)
 8002da6:	2220      	movs	r2, #32
 8002da8:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002daa:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <SAIx_In_Init+0x164>)
 8002dac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002db0:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002db2:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <SAIx_In_Init+0x164>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002db8:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <SAIx_In_Init+0x164>)
 8002dba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002dbe:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8002dc0:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <SAIx_In_Init+0x164>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <SAIx_In_Init+0x164>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8002dcc:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <SAIx_In_Init+0x164>)
 8002dce:	2204      	movs	r2, #4
 8002dd0:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8002dd2:	4a0f      	ldr	r2, [pc, #60]	; (8002e10 <SAIx_In_Init+0x164>)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8002dd8:	480d      	ldr	r0, [pc, #52]	; (8002e10 <SAIx_In_Init+0x164>)
 8002dda:	f007 fa11 	bl	800a200 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <SAIx_In_Init+0x15c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002dec:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8002dee:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <SAIx_In_Init+0x164>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <SAIx_In_Init+0x164>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002dfc:	601a      	str	r2, [r3, #0]
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200005ec 	.word	0x200005ec
 8002e0c:	40015c04 	.word	0x40015c04
 8002e10:	20000670 	.word	0x20000670
 8002e14:	40015c24 	.word	0x40015c24

08002e18 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002e1c:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <SAIx_In_DeInit+0x24>)
 8002e1e:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <SAIx_In_DeInit+0x28>)
 8002e20:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002e22:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <SAIx_In_DeInit+0x24>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <SAIx_In_DeInit+0x24>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e30:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8002e32:	4802      	ldr	r0, [pc, #8]	; (8002e3c <SAIx_In_DeInit+0x24>)
 8002e34:	f007 fb62 	bl	800a4fc <HAL_SAI_DeInit>
}
 8002e38:	bf00      	nop
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	20000670 	.word	0x20000670
 8002e40:	40015c24 	.word	0x40015c24

08002e44 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002e48:	4b31      	ldr	r3, [pc, #196]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002e4a:	2228      	movs	r2, #40	; 0x28
 8002e4c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002e4e:	4b30      	ldr	r3, [pc, #192]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002e50:	2209      	movs	r2, #9
 8002e52:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002e54:	4b2e      	ldr	r3, [pc, #184]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002e56:	2235      	movs	r2, #53	; 0x35
 8002e58:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002e5a:	4b2d      	ldr	r3, [pc, #180]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002e5c:	220b      	movs	r2, #11
 8002e5e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002e60:	4b2b      	ldr	r3, [pc, #172]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002e62:	f240 121b 	movw	r2, #283	; 0x11b
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002e68:	4b29      	ldr	r3, [pc, #164]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002e6a:	f240 2215 	movw	r2, #533	; 0x215
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002e70:	4b27      	ldr	r3, [pc, #156]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002e72:	f240 121d 	movw	r2, #285	; 0x11d
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002e78:	4b25      	ldr	r3, [pc, #148]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002e7a:	f240 2235 	movw	r2, #565	; 0x235
 8002e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002e80:	2100      	movs	r1, #0
 8002e82:	4823      	ldr	r0, [pc, #140]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002e84:	f000 fab2 	bl	80033ec <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002e88:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002e8a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002e8e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002e90:	4b1f      	ldr	r3, [pc, #124]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002e92:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002e96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002ea8:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002eb0:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002eb6:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002ebc:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002ec2:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002ec8:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002eca:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <BSP_LCD_Init+0xd0>)
 8002ecc:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002ece:	4810      	ldr	r0, [pc, #64]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002ed0:	f005 f89c 	bl	800800c <HAL_LTDC_GetState>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d103      	bne.n	8002ee2 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002eda:	2100      	movs	r1, #0
 8002edc:	480c      	ldr	r0, [pc, #48]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002ede:	f000 f9ab 	bl	8003238 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002ee2:	480b      	ldr	r0, [pc, #44]	; (8002f10 <BSP_LCD_Init+0xcc>)
 8002ee4:	f004 fec2 	bl	8007c6c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002eee:	480a      	ldr	r0, [pc, #40]	; (8002f18 <BSP_LCD_Init+0xd4>)
 8002ef0:	f004 f874 	bl	8006fdc <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	2108      	movs	r1, #8
 8002ef8:	4808      	ldr	r0, [pc, #32]	; (8002f1c <BSP_LCD_Init+0xd8>)
 8002efa:	f004 f86f 	bl	8006fdc <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002efe:	f000 fadd 	bl	80034bc <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002f02:	4807      	ldr	r0, [pc, #28]	; (8002f20 <BSP_LCD_Init+0xdc>)
 8002f04:	f000 f8be 	bl	8003084 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	200007b4 	.word	0x200007b4
 8002f14:	40016800 	.word	0x40016800
 8002f18:	40022000 	.word	0x40022000
 8002f1c:	40022800 	.word	0x40022800
 8002f20:	2000002c 	.word	0x2000002c

08002f24 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <BSP_LCD_GetXSize+0x20>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a06      	ldr	r2, [pc, #24]	; (8002f48 <BSP_LCD_GetXSize+0x24>)
 8002f2e:	2134      	movs	r1, #52	; 0x34
 8002f30:	fb01 f303 	mul.w	r3, r1, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	3360      	adds	r3, #96	; 0x60
 8002f38:	681b      	ldr	r3, [r3, #0]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	2000089c 	.word	0x2000089c
 8002f48:	200007b4 	.word	0x200007b4

08002f4c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <BSP_LCD_GetYSize+0x20>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a06      	ldr	r2, [pc, #24]	; (8002f70 <BSP_LCD_GetYSize+0x24>)
 8002f56:	2134      	movs	r1, #52	; 0x34
 8002f58:	fb01 f303 	mul.w	r3, r1, r3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3364      	adds	r3, #100	; 0x64
 8002f60:	681b      	ldr	r3, [r3, #0]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	2000089c 	.word	0x2000089c
 8002f70:	200007b4 	.word	0x200007b4

08002f74 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b090      	sub	sp, #64	; 0x40
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	6039      	str	r1, [r7, #0]
 8002f7e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002f84:	f7ff ffce 	bl	8002f24 <BSP_LCD_GetXSize>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002f90:	f7ff ffdc 	bl	8002f4c <BSP_LCD_GetYSize>
 8002f94:	4603      	mov	r3, r0
 8002f96:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002fa0:	23ff      	movs	r3, #255	; 0xff
 8002fa2:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002fba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002fc0:	2307      	movs	r3, #7
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002fc4:	f7ff ffae 	bl	8002f24 <BSP_LCD_GetXSize>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002fcc:	f7ff ffbe 	bl	8002f4c <BSP_LCD_GetYSize>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002fd4:	88fa      	ldrh	r2, [r7, #6]
 8002fd6:	f107 030c 	add.w	r3, r7, #12
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4812      	ldr	r0, [pc, #72]	; (8003028 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002fde:	f004 ffd7 	bl	8007f90 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	4911      	ldr	r1, [pc, #68]	; (800302c <BSP_LCD_LayerDefaultInit+0xb8>)
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002ff8:	88fa      	ldrh	r2, [r7, #6]
 8002ffa:	490c      	ldr	r1, [pc, #48]	; (800302c <BSP_LCD_LayerDefaultInit+0xb8>)
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	3308      	adds	r3, #8
 8003008:	4a09      	ldr	r2, [pc, #36]	; (8003030 <BSP_LCD_LayerDefaultInit+0xbc>)
 800300a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	4907      	ldr	r1, [pc, #28]	; (800302c <BSP_LCD_LayerDefaultInit+0xb8>)
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800301e:	601a      	str	r2, [r3, #0]
}
 8003020:	bf00      	nop
 8003022:	3740      	adds	r7, #64	; 0x40
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	200007b4 	.word	0x200007b4
 800302c:	200008a0 	.word	0x200008a0
 8003030:	2000002c 	.word	0x2000002c

08003034 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800303c:	4a04      	ldr	r2, [pc, #16]	; (8003050 <BSP_LCD_SelectLayer+0x1c>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6013      	str	r3, [r2, #0]
} 
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	2000089c 	.word	0x2000089c

08003054 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800305c:	4b07      	ldr	r3, [pc, #28]	; (800307c <BSP_LCD_SetTextColor+0x28>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4907      	ldr	r1, [pc, #28]	; (8003080 <BSP_LCD_SetTextColor+0x2c>)
 8003062:	4613      	mov	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	601a      	str	r2, [r3, #0]
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	2000089c 	.word	0x2000089c
 8003080:	200008a0 	.word	0x200008a0

08003084 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <BSP_LCD_SetFont+0x2c>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4908      	ldr	r1, [pc, #32]	; (80030b4 <BSP_LCD_SetFont+0x30>)
 8003092:	4613      	mov	r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	3308      	adds	r3, #8
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	601a      	str	r2, [r3, #0]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	2000089c 	.word	0x2000089c
 80030b4:	200008a0 	.word	0x200008a0

080030b8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80030b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af02      	add	r7, sp, #8
 80030be:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80030c0:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <BSP_LCD_Clear+0x48>)
 80030c2:	681c      	ldr	r4, [r3, #0]
 80030c4:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <BSP_LCD_Clear+0x48>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a0e      	ldr	r2, [pc, #56]	; (8003104 <BSP_LCD_Clear+0x4c>)
 80030ca:	2134      	movs	r1, #52	; 0x34
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	335c      	adds	r3, #92	; 0x5c
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	461e      	mov	r6, r3
 80030d8:	f7ff ff24 	bl	8002f24 <BSP_LCD_GetXSize>
 80030dc:	4605      	mov	r5, r0
 80030de:	f7ff ff35 	bl	8002f4c <BSP_LCD_GetYSize>
 80030e2:	4602      	mov	r2, r0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	9301      	str	r3, [sp, #4]
 80030e8:	2300      	movs	r3, #0
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	462a      	mov	r2, r5
 80030f0:	4631      	mov	r1, r6
 80030f2:	4620      	mov	r0, r4
 80030f4:	f000 f996 	bl	8003424 <LL_FillBuffer>
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003100:	2000089c 	.word	0x2000089c
 8003104:	200007b4 	.word	0x200007b4

08003108 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af02      	add	r7, sp, #8
 8003110:	4604      	mov	r4, r0
 8003112:	4608      	mov	r0, r1
 8003114:	4611      	mov	r1, r2
 8003116:	461a      	mov	r2, r3
 8003118:	4623      	mov	r3, r4
 800311a:	80fb      	strh	r3, [r7, #6]
 800311c:	4603      	mov	r3, r0
 800311e:	80bb      	strh	r3, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	807b      	strh	r3, [r7, #2]
 8003124:	4613      	mov	r3, r2
 8003126:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800312c:	4b30      	ldr	r3, [pc, #192]	; (80031f0 <BSP_LCD_FillRect+0xe8>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4930      	ldr	r1, [pc, #192]	; (80031f4 <BSP_LCD_FillRect+0xec>)
 8003132:	4613      	mov	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff ff88 	bl	8003054 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003144:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <BSP_LCD_FillRect+0xe8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a2b      	ldr	r2, [pc, #172]	; (80031f8 <BSP_LCD_FillRect+0xf0>)
 800314a:	2134      	movs	r1, #52	; 0x34
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	4413      	add	r3, r2
 8003152:	3348      	adds	r3, #72	; 0x48
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d114      	bne.n	8003184 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800315a:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <BSP_LCD_FillRect+0xe8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <BSP_LCD_FillRect+0xf0>)
 8003160:	2134      	movs	r1, #52	; 0x34
 8003162:	fb01 f303 	mul.w	r3, r1, r3
 8003166:	4413      	add	r3, r2
 8003168:	335c      	adds	r3, #92	; 0x5c
 800316a:	681c      	ldr	r4, [r3, #0]
 800316c:	f7ff feda 	bl	8002f24 <BSP_LCD_GetXSize>
 8003170:	4602      	mov	r2, r0
 8003172:	88bb      	ldrh	r3, [r7, #4]
 8003174:	fb03 f202 	mul.w	r2, r3, r2
 8003178:	88fb      	ldrh	r3, [r7, #6]
 800317a:	4413      	add	r3, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4423      	add	r3, r4
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	e013      	b.n	80031ac <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003184:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <BSP_LCD_FillRect+0xe8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a1b      	ldr	r2, [pc, #108]	; (80031f8 <BSP_LCD_FillRect+0xf0>)
 800318a:	2134      	movs	r1, #52	; 0x34
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	335c      	adds	r3, #92	; 0x5c
 8003194:	681c      	ldr	r4, [r3, #0]
 8003196:	f7ff fec5 	bl	8002f24 <BSP_LCD_GetXSize>
 800319a:	4602      	mov	r2, r0
 800319c:	88bb      	ldrh	r3, [r7, #4]
 800319e:	fb03 f202 	mul.w	r2, r3, r2
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4423      	add	r3, r4
 80031aa:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80031ac:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <BSP_LCD_FillRect+0xe8>)
 80031ae:	681c      	ldr	r4, [r3, #0]
 80031b0:	68fd      	ldr	r5, [r7, #12]
 80031b2:	887e      	ldrh	r6, [r7, #2]
 80031b4:	f8b7 8000 	ldrh.w	r8, [r7]
 80031b8:	f7ff feb4 	bl	8002f24 <BSP_LCD_GetXSize>
 80031bc:	4602      	mov	r2, r0
 80031be:	887b      	ldrh	r3, [r7, #2]
 80031c0:	1ad1      	subs	r1, r2, r3
 80031c2:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <BSP_LCD_FillRect+0xe8>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	480b      	ldr	r0, [pc, #44]	; (80031f4 <BSP_LCD_FillRect+0xec>)
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4403      	add	r3, r0
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	9100      	str	r1, [sp, #0]
 80031d8:	4643      	mov	r3, r8
 80031da:	4632      	mov	r2, r6
 80031dc:	4629      	mov	r1, r5
 80031de:	4620      	mov	r0, r4
 80031e0:	f000 f920 	bl	8003424 <LL_FillBuffer>
}
 80031e4:	bf00      	nop
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031ee:	bf00      	nop
 80031f0:	2000089c 	.word	0x2000089c
 80031f4:	200008a0 	.word	0x200008a0
 80031f8:	200007b4 	.word	0x200007b4

080031fc <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003200:	4b0a      	ldr	r3, [pc, #40]	; (800322c <BSP_LCD_DisplayOn+0x30>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <BSP_LCD_DisplayOn+0x30>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003210:	2201      	movs	r2, #1
 8003212:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003216:	4806      	ldr	r0, [pc, #24]	; (8003230 <BSP_LCD_DisplayOn+0x34>)
 8003218:	f003 fee0 	bl	8006fdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800321c:	2201      	movs	r2, #1
 800321e:	2108      	movs	r1, #8
 8003220:	4804      	ldr	r0, [pc, #16]	; (8003234 <BSP_LCD_DisplayOn+0x38>)
 8003222:	f003 fedb 	bl	8006fdc <HAL_GPIO_WritePin>
}
 8003226:	bf00      	nop
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	200007b4 	.word	0x200007b4
 8003230:	40022000 	.word	0x40022000
 8003234:	40022800 	.word	0x40022800

08003238 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b090      	sub	sp, #64	; 0x40
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003242:	4b64      	ldr	r3, [pc, #400]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 8003244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003246:	4a63      	ldr	r2, [pc, #396]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 8003248:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800324c:	6453      	str	r3, [r2, #68]	; 0x44
 800324e:	4b61      	ldr	r3, [pc, #388]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003256:	62bb      	str	r3, [r7, #40]	; 0x28
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800325a:	4b5e      	ldr	r3, [pc, #376]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a5d      	ldr	r2, [pc, #372]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 8003260:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b5b      	ldr	r3, [pc, #364]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003272:	4b58      	ldr	r3, [pc, #352]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	4a57      	ldr	r2, [pc, #348]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 8003278:	f043 0310 	orr.w	r3, r3, #16
 800327c:	6313      	str	r3, [r2, #48]	; 0x30
 800327e:	4b55      	ldr	r3, [pc, #340]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	623b      	str	r3, [r7, #32]
 8003288:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800328a:	4b52      	ldr	r3, [pc, #328]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	4a51      	ldr	r2, [pc, #324]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 8003290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003294:	6313      	str	r3, [r2, #48]	; 0x30
 8003296:	4b4f      	ldr	r3, [pc, #316]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	61fb      	str	r3, [r7, #28]
 80032a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80032a2:	4b4c      	ldr	r3, [pc, #304]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	4a4b      	ldr	r2, [pc, #300]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 80032a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ac:	6313      	str	r3, [r2, #48]	; 0x30
 80032ae:	4b49      	ldr	r3, [pc, #292]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b6:	61bb      	str	r3, [r7, #24]
 80032b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80032ba:	4b46      	ldr	r3, [pc, #280]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	4a45      	ldr	r2, [pc, #276]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 80032c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032c4:	6313      	str	r3, [r2, #48]	; 0x30
 80032c6:	4b43      	ldr	r3, [pc, #268]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80032d2:	4b40      	ldr	r3, [pc, #256]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	4a3f      	ldr	r2, [pc, #252]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 80032d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032dc:	6313      	str	r3, [r2, #48]	; 0x30
 80032de:	4b3d      	ldr	r3, [pc, #244]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80032ea:	4b3a      	ldr	r3, [pc, #232]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	4a39      	ldr	r2, [pc, #228]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 80032f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f4:	6313      	str	r3, [r2, #48]	; 0x30
 80032f6:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003302:	4b34      	ldr	r3, [pc, #208]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	4a33      	ldr	r2, [pc, #204]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 8003308:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800330c:	6313      	str	r3, [r2, #48]	; 0x30
 800330e:	4b31      	ldr	r3, [pc, #196]	; (80033d4 <BSP_LCD_MspInit+0x19c>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800331a:	2310      	movs	r3, #16
 800331c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800331e:	2302      	movs	r3, #2
 8003320:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003322:	2300      	movs	r3, #0
 8003324:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003326:	2302      	movs	r3, #2
 8003328:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800332a:	230e      	movs	r3, #14
 800332c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800332e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003332:	4619      	mov	r1, r3
 8003334:	4828      	ldr	r0, [pc, #160]	; (80033d8 <BSP_LCD_MspInit+0x1a0>)
 8003336:	f003 fb99 	bl	8006a6c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800333a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003340:	2302      	movs	r3, #2
 8003342:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003344:	2309      	movs	r3, #9
 8003346:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800334c:	4619      	mov	r1, r3
 800334e:	4823      	ldr	r0, [pc, #140]	; (80033dc <BSP_LCD_MspInit+0x1a4>)
 8003350:	f003 fb8c 	bl	8006a6c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003354:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800335a:	2302      	movs	r3, #2
 800335c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800335e:	230e      	movs	r3, #14
 8003360:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003362:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003366:	4619      	mov	r1, r3
 8003368:	481d      	ldr	r0, [pc, #116]	; (80033e0 <BSP_LCD_MspInit+0x1a8>)
 800336a:	f003 fb7f 	bl	8006a6c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800336e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003374:	2302      	movs	r3, #2
 8003376:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003378:	230e      	movs	r3, #14
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800337c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003380:	4619      	mov	r1, r3
 8003382:	4818      	ldr	r0, [pc, #96]	; (80033e4 <BSP_LCD_MspInit+0x1ac>)
 8003384:	f003 fb72 	bl	8006a6c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003388:	23f7      	movs	r3, #247	; 0xf7
 800338a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800338c:	2302      	movs	r3, #2
 800338e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003390:	230e      	movs	r3, #14
 8003392:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003398:	4619      	mov	r1, r3
 800339a:	4813      	ldr	r0, [pc, #76]	; (80033e8 <BSP_LCD_MspInit+0x1b0>)
 800339c:	f003 fb66 	bl	8006a6c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80033a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80033a6:	2301      	movs	r3, #1
 80033a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80033aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033ae:	4619      	mov	r1, r3
 80033b0:	480b      	ldr	r0, [pc, #44]	; (80033e0 <BSP_LCD_MspInit+0x1a8>)
 80033b2:	f003 fb5b 	bl	8006a6c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80033b6:	2308      	movs	r3, #8
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80033ba:	2301      	movs	r3, #1
 80033bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80033be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033c2:	4619      	mov	r1, r3
 80033c4:	4808      	ldr	r0, [pc, #32]	; (80033e8 <BSP_LCD_MspInit+0x1b0>)
 80033c6:	f003 fb51 	bl	8006a6c <HAL_GPIO_Init>
}
 80033ca:	bf00      	nop
 80033cc:	3740      	adds	r7, #64	; 0x40
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40021800 	.word	0x40021800
 80033e0:	40022000 	.word	0x40022000
 80033e4:	40022400 	.word	0x40022400
 80033e8:	40022800 	.word	0x40022800

080033ec <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80033f6:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <BSP_LCD_ClockConfig+0x34>)
 80033f8:	2208      	movs	r2, #8
 80033fa:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80033fc:	4b08      	ldr	r3, [pc, #32]	; (8003420 <BSP_LCD_ClockConfig+0x34>)
 80033fe:	22c0      	movs	r2, #192	; 0xc0
 8003400:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003402:	4b07      	ldr	r3, [pc, #28]	; (8003420 <BSP_LCD_ClockConfig+0x34>)
 8003404:	2205      	movs	r2, #5
 8003406:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <BSP_LCD_ClockConfig+0x34>)
 800340a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003410:	4803      	ldr	r0, [pc, #12]	; (8003420 <BSP_LCD_ClockConfig+0x34>)
 8003412:	f005 fcab 	bl	8008d6c <HAL_RCCEx_PeriphCLKConfig>
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	200008b8 	.word	0x200008b8

08003424 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af02      	add	r7, sp, #8
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003432:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <LL_FillBuffer+0x88>)
 8003434:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003438:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <LL_FillBuffer+0x8c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1d      	ldr	r2, [pc, #116]	; (80034b4 <LL_FillBuffer+0x90>)
 8003440:	2134      	movs	r1, #52	; 0x34
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	3348      	adds	r3, #72	; 0x48
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d103      	bne.n	8003458 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003450:	4b16      	ldr	r3, [pc, #88]	; (80034ac <LL_FillBuffer+0x88>)
 8003452:	2202      	movs	r2, #2
 8003454:	609a      	str	r2, [r3, #8]
 8003456:	e002      	b.n	800345e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003458:	4b14      	ldr	r3, [pc, #80]	; (80034ac <LL_FillBuffer+0x88>)
 800345a:	2200      	movs	r2, #0
 800345c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800345e:	4a13      	ldr	r2, [pc, #76]	; (80034ac <LL_FillBuffer+0x88>)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003464:	4b11      	ldr	r3, [pc, #68]	; (80034ac <LL_FillBuffer+0x88>)
 8003466:	4a14      	ldr	r2, [pc, #80]	; (80034b8 <LL_FillBuffer+0x94>)
 8003468:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800346a:	4810      	ldr	r0, [pc, #64]	; (80034ac <LL_FillBuffer+0x88>)
 800346c:	f002 ff62 	bl	8006334 <HAL_DMA2D_Init>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d115      	bne.n	80034a2 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003476:	68f9      	ldr	r1, [r7, #12]
 8003478:	480c      	ldr	r0, [pc, #48]	; (80034ac <LL_FillBuffer+0x88>)
 800347a:	f003 f9c9 	bl	8006810 <HAL_DMA2D_ConfigLayer>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10e      	bne.n	80034a2 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69f9      	ldr	r1, [r7, #28]
 800348e:	4807      	ldr	r0, [pc, #28]	; (80034ac <LL_FillBuffer+0x88>)
 8003490:	f002 ff9a 	bl	80063c8 <HAL_DMA2D_Start>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d103      	bne.n	80034a2 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800349a:	210a      	movs	r1, #10
 800349c:	4803      	ldr	r0, [pc, #12]	; (80034ac <LL_FillBuffer+0x88>)
 800349e:	f002 ffbe 	bl	800641e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	2000085c 	.word	0x2000085c
 80034b0:	2000089c 	.word	0x2000089c
 80034b4:	200007b4 	.word	0x200007b4
 80034b8:	4002b000 	.word	0x4002b000

080034bc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80034c0:	4b29      	ldr	r3, [pc, #164]	; (8003568 <BSP_SDRAM_Init+0xac>)
 80034c2:	4a2a      	ldr	r2, [pc, #168]	; (800356c <BSP_SDRAM_Init+0xb0>)
 80034c4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80034c6:	4b2a      	ldr	r3, [pc, #168]	; (8003570 <BSP_SDRAM_Init+0xb4>)
 80034c8:	2202      	movs	r2, #2
 80034ca:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80034cc:	4b28      	ldr	r3, [pc, #160]	; (8003570 <BSP_SDRAM_Init+0xb4>)
 80034ce:	2207      	movs	r2, #7
 80034d0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80034d2:	4b27      	ldr	r3, [pc, #156]	; (8003570 <BSP_SDRAM_Init+0xb4>)
 80034d4:	2204      	movs	r2, #4
 80034d6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80034d8:	4b25      	ldr	r3, [pc, #148]	; (8003570 <BSP_SDRAM_Init+0xb4>)
 80034da:	2207      	movs	r2, #7
 80034dc:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80034de:	4b24      	ldr	r3, [pc, #144]	; (8003570 <BSP_SDRAM_Init+0xb4>)
 80034e0:	2202      	movs	r2, #2
 80034e2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80034e4:	4b22      	ldr	r3, [pc, #136]	; (8003570 <BSP_SDRAM_Init+0xb4>)
 80034e6:	2202      	movs	r2, #2
 80034e8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80034ea:	4b21      	ldr	r3, [pc, #132]	; (8003570 <BSP_SDRAM_Init+0xb4>)
 80034ec:	2202      	movs	r2, #2
 80034ee:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80034f0:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <BSP_SDRAM_Init+0xac>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80034f6:	4b1c      	ldr	r3, [pc, #112]	; (8003568 <BSP_SDRAM_Init+0xac>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80034fc:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <BSP_SDRAM_Init+0xac>)
 80034fe:	2204      	movs	r2, #4
 8003500:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003502:	4b19      	ldr	r3, [pc, #100]	; (8003568 <BSP_SDRAM_Init+0xac>)
 8003504:	2210      	movs	r2, #16
 8003506:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003508:	4b17      	ldr	r3, [pc, #92]	; (8003568 <BSP_SDRAM_Init+0xac>)
 800350a:	2240      	movs	r2, #64	; 0x40
 800350c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800350e:	4b16      	ldr	r3, [pc, #88]	; (8003568 <BSP_SDRAM_Init+0xac>)
 8003510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003514:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003516:	4b14      	ldr	r3, [pc, #80]	; (8003568 <BSP_SDRAM_Init+0xac>)
 8003518:	2200      	movs	r2, #0
 800351a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800351c:	4b12      	ldr	r3, [pc, #72]	; (8003568 <BSP_SDRAM_Init+0xac>)
 800351e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003522:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003524:	4b10      	ldr	r3, [pc, #64]	; (8003568 <BSP_SDRAM_Init+0xac>)
 8003526:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800352a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800352c:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <BSP_SDRAM_Init+0xac>)
 800352e:	2200      	movs	r2, #0
 8003530:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003532:	2100      	movs	r1, #0
 8003534:	480c      	ldr	r0, [pc, #48]	; (8003568 <BSP_SDRAM_Init+0xac>)
 8003536:	f000 f87f 	bl	8003638 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800353a:	490d      	ldr	r1, [pc, #52]	; (8003570 <BSP_SDRAM_Init+0xb4>)
 800353c:	480a      	ldr	r0, [pc, #40]	; (8003568 <BSP_SDRAM_Init+0xac>)
 800353e:	f007 fdad 	bl	800b09c <HAL_SDRAM_Init>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003548:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <BSP_SDRAM_Init+0xb8>)
 800354a:	2201      	movs	r2, #1
 800354c:	701a      	strb	r2, [r3, #0]
 800354e:	e002      	b.n	8003556 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003550:	4b08      	ldr	r3, [pc, #32]	; (8003574 <BSP_SDRAM_Init+0xb8>)
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003556:	f240 6003 	movw	r0, #1539	; 0x603
 800355a:	f000 f80d 	bl	8003578 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800355e:	4b05      	ldr	r3, [pc, #20]	; (8003574 <BSP_SDRAM_Init+0xb8>)
 8003560:	781b      	ldrb	r3, [r3, #0]
}
 8003562:	4618      	mov	r0, r3
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	2000093c 	.word	0x2000093c
 800356c:	a0000140 	.word	0xa0000140
 8003570:	20000970 	.word	0x20000970
 8003574:	2000003c 	.word	0x2000003c

08003578 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003584:	4b2a      	ldr	r3, [pc, #168]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800358a:	4b29      	ldr	r3, [pc, #164]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800358c:	2210      	movs	r2, #16
 800358e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003590:	4b27      	ldr	r3, [pc, #156]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003592:	2201      	movs	r2, #1
 8003594:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003596:	4b26      	ldr	r3, [pc, #152]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003598:	2200      	movs	r2, #0
 800359a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800359c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035a0:	4923      	ldr	r1, [pc, #140]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035a2:	4824      	ldr	r0, [pc, #144]	; (8003634 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80035a4:	f007 fdae 	bl	800b104 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80035a8:	2001      	movs	r0, #1
 80035aa:	f002 f8b5 	bl	8005718 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80035ae:	4b20      	ldr	r3, [pc, #128]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035b0:	2202      	movs	r2, #2
 80035b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80035b4:	4b1e      	ldr	r3, [pc, #120]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035b6:	2210      	movs	r2, #16
 80035b8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80035ba:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035bc:	2201      	movs	r2, #1
 80035be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80035c0:	4b1b      	ldr	r3, [pc, #108]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80035c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035ca:	4919      	ldr	r1, [pc, #100]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035cc:	4819      	ldr	r0, [pc, #100]	; (8003634 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80035ce:	f007 fd99 	bl	800b104 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80035d2:	4b17      	ldr	r3, [pc, #92]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035d4:	2203      	movs	r2, #3
 80035d6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80035d8:	4b15      	ldr	r3, [pc, #84]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035da:	2210      	movs	r2, #16
 80035dc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80035de:	4b14      	ldr	r3, [pc, #80]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035e0:	2208      	movs	r2, #8
 80035e2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80035e4:	4b12      	ldr	r3, [pc, #72]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80035ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035ee:	4910      	ldr	r1, [pc, #64]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035f0:	4810      	ldr	r0, [pc, #64]	; (8003634 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80035f2:	f007 fd87 	bl	800b104 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80035f6:	f44f 7308 	mov.w	r3, #544	; 0x220
 80035fa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80035fc:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035fe:	2204      	movs	r2, #4
 8003600:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003602:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003604:	2210      	movs	r2, #16
 8003606:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003608:	4b09      	ldr	r3, [pc, #36]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800360a:	2201      	movs	r2, #1
 800360c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4a07      	ldr	r2, [pc, #28]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003612:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003618:	4905      	ldr	r1, [pc, #20]	; (8003630 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800361a:	4806      	ldr	r0, [pc, #24]	; (8003634 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800361c:	f007 fd72 	bl	800b104 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4804      	ldr	r0, [pc, #16]	; (8003634 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003624:	f007 fda3 	bl	800b16e <HAL_SDRAM_ProgramRefreshRate>
}
 8003628:	bf00      	nop
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	2000098c 	.word	0x2000098c
 8003634:	2000093c 	.word	0x2000093c

08003638 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003638:	b580      	push	{r7, lr}
 800363a:	b090      	sub	sp, #64	; 0x40
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003642:	4b70      	ldr	r3, [pc, #448]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	4a6f      	ldr	r2, [pc, #444]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6393      	str	r3, [r2, #56]	; 0x38
 800364e:	4b6d      	ldr	r3, [pc, #436]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	62bb      	str	r3, [r7, #40]	; 0x28
 8003658:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800365a:	4b6a      	ldr	r3, [pc, #424]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	4a69      	ldr	r2, [pc, #420]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 8003660:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003664:	6313      	str	r3, [r2, #48]	; 0x30
 8003666:	4b67      	ldr	r3, [pc, #412]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003672:	4b64      	ldr	r3, [pc, #400]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	4a63      	ldr	r2, [pc, #396]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 8003678:	f043 0304 	orr.w	r3, r3, #4
 800367c:	6313      	str	r3, [r2, #48]	; 0x30
 800367e:	4b61      	ldr	r3, [pc, #388]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	623b      	str	r3, [r7, #32]
 8003688:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800368a:	4b5e      	ldr	r3, [pc, #376]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	4a5d      	ldr	r2, [pc, #372]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 8003690:	f043 0308 	orr.w	r3, r3, #8
 8003694:	6313      	str	r3, [r2, #48]	; 0x30
 8003696:	4b5b      	ldr	r3, [pc, #364]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	61fb      	str	r3, [r7, #28]
 80036a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80036a2:	4b58      	ldr	r3, [pc, #352]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	4a57      	ldr	r2, [pc, #348]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 80036a8:	f043 0310 	orr.w	r3, r3, #16
 80036ac:	6313      	str	r3, [r2, #48]	; 0x30
 80036ae:	4b55      	ldr	r3, [pc, #340]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80036ba:	4b52      	ldr	r3, [pc, #328]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	4a51      	ldr	r2, [pc, #324]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 80036c0:	f043 0320 	orr.w	r3, r3, #32
 80036c4:	6313      	str	r3, [r2, #48]	; 0x30
 80036c6:	4b4f      	ldr	r3, [pc, #316]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80036d2:	4b4c      	ldr	r3, [pc, #304]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	4a4b      	ldr	r2, [pc, #300]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 80036d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036dc:	6313      	str	r3, [r2, #48]	; 0x30
 80036de:	4b49      	ldr	r3, [pc, #292]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80036ea:	4b46      	ldr	r3, [pc, #280]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	4a45      	ldr	r2, [pc, #276]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 80036f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f4:	6313      	str	r3, [r2, #48]	; 0x30
 80036f6:	4b43      	ldr	r3, [pc, #268]	; (8003804 <BSP_SDRAM_MspInit+0x1cc>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003702:	2302      	movs	r3, #2
 8003704:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003706:	2301      	movs	r3, #1
 8003708:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800370a:	2302      	movs	r3, #2
 800370c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800370e:	230c      	movs	r3, #12
 8003710:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003712:	2308      	movs	r3, #8
 8003714:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800371a:	4619      	mov	r1, r3
 800371c:	483a      	ldr	r0, [pc, #232]	; (8003808 <BSP_SDRAM_MspInit+0x1d0>)
 800371e:	f003 f9a5 	bl	8006a6c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003722:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003726:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800372c:	4619      	mov	r1, r3
 800372e:	4837      	ldr	r0, [pc, #220]	; (800380c <BSP_SDRAM_MspInit+0x1d4>)
 8003730:	f003 f99c 	bl	8006a6c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003734:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003738:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800373a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800373e:	4619      	mov	r1, r3
 8003740:	4833      	ldr	r0, [pc, #204]	; (8003810 <BSP_SDRAM_MspInit+0x1d8>)
 8003742:	f003 f993 	bl	8006a6c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003746:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800374c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003750:	4619      	mov	r1, r3
 8003752:	4830      	ldr	r0, [pc, #192]	; (8003814 <BSP_SDRAM_MspInit+0x1dc>)
 8003754:	f003 f98a 	bl	8006a6c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003758:	f248 1333 	movw	r3, #33075	; 0x8133
 800375c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800375e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003762:	4619      	mov	r1, r3
 8003764:	482c      	ldr	r0, [pc, #176]	; (8003818 <BSP_SDRAM_MspInit+0x1e0>)
 8003766:	f003 f981 	bl	8006a6c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800376a:	2328      	movs	r3, #40	; 0x28
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800376e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003772:	4619      	mov	r1, r3
 8003774:	4829      	ldr	r0, [pc, #164]	; (800381c <BSP_SDRAM_MspInit+0x1e4>)
 8003776:	f003 f979 	bl	8006a6c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800377a:	4b29      	ldr	r3, [pc, #164]	; (8003820 <BSP_SDRAM_MspInit+0x1e8>)
 800377c:	2200      	movs	r2, #0
 800377e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003780:	4b27      	ldr	r3, [pc, #156]	; (8003820 <BSP_SDRAM_MspInit+0x1e8>)
 8003782:	2280      	movs	r2, #128	; 0x80
 8003784:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003786:	4b26      	ldr	r3, [pc, #152]	; (8003820 <BSP_SDRAM_MspInit+0x1e8>)
 8003788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800378c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800378e:	4b24      	ldr	r3, [pc, #144]	; (8003820 <BSP_SDRAM_MspInit+0x1e8>)
 8003790:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003794:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003796:	4b22      	ldr	r3, [pc, #136]	; (8003820 <BSP_SDRAM_MspInit+0x1e8>)
 8003798:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800379c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800379e:	4b20      	ldr	r3, [pc, #128]	; (8003820 <BSP_SDRAM_MspInit+0x1e8>)
 80037a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037a4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80037a6:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <BSP_SDRAM_MspInit+0x1e8>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80037ac:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <BSP_SDRAM_MspInit+0x1e8>)
 80037ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037b2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80037b4:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <BSP_SDRAM_MspInit+0x1e8>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80037ba:	4b19      	ldr	r3, [pc, #100]	; (8003820 <BSP_SDRAM_MspInit+0x1e8>)
 80037bc:	2203      	movs	r2, #3
 80037be:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80037c0:	4b17      	ldr	r3, [pc, #92]	; (8003820 <BSP_SDRAM_MspInit+0x1e8>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80037c6:	4b16      	ldr	r3, [pc, #88]	; (8003820 <BSP_SDRAM_MspInit+0x1e8>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80037cc:	4b14      	ldr	r3, [pc, #80]	; (8003820 <BSP_SDRAM_MspInit+0x1e8>)
 80037ce:	4a15      	ldr	r2, [pc, #84]	; (8003824 <BSP_SDRAM_MspInit+0x1ec>)
 80037d0:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a12      	ldr	r2, [pc, #72]	; (8003820 <BSP_SDRAM_MspInit+0x1e8>)
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
 80037d8:	4a11      	ldr	r2, [pc, #68]	; (8003820 <BSP_SDRAM_MspInit+0x1e8>)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80037de:	4810      	ldr	r0, [pc, #64]	; (8003820 <BSP_SDRAM_MspInit+0x1e8>)
 80037e0:	f002 f9ee 	bl	8005bc0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80037e4:	480e      	ldr	r0, [pc, #56]	; (8003820 <BSP_SDRAM_MspInit+0x1e8>)
 80037e6:	f002 f93d 	bl	8005a64 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80037ea:	2200      	movs	r2, #0
 80037ec:	210f      	movs	r1, #15
 80037ee:	2038      	movs	r0, #56	; 0x38
 80037f0:	f002 f892 	bl	8005918 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80037f4:	2038      	movs	r0, #56	; 0x38
 80037f6:	f002 f8ab 	bl	8005950 <HAL_NVIC_EnableIRQ>
}
 80037fa:	bf00      	nop
 80037fc:	3740      	adds	r7, #64	; 0x40
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800
 8003808:	40020800 	.word	0x40020800
 800380c:	40020c00 	.word	0x40020c00
 8003810:	40021000 	.word	0x40021000
 8003814:	40021400 	.word	0x40021400
 8003818:	40021800 	.word	0x40021800
 800381c:	40021c00 	.word	0x40021c00
 8003820:	2000099c 	.word	0x2000099c
 8003824:	40026410 	.word	0x40026410

08003828 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	460a      	mov	r2, r1
 8003832:	80fb      	strh	r3, [r7, #6]
 8003834:	4613      	mov	r3, r2
 8003836:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800383c:	4a14      	ldr	r2, [pc, #80]	; (8003890 <BSP_TS_Init+0x68>)
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003842:	4a14      	ldr	r2, [pc, #80]	; (8003894 <BSP_TS_Init+0x6c>)
 8003844:	88bb      	ldrh	r3, [r7, #4]
 8003846:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003848:	4b13      	ldr	r3, [pc, #76]	; (8003898 <BSP_TS_Init+0x70>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2070      	movs	r0, #112	; 0x70
 800384e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003850:	4b11      	ldr	r3, [pc, #68]	; (8003898 <BSP_TS_Init+0x70>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2070      	movs	r0, #112	; 0x70
 8003856:	4798      	blx	r3
 8003858:	4603      	mov	r3, r0
 800385a:	2b51      	cmp	r3, #81	; 0x51
 800385c:	d111      	bne.n	8003882 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800385e:	4b0f      	ldr	r3, [pc, #60]	; (800389c <BSP_TS_Init+0x74>)
 8003860:	4a0d      	ldr	r2, [pc, #52]	; (8003898 <BSP_TS_Init+0x70>)
 8003862:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003864:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <BSP_TS_Init+0x78>)
 8003866:	2270      	movs	r2, #112	; 0x70
 8003868:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800386a:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <BSP_TS_Init+0x7c>)
 800386c:	2208      	movs	r2, #8
 800386e:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003870:	4b0a      	ldr	r3, [pc, #40]	; (800389c <BSP_TS_Init+0x74>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	4a0a      	ldr	r2, [pc, #40]	; (80038a0 <BSP_TS_Init+0x78>)
 8003878:	7812      	ldrb	r2, [r2, #0]
 800387a:	b292      	uxth	r2, r2
 800387c:	4610      	mov	r0, r2
 800387e:	4798      	blx	r3
 8003880:	e001      	b.n	8003886 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003882:	2303      	movs	r3, #3
 8003884:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003886:	7bfb      	ldrb	r3, [r7, #15]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20000a00 	.word	0x20000a00
 8003894:	20000a02 	.word	0x20000a02
 8003898:	20000000 	.word	0x20000000
 800389c:	200009fc 	.word	0x200009fc
 80038a0:	20000a05 	.word	0x20000a05
 80038a4:	20000a04 	.word	0x20000a04

080038a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80038ae:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <HAL_MspInit+0x4c>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	4a10      	ldr	r2, [pc, #64]	; (80038f4 <HAL_MspInit+0x4c>)
 80038b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b8:	6413      	str	r3, [r2, #64]	; 0x40
 80038ba:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <HAL_MspInit+0x4c>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c2:	607b      	str	r3, [r7, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c6:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <HAL_MspInit+0x4c>)
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	4a0a      	ldr	r2, [pc, #40]	; (80038f4 <HAL_MspInit+0x4c>)
 80038cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038d0:	6453      	str	r3, [r2, #68]	; 0x44
 80038d2:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <HAL_MspInit+0x4c>)
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80038de:	2200      	movs	r2, #0
 80038e0:	210f      	movs	r1, #15
 80038e2:	f06f 0001 	mvn.w	r0, #1
 80038e6:	f002 f817 	bl	8005918 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40023800 	.word	0x40023800

080038f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08e      	sub	sp, #56	; 0x38
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003908:	4b33      	ldr	r3, [pc, #204]	; (80039d8 <HAL_InitTick+0xe0>)
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	4a32      	ldr	r2, [pc, #200]	; (80039d8 <HAL_InitTick+0xe0>)
 800390e:	f043 0310 	orr.w	r3, r3, #16
 8003912:	6413      	str	r3, [r2, #64]	; 0x40
 8003914:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <HAL_InitTick+0xe0>)
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003920:	f107 0210 	add.w	r2, r7, #16
 8003924:	f107 0314 	add.w	r3, r7, #20
 8003928:	4611      	mov	r1, r2
 800392a:	4618      	mov	r0, r3
 800392c:	f005 f9ec 	bl	8008d08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d103      	bne.n	8003942 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800393a:	f005 f9d1 	bl	8008ce0 <HAL_RCC_GetPCLK1Freq>
 800393e:	6378      	str	r0, [r7, #52]	; 0x34
 8003940:	e004      	b.n	800394c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003942:	f005 f9cd 	bl	8008ce0 <HAL_RCC_GetPCLK1Freq>
 8003946:	4603      	mov	r3, r0
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800394c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394e:	4a23      	ldr	r2, [pc, #140]	; (80039dc <HAL_InitTick+0xe4>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	0c9b      	lsrs	r3, r3, #18
 8003956:	3b01      	subs	r3, #1
 8003958:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800395a:	4b21      	ldr	r3, [pc, #132]	; (80039e0 <HAL_InitTick+0xe8>)
 800395c:	4a21      	ldr	r2, [pc, #132]	; (80039e4 <HAL_InitTick+0xec>)
 800395e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003960:	4b1f      	ldr	r3, [pc, #124]	; (80039e0 <HAL_InitTick+0xe8>)
 8003962:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003966:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003968:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <HAL_InitTick+0xe8>)
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800396e:	4b1c      	ldr	r3, [pc, #112]	; (80039e0 <HAL_InitTick+0xe8>)
 8003970:	2200      	movs	r2, #0
 8003972:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003974:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <HAL_InitTick+0xe8>)
 8003976:	2200      	movs	r2, #0
 8003978:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800397a:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <HAL_InitTick+0xe8>)
 800397c:	2200      	movs	r2, #0
 800397e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003980:	4817      	ldr	r0, [pc, #92]	; (80039e0 <HAL_InitTick+0xe8>)
 8003982:	f007 fcc7 	bl	800b314 <HAL_TIM_Base_Init>
 8003986:	4603      	mov	r3, r0
 8003988:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800398c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003990:	2b00      	cmp	r3, #0
 8003992:	d11b      	bne.n	80039cc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003994:	4812      	ldr	r0, [pc, #72]	; (80039e0 <HAL_InitTick+0xe8>)
 8003996:	f007 fd15 	bl	800b3c4 <HAL_TIM_Base_Start_IT>
 800399a:	4603      	mov	r3, r0
 800399c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80039a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d111      	bne.n	80039cc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80039a8:	2036      	movs	r0, #54	; 0x36
 80039aa:	f001 ffd1 	bl	8005950 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b0f      	cmp	r3, #15
 80039b2:	d808      	bhi.n	80039c6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80039b4:	2200      	movs	r2, #0
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	2036      	movs	r0, #54	; 0x36
 80039ba:	f001 ffad 	bl	8005918 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039be:	4a0a      	ldr	r2, [pc, #40]	; (80039e8 <HAL_InitTick+0xf0>)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	e002      	b.n	80039cc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80039cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3738      	adds	r7, #56	; 0x38
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40023800 	.word	0x40023800
 80039dc:	431bde83 	.word	0x431bde83
 80039e0:	20000a08 	.word	0x20000a08
 80039e4:	40001000 	.word	0x40001000
 80039e8:	20000078 	.word	0x20000078

080039ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039f0:	e7fe      	b.n	80039f0 <NMI_Handler+0x4>

080039f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039f2:	b480      	push	{r7}
 80039f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039f6:	e7fe      	b.n	80039f6 <HardFault_Handler+0x4>

080039f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039fc:	e7fe      	b.n	80039fc <MemManage_Handler+0x4>

080039fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039fe:	b480      	push	{r7}
 8003a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a02:	e7fe      	b.n	8003a02 <BusFault_Handler+0x4>

08003a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a08:	e7fe      	b.n	8003a08 <UsageFault_Handler+0x4>

08003a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8003a1c:	4802      	ldr	r0, [pc, #8]	; (8003a28 <DMA1_Stream5_IRQHandler+0x10>)
 8003a1e:	f002 fa1f 	bl	8005e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000114 	.word	0x20000114

08003a2c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003a30:	4802      	ldr	r0, [pc, #8]	; (8003a3c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003a32:	f007 fd3f 	bl	800b4b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003a36:	bf00      	nop
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000bd4 	.word	0x20000bd4

08003a40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <TIM6_DAC_IRQHandler+0x20>)
 8003a46:	791b      	ldrb	r3, [r3, #4]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8003a4e:	4804      	ldr	r0, [pc, #16]	; (8003a60 <TIM6_DAC_IRQHandler+0x20>)
 8003a50:	f001 ff9a 	bl	8005988 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003a54:	4803      	ldr	r0, [pc, #12]	; (8003a64 <TIM6_DAC_IRQHandler+0x24>)
 8003a56:	f007 fd2d 	bl	800b4b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000100 	.word	0x20000100
 8003a64:	20000a08 	.word	0x20000a08

08003a68 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003a6c:	4802      	ldr	r0, [pc, #8]	; (8003a78 <TIM7_IRQHandler+0x10>)
 8003a6e:	f007 fd21 	bl	800b4b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000b88 	.word	0x20000b88

08003a7c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8003a80:	4802      	ldr	r0, [pc, #8]	; (8003a8c <DMA2_Stream4_IRQHandler+0x10>)
 8003a82:	f002 f9ed 	bl	8005e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	2000046c 	.word	0x2000046c

08003a90 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8003a94:	4802      	ldr	r0, [pc, #8]	; (8003aa0 <DMA2_Stream6_IRQHandler+0x10>)
 8003a96:	f002 f9e3 	bl	8005e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	200004cc 	.word	0x200004cc

08003aa4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003aa8:	4802      	ldr	r0, [pc, #8]	; (8003ab4 <LTDC_IRQHandler+0x10>)
 8003aaa:	f004 f9af 	bl	8007e0c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	2000029c 	.word	0x2000029c

08003ab8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003abc:	4802      	ldr	r0, [pc, #8]	; (8003ac8 <DMA2D_IRQHandler+0x10>)
 8003abe:	f002 fd97 	bl	80065f0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000174 	.word	0x20000174

08003acc <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 8003ad0:	4803      	ldr	r0, [pc, #12]	; (8003ae0 <SAI2_IRQHandler+0x14>)
 8003ad2:	f006 ff0b 	bl	800a8ec <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 8003ad6:	4803      	ldr	r0, [pc, #12]	; (8003ae4 <SAI2_IRQHandler+0x18>)
 8003ad8:	f006 ff08 	bl	800a8ec <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8003adc:	bf00      	nop
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20000364 	.word	0x20000364
 8003ae4:	200003e8 	.word	0x200003e8

08003ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003af0:	4a14      	ldr	r2, [pc, #80]	; (8003b44 <_sbrk+0x5c>)
 8003af2:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <_sbrk+0x60>)
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003afc:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <_sbrk+0x64>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d102      	bne.n	8003b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b04:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <_sbrk+0x64>)
 8003b06:	4a12      	ldr	r2, [pc, #72]	; (8003b50 <_sbrk+0x68>)
 8003b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b0a:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <_sbrk+0x64>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4413      	add	r3, r2
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d207      	bcs.n	8003b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b18:	f008 fbc2 	bl	800c2a0 <__errno>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	220c      	movs	r2, #12
 8003b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b22:	f04f 33ff 	mov.w	r3, #4294967295
 8003b26:	e009      	b.n	8003b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b28:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <_sbrk+0x64>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b2e:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <_sbrk+0x64>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4413      	add	r3, r2
 8003b36:	4a05      	ldr	r2, [pc, #20]	; (8003b4c <_sbrk+0x64>)
 8003b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20050000 	.word	0x20050000
 8003b48:	00000400 	.word	0x00000400
 8003b4c:	20000a54 	.word	0x20000a54
 8003b50:	20000cf0 	.word	0x20000cf0

08003b54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <SystemInit+0x20>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5e:	4a05      	ldr	r2, [pc, #20]	; (8003b74 <SystemInit+0x20>)
 8003b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	e000ed00 	.word	0xe000ed00

08003b78 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b7e:	f107 0310 	add.w	r3, r7, #16
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	605a      	str	r2, [r3, #4]
 8003b88:	609a      	str	r2, [r3, #8]
 8003b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b8c:	1d3b      	adds	r3, r7, #4
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
 8003b94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003b96:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <MX_TIM1_Init+0xa0>)
 8003b98:	4a20      	ldr	r2, [pc, #128]	; (8003c1c <MX_TIM1_Init+0xa4>)
 8003b9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003b9c:	4b1e      	ldr	r3, [pc, #120]	; (8003c18 <MX_TIM1_Init+0xa0>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba2:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <MX_TIM1_Init+0xa0>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003ba8:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <MX_TIM1_Init+0xa0>)
 8003baa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bb0:	4b19      	ldr	r3, [pc, #100]	; (8003c18 <MX_TIM1_Init+0xa0>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003bb6:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <MX_TIM1_Init+0xa0>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bbc:	4b16      	ldr	r3, [pc, #88]	; (8003c18 <MX_TIM1_Init+0xa0>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003bc2:	4815      	ldr	r0, [pc, #84]	; (8003c18 <MX_TIM1_Init+0xa0>)
 8003bc4:	f007 fba6 	bl	800b314 <HAL_TIM_Base_Init>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003bce:	f7fd ff61 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003bd8:	f107 0310 	add.w	r3, r7, #16
 8003bdc:	4619      	mov	r1, r3
 8003bde:	480e      	ldr	r0, [pc, #56]	; (8003c18 <MX_TIM1_Init+0xa0>)
 8003be0:	f007 fd88 	bl	800b6f4 <HAL_TIM_ConfigClockSource>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003bea:	f7fd ff53 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003bfa:	1d3b      	adds	r3, r7, #4
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4806      	ldr	r0, [pc, #24]	; (8003c18 <MX_TIM1_Init+0xa0>)
 8003c00:	f007 ffa4 	bl	800bb4c <HAL_TIMEx_MasterConfigSynchronization>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003c0a:	f7fd ff43 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003c0e:	bf00      	nop
 8003c10:	3720      	adds	r7, #32
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000a58 	.word	0x20000a58
 8003c1c:	40010000 	.word	0x40010000

08003c20 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c26:	f107 0310 	add.w	r3, r7, #16
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	605a      	str	r2, [r3, #4]
 8003c30:	609a      	str	r2, [r3, #8]
 8003c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c34:	1d3b      	adds	r3, r7, #4
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	605a      	str	r2, [r3, #4]
 8003c3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <MX_TIM2_Init+0x98>)
 8003c40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003c46:	4b1c      	ldr	r3, [pc, #112]	; (8003cb8 <MX_TIM2_Init+0x98>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c4c:	4b1a      	ldr	r3, [pc, #104]	; (8003cb8 <MX_TIM2_Init+0x98>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003c52:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <MX_TIM2_Init+0x98>)
 8003c54:	f04f 32ff 	mov.w	r2, #4294967295
 8003c58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c5a:	4b17      	ldr	r3, [pc, #92]	; (8003cb8 <MX_TIM2_Init+0x98>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c60:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <MX_TIM2_Init+0x98>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c66:	4814      	ldr	r0, [pc, #80]	; (8003cb8 <MX_TIM2_Init+0x98>)
 8003c68:	f007 fb54 	bl	800b314 <HAL_TIM_Base_Init>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003c72:	f7fd ff0f 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c7c:	f107 0310 	add.w	r3, r7, #16
 8003c80:	4619      	mov	r1, r3
 8003c82:	480d      	ldr	r0, [pc, #52]	; (8003cb8 <MX_TIM2_Init+0x98>)
 8003c84:	f007 fd36 	bl	800b6f4 <HAL_TIM_ConfigClockSource>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003c8e:	f7fd ff01 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c92:	2300      	movs	r3, #0
 8003c94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c9a:	1d3b      	adds	r3, r7, #4
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4806      	ldr	r0, [pc, #24]	; (8003cb8 <MX_TIM2_Init+0x98>)
 8003ca0:	f007 ff54 	bl	800bb4c <HAL_TIMEx_MasterConfigSynchronization>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003caa:	f7fd fef3 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003cae:	bf00      	nop
 8003cb0:	3720      	adds	r7, #32
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000aa4 	.word	0x20000aa4

08003cbc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cc2:	f107 0310 	add.w	r3, r7, #16
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	605a      	str	r2, [r3, #4]
 8003ccc:	609a      	str	r2, [r3, #8]
 8003cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cd0:	1d3b      	adds	r3, r7, #4
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	605a      	str	r2, [r3, #4]
 8003cd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <MX_TIM3_Init+0x94>)
 8003cdc:	4a1d      	ldr	r2, [pc, #116]	; (8003d54 <MX_TIM3_Init+0x98>)
 8003cde:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003ce0:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <MX_TIM3_Init+0x94>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ce6:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <MX_TIM3_Init+0x94>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003cec:	4b18      	ldr	r3, [pc, #96]	; (8003d50 <MX_TIM3_Init+0x94>)
 8003cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cf2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cf4:	4b16      	ldr	r3, [pc, #88]	; (8003d50 <MX_TIM3_Init+0x94>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cfa:	4b15      	ldr	r3, [pc, #84]	; (8003d50 <MX_TIM3_Init+0x94>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003d00:	4813      	ldr	r0, [pc, #76]	; (8003d50 <MX_TIM3_Init+0x94>)
 8003d02:	f007 fb07 	bl	800b314 <HAL_TIM_Base_Init>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003d0c:	f7fd fec2 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003d16:	f107 0310 	add.w	r3, r7, #16
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	480c      	ldr	r0, [pc, #48]	; (8003d50 <MX_TIM3_Init+0x94>)
 8003d1e:	f007 fce9 	bl	800b6f4 <HAL_TIM_ConfigClockSource>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003d28:	f7fd feb4 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d34:	1d3b      	adds	r3, r7, #4
 8003d36:	4619      	mov	r1, r3
 8003d38:	4805      	ldr	r0, [pc, #20]	; (8003d50 <MX_TIM3_Init+0x94>)
 8003d3a:	f007 ff07 	bl	800bb4c <HAL_TIMEx_MasterConfigSynchronization>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003d44:	f7fd fea6 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003d48:	bf00      	nop
 8003d4a:	3720      	adds	r7, #32
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20000af0 	.word	0x20000af0
 8003d54:	40000400 	.word	0x40000400

08003d58 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d5e:	f107 0310 	add.w	r3, r7, #16
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	605a      	str	r2, [r3, #4]
 8003d68:	609a      	str	r2, [r3, #8]
 8003d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d6c:	1d3b      	adds	r3, r7, #4
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	605a      	str	r2, [r3, #4]
 8003d74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003d76:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <MX_TIM5_Init+0x94>)
 8003d78:	4a1d      	ldr	r2, [pc, #116]	; (8003df0 <MX_TIM5_Init+0x98>)
 8003d7a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <MX_TIM5_Init+0x94>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d82:	4b1a      	ldr	r3, [pc, #104]	; (8003dec <MX_TIM5_Init+0x94>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003d88:	4b18      	ldr	r3, [pc, #96]	; (8003dec <MX_TIM5_Init+0x94>)
 8003d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d90:	4b16      	ldr	r3, [pc, #88]	; (8003dec <MX_TIM5_Init+0x94>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d96:	4b15      	ldr	r3, [pc, #84]	; (8003dec <MX_TIM5_Init+0x94>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003d9c:	4813      	ldr	r0, [pc, #76]	; (8003dec <MX_TIM5_Init+0x94>)
 8003d9e:	f007 fab9 	bl	800b314 <HAL_TIM_Base_Init>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003da8:	f7fd fe74 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003db0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003db2:	f107 0310 	add.w	r3, r7, #16
 8003db6:	4619      	mov	r1, r3
 8003db8:	480c      	ldr	r0, [pc, #48]	; (8003dec <MX_TIM5_Init+0x94>)
 8003dba:	f007 fc9b 	bl	800b6f4 <HAL_TIM_ConfigClockSource>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003dc4:	f7fd fe66 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003dd0:	1d3b      	adds	r3, r7, #4
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4805      	ldr	r0, [pc, #20]	; (8003dec <MX_TIM5_Init+0x94>)
 8003dd6:	f007 feb9 	bl	800bb4c <HAL_TIMEx_MasterConfigSynchronization>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003de0:	f7fd fe58 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003de4:	bf00      	nop
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20000b3c 	.word	0x20000b3c
 8003df0:	40000c00 	.word	0x40000c00

08003df4 <MX_TIM8_Init>:
  /* USER CODE END TIM7_Init 2 */

}
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dfa:	f107 0310 	add.w	r3, r7, #16
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	609a      	str	r2, [r3, #8]
 8003e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e08:	1d3b      	adds	r3, r7, #4
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	605a      	str	r2, [r3, #4]
 8003e10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003e12:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <MX_TIM8_Init+0xa0>)
 8003e14:	4a20      	ldr	r2, [pc, #128]	; (8003e98 <MX_TIM8_Init+0xa4>)
 8003e16:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003e18:	4b1e      	ldr	r3, [pc, #120]	; (8003e94 <MX_TIM8_Init+0xa0>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e1e:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <MX_TIM8_Init+0xa0>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003e24:	4b1b      	ldr	r3, [pc, #108]	; (8003e94 <MX_TIM8_Init+0xa0>)
 8003e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e2a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e2c:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <MX_TIM8_Init+0xa0>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003e32:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <MX_TIM8_Init+0xa0>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e38:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <MX_TIM8_Init+0xa0>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003e3e:	4815      	ldr	r0, [pc, #84]	; (8003e94 <MX_TIM8_Init+0xa0>)
 8003e40:	f007 fa68 	bl	800b314 <HAL_TIM_Base_Init>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8003e4a:	f7fd fe23 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003e54:	f107 0310 	add.w	r3, r7, #16
 8003e58:	4619      	mov	r1, r3
 8003e5a:	480e      	ldr	r0, [pc, #56]	; (8003e94 <MX_TIM8_Init+0xa0>)
 8003e5c:	f007 fc4a 	bl	800b6f4 <HAL_TIM_ConfigClockSource>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8003e66:	f7fd fe15 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003e76:	1d3b      	adds	r3, r7, #4
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4806      	ldr	r0, [pc, #24]	; (8003e94 <MX_TIM8_Init+0xa0>)
 8003e7c:	f007 fe66 	bl	800bb4c <HAL_TIMEx_MasterConfigSynchronization>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003e86:	f7fd fe05 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003e8a:	bf00      	nop
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000bd4 	.word	0x20000bd4
 8003e98:	40010400 	.word	0x40010400

08003e9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08e      	sub	sp, #56	; 0x38
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	605a      	str	r2, [r3, #4]
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	60da      	str	r2, [r3, #12]
 8003eb2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a4c      	ldr	r2, [pc, #304]	; (8003fec <HAL_TIM_Base_MspInit+0x150>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ebe:	4b4c      	ldr	r3, [pc, #304]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec2:	4a4b      	ldr	r2, [pc, #300]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eca:	4b49      	ldr	r3, [pc, #292]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	623b      	str	r3, [r7, #32]
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003ed6:	e084      	b.n	8003fe2 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM2)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee0:	d10c      	bne.n	8003efc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ee2:	4b43      	ldr	r3, [pc, #268]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	4a42      	ldr	r2, [pc, #264]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003ee8:	f043 0301 	orr.w	r3, r3, #1
 8003eec:	6413      	str	r3, [r2, #64]	; 0x40
 8003eee:	4b40      	ldr	r3, [pc, #256]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	61fb      	str	r3, [r7, #28]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
}
 8003efa:	e072      	b.n	8003fe2 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM3)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a3c      	ldr	r2, [pc, #240]	; (8003ff4 <HAL_TIM_Base_MspInit+0x158>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d10c      	bne.n	8003f20 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f06:	4b3a      	ldr	r3, [pc, #232]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	4a39      	ldr	r2, [pc, #228]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003f0c:	f043 0302 	orr.w	r3, r3, #2
 8003f10:	6413      	str	r3, [r2, #64]	; 0x40
 8003f12:	4b37      	ldr	r3, [pc, #220]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	61bb      	str	r3, [r7, #24]
 8003f1c:	69bb      	ldr	r3, [r7, #24]
}
 8003f1e:	e060      	b.n	8003fe2 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM5)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a34      	ldr	r2, [pc, #208]	; (8003ff8 <HAL_TIM_Base_MspInit+0x15c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d10c      	bne.n	8003f44 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f2a:	4b31      	ldr	r3, [pc, #196]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	4a30      	ldr	r2, [pc, #192]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003f30:	f043 0308 	orr.w	r3, r3, #8
 8003f34:	6413      	str	r3, [r2, #64]	; 0x40
 8003f36:	4b2e      	ldr	r3, [pc, #184]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	697b      	ldr	r3, [r7, #20]
}
 8003f42:	e04e      	b.n	8003fe2 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM7)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a2c      	ldr	r2, [pc, #176]	; (8003ffc <HAL_TIM_Base_MspInit+0x160>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d114      	bne.n	8003f78 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003f4e:	4b28      	ldr	r3, [pc, #160]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	4a27      	ldr	r2, [pc, #156]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003f54:	f043 0320 	orr.w	r3, r3, #32
 8003f58:	6413      	str	r3, [r2, #64]	; 0x40
 8003f5a:	4b25      	ldr	r3, [pc, #148]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003f66:	2200      	movs	r2, #0
 8003f68:	2105      	movs	r1, #5
 8003f6a:	2037      	movs	r0, #55	; 0x37
 8003f6c:	f001 fcd4 	bl	8005918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003f70:	2037      	movs	r0, #55	; 0x37
 8003f72:	f001 fced 	bl	8005950 <HAL_NVIC_EnableIRQ>
}
 8003f76:	e034      	b.n	8003fe2 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM8)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a20      	ldr	r2, [pc, #128]	; (8004000 <HAL_TIM_Base_MspInit+0x164>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d12f      	bne.n	8003fe2 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003f82:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	4a1a      	ldr	r2, [pc, #104]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003f88:	f043 0302 	orr.w	r3, r3, #2
 8003f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f8e:	4b18      	ldr	r3, [pc, #96]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003f9a:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	4a14      	ldr	r2, [pc, #80]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa6:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <HAL_TIM_Base_MspInit+0x154>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fca:	4619      	mov	r1, r3
 8003fcc:	480d      	ldr	r0, [pc, #52]	; (8004004 <HAL_TIM_Base_MspInit+0x168>)
 8003fce:	f002 fd4d 	bl	8006a6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2105      	movs	r1, #5
 8003fd6:	202c      	movs	r0, #44	; 0x2c
 8003fd8:	f001 fc9e 	bl	8005918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003fdc:	202c      	movs	r0, #44	; 0x2c
 8003fde:	f001 fcb7 	bl	8005950 <HAL_NVIC_EnableIRQ>
}
 8003fe2:	bf00      	nop
 8003fe4:	3738      	adds	r7, #56	; 0x38
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40010000 	.word	0x40010000
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000c00 	.word	0x40000c00
 8003ffc:	40001400 	.word	0x40001400
 8004000:	40010400 	.word	0x40010400
 8004004:	40022000 	.word	0x40022000

08004008 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af00      	add	r7, sp, #0
 800400e:	607b      	str	r3, [r7, #4]
 8004010:	4603      	mov	r3, r0
 8004012:	81fb      	strh	r3, [r7, #14]
 8004014:	460b      	mov	r3, r1
 8004016:	81bb      	strh	r3, [r7, #12]
 8004018:	4613      	mov	r3, r2
 800401a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 800401c:	2300      	movs	r3, #0
 800401e:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8004020:	89bb      	ldrh	r3, [r7, #12]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8004026:	89bb      	ldrh	r3, [r7, #12]
 8004028:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800402c:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 800402e:	2300      	movs	r3, #0
 8004030:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8004032:	f7fe f9ad 	bl	8002390 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8004036:	89fb      	ldrh	r3, [r7, #14]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2203      	movs	r2, #3
 800403c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004040:	4618      	mov	r0, r3
 8004042:	f001 fafb 	bl	800563c <CODEC_IO_Write>
 8004046:	4603      	mov	r3, r0
 8004048:	461a      	mov	r2, r3
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	4413      	add	r3, r2
 800404e:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8004050:	89fb      	ldrh	r3, [r7, #14]
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2200      	movs	r2, #0
 8004056:	f640 0117 	movw	r1, #2071	; 0x817
 800405a:	4618      	mov	r0, r3
 800405c:	f001 faee 	bl	800563c <CODEC_IO_Write>
 8004060:	4603      	mov	r3, r0
 8004062:	461a      	mov	r2, r3
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	4413      	add	r3, r2
 8004068:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 800406a:	89fb      	ldrh	r3, [r7, #14]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2200      	movs	r2, #0
 8004070:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004074:	4618      	mov	r0, r3
 8004076:	f001 fae1 	bl	800563c <CODEC_IO_Write>
 800407a:	4603      	mov	r3, r0
 800407c:	461a      	mov	r2, r3
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	4413      	add	r3, r2
 8004082:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8004084:	89fb      	ldrh	r3, [r7, #14]
 8004086:	b2db      	uxtb	r3, r3
 8004088:	226c      	movs	r2, #108	; 0x6c
 800408a:	2139      	movs	r1, #57	; 0x39
 800408c:	4618      	mov	r0, r3
 800408e:	f001 fad5 	bl	800563c <CODEC_IO_Write>
 8004092:	4603      	mov	r3, r0
 8004094:	461a      	mov	r2, r3
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	4413      	add	r3, r2
 800409a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 800409c:	8afb      	ldrh	r3, [r7, #22]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00c      	beq.n	80040bc <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80040a2:	89fb      	ldrh	r3, [r7, #14]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2213      	movs	r2, #19
 80040a8:	2101      	movs	r1, #1
 80040aa:	4618      	mov	r0, r3
 80040ac:	f001 fac6 	bl	800563c <CODEC_IO_Write>
 80040b0:	4603      	mov	r3, r0
 80040b2:	461a      	mov	r2, r3
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	4413      	add	r3, r2
 80040b8:	61fb      	str	r3, [r7, #28]
 80040ba:	e00b      	b.n	80040d4 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80040bc:	89fb      	ldrh	r3, [r7, #14]
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2203      	movs	r2, #3
 80040c2:	2101      	movs	r1, #1
 80040c4:	4618      	mov	r0, r3
 80040c6:	f001 fab9 	bl	800563c <CODEC_IO_Write>
 80040ca:	4603      	mov	r3, r0
 80040cc:	461a      	mov	r2, r3
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	4413      	add	r3, r2
 80040d2:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 80040d4:	2032      	movs	r0, #50	; 0x32
 80040d6:	f7fe f9c3 	bl	8002460 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 80040da:	8b3b      	ldrh	r3, [r7, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 815f 	beq.w	80043a0 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 80040e2:	4bae      	ldr	r3, [pc, #696]	; (800439c <wm8994_Init+0x394>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

    switch (output_device)
 80040e8:	8b3b      	ldrh	r3, [r7, #24]
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	f000 808c 	beq.w	8004208 <wm8994_Init+0x200>
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	f300 8111 	bgt.w	8004318 <wm8994_Init+0x310>
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d002      	beq.n	8004100 <wm8994_Init+0xf8>
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d042      	beq.n	8004184 <wm8994_Init+0x17c>
 80040fe:	e10b      	b.n	8004318 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8004100:	89fb      	ldrh	r3, [r7, #14]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	f640 420c 	movw	r2, #3084	; 0xc0c
 8004108:	2105      	movs	r1, #5
 800410a:	4618      	mov	r0, r3
 800410c:	f001 fa96 	bl	800563c <CODEC_IO_Write>
 8004110:	4603      	mov	r3, r0
 8004112:	461a      	mov	r2, r3
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	4413      	add	r3, r2
 8004118:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800411a:	89fb      	ldrh	r3, [r7, #14]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2200      	movs	r2, #0
 8004120:	f240 6101 	movw	r1, #1537	; 0x601
 8004124:	4618      	mov	r0, r3
 8004126:	f001 fa89 	bl	800563c <CODEC_IO_Write>
 800412a:	4603      	mov	r3, r0
 800412c:	461a      	mov	r2, r3
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	4413      	add	r3, r2
 8004132:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8004134:	89fb      	ldrh	r3, [r7, #14]
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2200      	movs	r2, #0
 800413a:	f240 6102 	movw	r1, #1538	; 0x602
 800413e:	4618      	mov	r0, r3
 8004140:	f001 fa7c 	bl	800563c <CODEC_IO_Write>
 8004144:	4603      	mov	r3, r0
 8004146:	461a      	mov	r2, r3
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	4413      	add	r3, r2
 800414c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800414e:	89fb      	ldrh	r3, [r7, #14]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2202      	movs	r2, #2
 8004154:	f240 6104 	movw	r1, #1540	; 0x604
 8004158:	4618      	mov	r0, r3
 800415a:	f001 fa6f 	bl	800563c <CODEC_IO_Write>
 800415e:	4603      	mov	r3, r0
 8004160:	461a      	mov	r2, r3
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	4413      	add	r3, r2
 8004166:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004168:	89fb      	ldrh	r3, [r7, #14]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2202      	movs	r2, #2
 800416e:	f240 6105 	movw	r1, #1541	; 0x605
 8004172:	4618      	mov	r0, r3
 8004174:	f001 fa62 	bl	800563c <CODEC_IO_Write>
 8004178:	4603      	mov	r3, r0
 800417a:	461a      	mov	r2, r3
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	4413      	add	r3, r2
 8004180:	61fb      	str	r3, [r7, #28]
      break;
 8004182:	e110      	b.n	80043a6 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004184:	89fb      	ldrh	r3, [r7, #14]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	f240 3203 	movw	r2, #771	; 0x303
 800418c:	2105      	movs	r1, #5
 800418e:	4618      	mov	r0, r3
 8004190:	f001 fa54 	bl	800563c <CODEC_IO_Write>
 8004194:	4603      	mov	r3, r0
 8004196:	461a      	mov	r2, r3
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	4413      	add	r3, r2
 800419c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800419e:	89fb      	ldrh	r3, [r7, #14]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2201      	movs	r2, #1
 80041a4:	f240 6101 	movw	r1, #1537	; 0x601
 80041a8:	4618      	mov	r0, r3
 80041aa:	f001 fa47 	bl	800563c <CODEC_IO_Write>
 80041ae:	4603      	mov	r3, r0
 80041b0:	461a      	mov	r2, r3
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	4413      	add	r3, r2
 80041b6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80041b8:	89fb      	ldrh	r3, [r7, #14]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2201      	movs	r2, #1
 80041be:	f240 6102 	movw	r1, #1538	; 0x602
 80041c2:	4618      	mov	r0, r3
 80041c4:	f001 fa3a 	bl	800563c <CODEC_IO_Write>
 80041c8:	4603      	mov	r3, r0
 80041ca:	461a      	mov	r2, r3
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80041d2:	89fb      	ldrh	r3, [r7, #14]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2200      	movs	r2, #0
 80041d8:	f240 6104 	movw	r1, #1540	; 0x604
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 fa2d 	bl	800563c <CODEC_IO_Write>
 80041e2:	4603      	mov	r3, r0
 80041e4:	461a      	mov	r2, r3
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	4413      	add	r3, r2
 80041ea:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80041ec:	89fb      	ldrh	r3, [r7, #14]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2200      	movs	r2, #0
 80041f2:	f240 6105 	movw	r1, #1541	; 0x605
 80041f6:	4618      	mov	r0, r3
 80041f8:	f001 fa20 	bl	800563c <CODEC_IO_Write>
 80041fc:	4603      	mov	r3, r0
 80041fe:	461a      	mov	r2, r3
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	4413      	add	r3, r2
 8004204:	61fb      	str	r3, [r7, #28]
      break;
 8004206:	e0ce      	b.n	80043a6 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004208:	8afb      	ldrh	r3, [r7, #22]
 800420a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800420e:	d141      	bne.n	8004294 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004210:	89fb      	ldrh	r3, [r7, #14]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f640 720f 	movw	r2, #3855	; 0xf0f
 8004218:	2105      	movs	r1, #5
 800421a:	4618      	mov	r0, r3
 800421c:	f001 fa0e 	bl	800563c <CODEC_IO_Write>
 8004220:	4603      	mov	r3, r0
 8004222:	461a      	mov	r2, r3
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	4413      	add	r3, r2
 8004228:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 800422a:	89fb      	ldrh	r3, [r7, #14]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2203      	movs	r2, #3
 8004230:	f240 6101 	movw	r1, #1537	; 0x601
 8004234:	4618      	mov	r0, r3
 8004236:	f001 fa01 	bl	800563c <CODEC_IO_Write>
 800423a:	4603      	mov	r3, r0
 800423c:	461a      	mov	r2, r3
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8004244:	89fb      	ldrh	r3, [r7, #14]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2203      	movs	r2, #3
 800424a:	f240 6102 	movw	r1, #1538	; 0x602
 800424e:	4618      	mov	r0, r3
 8004250:	f001 f9f4 	bl	800563c <CODEC_IO_Write>
 8004254:	4603      	mov	r3, r0
 8004256:	461a      	mov	r2, r3
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	4413      	add	r3, r2
 800425c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 800425e:	89fb      	ldrh	r3, [r7, #14]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2203      	movs	r2, #3
 8004264:	f240 6104 	movw	r1, #1540	; 0x604
 8004268:	4618      	mov	r0, r3
 800426a:	f001 f9e7 	bl	800563c <CODEC_IO_Write>
 800426e:	4603      	mov	r3, r0
 8004270:	461a      	mov	r2, r3
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	4413      	add	r3, r2
 8004276:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8004278:	89fb      	ldrh	r3, [r7, #14]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2203      	movs	r2, #3
 800427e:	f240 6105 	movw	r1, #1541	; 0x605
 8004282:	4618      	mov	r0, r3
 8004284:	f001 f9da 	bl	800563c <CODEC_IO_Write>
 8004288:	4603      	mov	r3, r0
 800428a:	461a      	mov	r2, r3
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	4413      	add	r3, r2
 8004290:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8004292:	e088      	b.n	80043a6 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004294:	89fb      	ldrh	r3, [r7, #14]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	f640 720f 	movw	r2, #3855	; 0xf0f
 800429c:	2105      	movs	r1, #5
 800429e:	4618      	mov	r0, r3
 80042a0:	f001 f9cc 	bl	800563c <CODEC_IO_Write>
 80042a4:	4603      	mov	r3, r0
 80042a6:	461a      	mov	r2, r3
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	4413      	add	r3, r2
 80042ac:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80042ae:	89fb      	ldrh	r3, [r7, #14]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2201      	movs	r2, #1
 80042b4:	f240 6101 	movw	r1, #1537	; 0x601
 80042b8:	4618      	mov	r0, r3
 80042ba:	f001 f9bf 	bl	800563c <CODEC_IO_Write>
 80042be:	4603      	mov	r3, r0
 80042c0:	461a      	mov	r2, r3
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	4413      	add	r3, r2
 80042c6:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80042c8:	89fb      	ldrh	r3, [r7, #14]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2201      	movs	r2, #1
 80042ce:	f240 6102 	movw	r1, #1538	; 0x602
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 f9b2 	bl	800563c <CODEC_IO_Write>
 80042d8:	4603      	mov	r3, r0
 80042da:	461a      	mov	r2, r3
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	4413      	add	r3, r2
 80042e0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80042e2:	89fb      	ldrh	r3, [r7, #14]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2202      	movs	r2, #2
 80042e8:	f240 6104 	movw	r1, #1540	; 0x604
 80042ec:	4618      	mov	r0, r3
 80042ee:	f001 f9a5 	bl	800563c <CODEC_IO_Write>
 80042f2:	4603      	mov	r3, r0
 80042f4:	461a      	mov	r2, r3
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	4413      	add	r3, r2
 80042fa:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80042fc:	89fb      	ldrh	r3, [r7, #14]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2202      	movs	r2, #2
 8004302:	f240 6105 	movw	r1, #1541	; 0x605
 8004306:	4618      	mov	r0, r3
 8004308:	f001 f998 	bl	800563c <CODEC_IO_Write>
 800430c:	4603      	mov	r3, r0
 800430e:	461a      	mov	r2, r3
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	4413      	add	r3, r2
 8004314:	61fb      	str	r3, [r7, #28]
      break;
 8004316:	e046      	b.n	80043a6 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004318:	89fb      	ldrh	r3, [r7, #14]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f240 3203 	movw	r2, #771	; 0x303
 8004320:	2105      	movs	r1, #5
 8004322:	4618      	mov	r0, r3
 8004324:	f001 f98a 	bl	800563c <CODEC_IO_Write>
 8004328:	4603      	mov	r3, r0
 800432a:	461a      	mov	r2, r3
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	4413      	add	r3, r2
 8004330:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004332:	89fb      	ldrh	r3, [r7, #14]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2201      	movs	r2, #1
 8004338:	f240 6101 	movw	r1, #1537	; 0x601
 800433c:	4618      	mov	r0, r3
 800433e:	f001 f97d 	bl	800563c <CODEC_IO_Write>
 8004342:	4603      	mov	r3, r0
 8004344:	461a      	mov	r2, r3
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	4413      	add	r3, r2
 800434a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800434c:	89fb      	ldrh	r3, [r7, #14]
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2201      	movs	r2, #1
 8004352:	f240 6102 	movw	r1, #1538	; 0x602
 8004356:	4618      	mov	r0, r3
 8004358:	f001 f970 	bl	800563c <CODEC_IO_Write>
 800435c:	4603      	mov	r3, r0
 800435e:	461a      	mov	r2, r3
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	4413      	add	r3, r2
 8004364:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004366:	89fb      	ldrh	r3, [r7, #14]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2200      	movs	r2, #0
 800436c:	f240 6104 	movw	r1, #1540	; 0x604
 8004370:	4618      	mov	r0, r3
 8004372:	f001 f963 	bl	800563c <CODEC_IO_Write>
 8004376:	4603      	mov	r3, r0
 8004378:	461a      	mov	r2, r3
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	4413      	add	r3, r2
 800437e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004380:	89fb      	ldrh	r3, [r7, #14]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2200      	movs	r2, #0
 8004386:	f240 6105 	movw	r1, #1541	; 0x605
 800438a:	4618      	mov	r0, r3
 800438c:	f001 f956 	bl	800563c <CODEC_IO_Write>
 8004390:	4603      	mov	r3, r0
 8004392:	461a      	mov	r2, r3
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	4413      	add	r3, r2
 8004398:	61fb      	str	r3, [r7, #28]
      break;
 800439a:	e004      	b.n	80043a6 <wm8994_Init+0x39e>
 800439c:	20000c20 	.word	0x20000c20
    }
  }
  else
  {
    outputEnabled = 0;
 80043a0:	4b99      	ldr	r3, [pc, #612]	; (8004608 <wm8994_Init+0x600>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 80043a6:	8afb      	ldrh	r3, [r7, #22]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 81ab 	beq.w	8004704 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 80043ae:	4b97      	ldr	r3, [pc, #604]	; (800460c <wm8994_Init+0x604>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80043b4:	8afb      	ldrh	r3, [r7, #22]
 80043b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ba:	f000 8129 	beq.w	8004610 <wm8994_Init+0x608>
 80043be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043c2:	f300 819b 	bgt.w	80046fc <wm8994_Init+0x6f4>
 80043c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ca:	d05a      	beq.n	8004482 <wm8994_Init+0x47a>
 80043cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043d0:	f300 8194 	bgt.w	80046fc <wm8994_Init+0x6f4>
 80043d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d8:	f000 80c6 	beq.w	8004568 <wm8994_Init+0x560>
 80043dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e0:	f040 818c 	bne.w	80046fc <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80043e4:	89fb      	ldrh	r3, [r7, #14]
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80043ec:	2104      	movs	r1, #4
 80043ee:	4618      	mov	r0, r3
 80043f0:	f001 f924 	bl	800563c <CODEC_IO_Write>
 80043f4:	4603      	mov	r3, r0
 80043f6:	461a      	mov	r2, r3
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	4413      	add	r3, r2
 80043fc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80043fe:	89fb      	ldrh	r3, [r7, #14]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	22db      	movs	r2, #219	; 0xdb
 8004404:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8004408:	4618      	mov	r0, r3
 800440a:	f001 f917 	bl	800563c <CODEC_IO_Write>
 800440e:	4603      	mov	r3, r0
 8004410:	461a      	mov	r2, r3
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	4413      	add	r3, r2
 8004416:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8004418:	89fb      	ldrh	r3, [r7, #14]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8004420:	2102      	movs	r1, #2
 8004422:	4618      	mov	r0, r3
 8004424:	f001 f90a 	bl	800563c <CODEC_IO_Write>
 8004428:	4603      	mov	r3, r0
 800442a:	461a      	mov	r2, r3
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	4413      	add	r3, r2
 8004430:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8004432:	89fb      	ldrh	r3, [r7, #14]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2202      	movs	r2, #2
 8004438:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800443c:	4618      	mov	r0, r3
 800443e:	f001 f8fd 	bl	800563c <CODEC_IO_Write>
 8004442:	4603      	mov	r3, r0
 8004444:	461a      	mov	r2, r3
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	4413      	add	r3, r2
 800444a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800444c:	89fb      	ldrh	r3, [r7, #14]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2202      	movs	r2, #2
 8004452:	f240 6109 	movw	r1, #1545	; 0x609
 8004456:	4618      	mov	r0, r3
 8004458:	f001 f8f0 	bl	800563c <CODEC_IO_Write>
 800445c:	4603      	mov	r3, r0
 800445e:	461a      	mov	r2, r3
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	4413      	add	r3, r2
 8004464:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8004466:	89fb      	ldrh	r3, [r7, #14]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	220e      	movs	r2, #14
 800446c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004470:	4618      	mov	r0, r3
 8004472:	f001 f8e3 	bl	800563c <CODEC_IO_Write>
 8004476:	4603      	mov	r3, r0
 8004478:	461a      	mov	r2, r3
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	4413      	add	r3, r2
 800447e:	61fb      	str	r3, [r7, #28]
      break;
 8004480:	e143      	b.n	800470a <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8004482:	89fb      	ldrh	r3, [r7, #14]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2211      	movs	r2, #17
 8004488:	2128      	movs	r1, #40	; 0x28
 800448a:	4618      	mov	r0, r3
 800448c:	f001 f8d6 	bl	800563c <CODEC_IO_Write>
 8004490:	4603      	mov	r3, r0
 8004492:	461a      	mov	r2, r3
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	4413      	add	r3, r2
 8004498:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 800449a:	89fb      	ldrh	r3, [r7, #14]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2235      	movs	r2, #53	; 0x35
 80044a0:	2129      	movs	r1, #41	; 0x29
 80044a2:	4618      	mov	r0, r3
 80044a4:	f001 f8ca 	bl	800563c <CODEC_IO_Write>
 80044a8:	4603      	mov	r3, r0
 80044aa:	461a      	mov	r2, r3
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	4413      	add	r3, r2
 80044b0:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 80044b2:	89fb      	ldrh	r3, [r7, #14]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2235      	movs	r2, #53	; 0x35
 80044b8:	212a      	movs	r1, #42	; 0x2a
 80044ba:	4618      	mov	r0, r3
 80044bc:	f001 f8be 	bl	800563c <CODEC_IO_Write>
 80044c0:	4603      	mov	r3, r0
 80044c2:	461a      	mov	r2, r3
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	4413      	add	r3, r2
 80044c8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80044ca:	89fb      	ldrh	r3, [r7, #14]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f240 3203 	movw	r2, #771	; 0x303
 80044d2:	2104      	movs	r1, #4
 80044d4:	4618      	mov	r0, r3
 80044d6:	f001 f8b1 	bl	800563c <CODEC_IO_Write>
 80044da:	4603      	mov	r3, r0
 80044dc:	461a      	mov	r2, r3
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	4413      	add	r3, r2
 80044e2:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80044e4:	89fb      	ldrh	r3, [r7, #14]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	22db      	movs	r2, #219	; 0xdb
 80044ea:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 f8a4 	bl	800563c <CODEC_IO_Write>
 80044f4:	4603      	mov	r3, r0
 80044f6:	461a      	mov	r2, r3
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	4413      	add	r3, r2
 80044fc:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80044fe:	89fb      	ldrh	r3, [r7, #14]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	f246 3250 	movw	r2, #25424	; 0x6350
 8004506:	2102      	movs	r1, #2
 8004508:	4618      	mov	r0, r3
 800450a:	f001 f897 	bl	800563c <CODEC_IO_Write>
 800450e:	4603      	mov	r3, r0
 8004510:	461a      	mov	r2, r3
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	4413      	add	r3, r2
 8004516:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8004518:	89fb      	ldrh	r3, [r7, #14]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2202      	movs	r2, #2
 800451e:	f240 6106 	movw	r1, #1542	; 0x606
 8004522:	4618      	mov	r0, r3
 8004524:	f001 f88a 	bl	800563c <CODEC_IO_Write>
 8004528:	4603      	mov	r3, r0
 800452a:	461a      	mov	r2, r3
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	4413      	add	r3, r2
 8004530:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004532:	89fb      	ldrh	r3, [r7, #14]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2202      	movs	r2, #2
 8004538:	f240 6107 	movw	r1, #1543	; 0x607
 800453c:	4618      	mov	r0, r3
 800453e:	f001 f87d 	bl	800563c <CODEC_IO_Write>
 8004542:	4603      	mov	r3, r0
 8004544:	461a      	mov	r2, r3
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	4413      	add	r3, r2
 800454a:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800454c:	89fb      	ldrh	r3, [r7, #14]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	220d      	movs	r2, #13
 8004552:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004556:	4618      	mov	r0, r3
 8004558:	f001 f870 	bl	800563c <CODEC_IO_Write>
 800455c:	4603      	mov	r3, r0
 800455e:	461a      	mov	r2, r3
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	4413      	add	r3, r2
 8004564:	61fb      	str	r3, [r7, #28]
      break;
 8004566:	e0d0      	b.n	800470a <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8004568:	89fb      	ldrh	r3, [r7, #14]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8004570:	2104      	movs	r1, #4
 8004572:	4618      	mov	r0, r3
 8004574:	f001 f862 	bl	800563c <CODEC_IO_Write>
 8004578:	4603      	mov	r3, r0
 800457a:	461a      	mov	r2, r3
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	4413      	add	r3, r2
 8004580:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004582:	89fb      	ldrh	r3, [r7, #14]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	22db      	movs	r2, #219	; 0xdb
 8004588:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800458c:	4618      	mov	r0, r3
 800458e:	f001 f855 	bl	800563c <CODEC_IO_Write>
 8004592:	4603      	mov	r3, r0
 8004594:	461a      	mov	r2, r3
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	4413      	add	r3, r2
 800459a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800459c:	89fb      	ldrh	r3, [r7, #14]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f246 3250 	movw	r2, #25424	; 0x6350
 80045a4:	2102      	movs	r1, #2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f001 f848 	bl	800563c <CODEC_IO_Write>
 80045ac:	4603      	mov	r3, r0
 80045ae:	461a      	mov	r2, r3
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	4413      	add	r3, r2
 80045b4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80045b6:	89fb      	ldrh	r3, [r7, #14]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2202      	movs	r2, #2
 80045bc:	f240 6106 	movw	r1, #1542	; 0x606
 80045c0:	4618      	mov	r0, r3
 80045c2:	f001 f83b 	bl	800563c <CODEC_IO_Write>
 80045c6:	4603      	mov	r3, r0
 80045c8:	461a      	mov	r2, r3
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	4413      	add	r3, r2
 80045ce:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80045d0:	89fb      	ldrh	r3, [r7, #14]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2202      	movs	r2, #2
 80045d6:	f240 6107 	movw	r1, #1543	; 0x607
 80045da:	4618      	mov	r0, r3
 80045dc:	f001 f82e 	bl	800563c <CODEC_IO_Write>
 80045e0:	4603      	mov	r3, r0
 80045e2:	461a      	mov	r2, r3
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	4413      	add	r3, r2
 80045e8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80045ea:	89fb      	ldrh	r3, [r7, #14]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	220d      	movs	r2, #13
 80045f0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80045f4:	4618      	mov	r0, r3
 80045f6:	f001 f821 	bl	800563c <CODEC_IO_Write>
 80045fa:	4603      	mov	r3, r0
 80045fc:	461a      	mov	r2, r3
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	4413      	add	r3, r2
 8004602:	61fb      	str	r3, [r7, #28]
      break; 
 8004604:	e081      	b.n	800470a <wm8994_Init+0x702>
 8004606:	bf00      	nop
 8004608:	20000c20 	.word	0x20000c20
 800460c:	20000c24 	.word	0x20000c24
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8004610:	89fb      	ldrh	r3, [r7, #14]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	f640 723c 	movw	r2, #3900	; 0xf3c
 8004618:	2104      	movs	r1, #4
 800461a:	4618      	mov	r0, r3
 800461c:	f001 f80e 	bl	800563c <CODEC_IO_Write>
 8004620:	4603      	mov	r3, r0
 8004622:	461a      	mov	r2, r3
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	4413      	add	r3, r2
 8004628:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800462a:	89fb      	ldrh	r3, [r7, #14]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	22db      	movs	r2, #219	; 0xdb
 8004630:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8004634:	4618      	mov	r0, r3
 8004636:	f001 f801 	bl	800563c <CODEC_IO_Write>
 800463a:	4603      	mov	r3, r0
 800463c:	461a      	mov	r2, r3
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	4413      	add	r3, r2
 8004642:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004644:	89fb      	ldrh	r3, [r7, #14]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	22db      	movs	r2, #219	; 0xdb
 800464a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fff4 	bl	800563c <CODEC_IO_Write>
 8004654:	4603      	mov	r3, r0
 8004656:	461a      	mov	r2, r3
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	4413      	add	r3, r2
 800465c:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 800465e:	89fb      	ldrh	r3, [r7, #14]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8004666:	2102      	movs	r1, #2
 8004668:	4618      	mov	r0, r3
 800466a:	f000 ffe7 	bl	800563c <CODEC_IO_Write>
 800466e:	4603      	mov	r3, r0
 8004670:	461a      	mov	r2, r3
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	4413      	add	r3, r2
 8004676:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8004678:	89fb      	ldrh	r3, [r7, #14]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2202      	movs	r2, #2
 800467e:	f240 6106 	movw	r1, #1542	; 0x606
 8004682:	4618      	mov	r0, r3
 8004684:	f000 ffda 	bl	800563c <CODEC_IO_Write>
 8004688:	4603      	mov	r3, r0
 800468a:	461a      	mov	r2, r3
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	4413      	add	r3, r2
 8004690:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004692:	89fb      	ldrh	r3, [r7, #14]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2202      	movs	r2, #2
 8004698:	f240 6107 	movw	r1, #1543	; 0x607
 800469c:	4618      	mov	r0, r3
 800469e:	f000 ffcd 	bl	800563c <CODEC_IO_Write>
 80046a2:	4603      	mov	r3, r0
 80046a4:	461a      	mov	r2, r3
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	4413      	add	r3, r2
 80046aa:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80046ac:	89fb      	ldrh	r3, [r7, #14]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2202      	movs	r2, #2
 80046b2:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 ffc0 	bl	800563c <CODEC_IO_Write>
 80046bc:	4603      	mov	r3, r0
 80046be:	461a      	mov	r2, r3
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	4413      	add	r3, r2
 80046c4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80046c6:	89fb      	ldrh	r3, [r7, #14]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2202      	movs	r2, #2
 80046cc:	f240 6109 	movw	r1, #1545	; 0x609
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 ffb3 	bl	800563c <CODEC_IO_Write>
 80046d6:	4603      	mov	r3, r0
 80046d8:	461a      	mov	r2, r3
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	4413      	add	r3, r2
 80046de:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80046e0:	89fb      	ldrh	r3, [r7, #14]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	220d      	movs	r2, #13
 80046e6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 ffa6 	bl	800563c <CODEC_IO_Write>
 80046f0:	4603      	mov	r3, r0
 80046f2:	461a      	mov	r2, r3
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	4413      	add	r3, r2
 80046f8:	61fb      	str	r3, [r7, #28]
      break;    
 80046fa:	e006      	b.n	800470a <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	3301      	adds	r3, #1
 8004700:	61fb      	str	r3, [r7, #28]
      break;
 8004702:	e002      	b.n	800470a <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8004704:	4ba4      	ldr	r3, [pc, #656]	; (8004998 <wm8994_Init+0x990>)
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4aa3      	ldr	r2, [pc, #652]	; (800499c <wm8994_Init+0x994>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d079      	beq.n	8004806 <wm8994_Init+0x7fe>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4aa1      	ldr	r2, [pc, #644]	; (800499c <wm8994_Init+0x994>)
 8004716:	4293      	cmp	r3, r2
 8004718:	f200 80ad 	bhi.w	8004876 <wm8994_Init+0x86e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004722:	4293      	cmp	r3, r2
 8004724:	d061      	beq.n	80047ea <wm8994_Init+0x7e2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800472c:	4293      	cmp	r3, r2
 800472e:	f200 80a2 	bhi.w	8004876 <wm8994_Init+0x86e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004738:	4293      	cmp	r3, r2
 800473a:	f000 808e 	beq.w	800485a <wm8994_Init+0x852>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004744:	4293      	cmp	r3, r2
 8004746:	f200 8096 	bhi.w	8004876 <wm8994_Init+0x86e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004750:	d03d      	beq.n	80047ce <wm8994_Init+0x7c6>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004758:	f200 808d 	bhi.w	8004876 <wm8994_Init+0x86e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f245 6222 	movw	r2, #22050	; 0x5622
 8004762:	4293      	cmp	r3, r2
 8004764:	d06b      	beq.n	800483e <wm8994_Init+0x836>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f245 6222 	movw	r2, #22050	; 0x5622
 800476c:	4293      	cmp	r3, r2
 800476e:	f200 8082 	bhi.w	8004876 <wm8994_Init+0x86e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004778:	d01b      	beq.n	80047b2 <wm8994_Init+0x7aa>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004780:	d879      	bhi.n	8004876 <wm8994_Init+0x86e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004788:	d005      	beq.n	8004796 <wm8994_Init+0x78e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004790:	4293      	cmp	r3, r2
 8004792:	d046      	beq.n	8004822 <wm8994_Init+0x81a>
 8004794:	e06f      	b.n	8004876 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8004796:	89fb      	ldrh	r3, [r7, #14]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2203      	movs	r2, #3
 800479c:	f44f 7104 	mov.w	r1, #528	; 0x210
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 ff4b 	bl	800563c <CODEC_IO_Write>
 80047a6:	4603      	mov	r3, r0
 80047a8:	461a      	mov	r2, r3
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	4413      	add	r3, r2
 80047ae:	61fb      	str	r3, [r7, #28]
    break;
 80047b0:	e06f      	b.n	8004892 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80047b2:	89fb      	ldrh	r3, [r7, #14]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2233      	movs	r2, #51	; 0x33
 80047b8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 ff3d 	bl	800563c <CODEC_IO_Write>
 80047c2:	4603      	mov	r3, r0
 80047c4:	461a      	mov	r2, r3
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4413      	add	r3, r2
 80047ca:	61fb      	str	r3, [r7, #28]
    break;
 80047cc:	e061      	b.n	8004892 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80047ce:	89fb      	ldrh	r3, [r7, #14]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2263      	movs	r2, #99	; 0x63
 80047d4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 ff2f 	bl	800563c <CODEC_IO_Write>
 80047de:	4603      	mov	r3, r0
 80047e0:	461a      	mov	r2, r3
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	4413      	add	r3, r2
 80047e6:	61fb      	str	r3, [r7, #28]
    break;
 80047e8:	e053      	b.n	8004892 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80047ea:	89fb      	ldrh	r3, [r7, #14]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2283      	movs	r2, #131	; 0x83
 80047f0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 ff21 	bl	800563c <CODEC_IO_Write>
 80047fa:	4603      	mov	r3, r0
 80047fc:	461a      	mov	r2, r3
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	4413      	add	r3, r2
 8004802:	61fb      	str	r3, [r7, #28]
    break;
 8004804:	e045      	b.n	8004892 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8004806:	89fb      	ldrh	r3, [r7, #14]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	22a3      	movs	r2, #163	; 0xa3
 800480c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004810:	4618      	mov	r0, r3
 8004812:	f000 ff13 	bl	800563c <CODEC_IO_Write>
 8004816:	4603      	mov	r3, r0
 8004818:	461a      	mov	r2, r3
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	4413      	add	r3, r2
 800481e:	61fb      	str	r3, [r7, #28]
    break;
 8004820:	e037      	b.n	8004892 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8004822:	89fb      	ldrh	r3, [r7, #14]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2213      	movs	r2, #19
 8004828:	f44f 7104 	mov.w	r1, #528	; 0x210
 800482c:	4618      	mov	r0, r3
 800482e:	f000 ff05 	bl	800563c <CODEC_IO_Write>
 8004832:	4603      	mov	r3, r0
 8004834:	461a      	mov	r2, r3
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	4413      	add	r3, r2
 800483a:	61fb      	str	r3, [r7, #28]
    break;
 800483c:	e029      	b.n	8004892 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800483e:	89fb      	ldrh	r3, [r7, #14]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2243      	movs	r2, #67	; 0x43
 8004844:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fef7 	bl	800563c <CODEC_IO_Write>
 800484e:	4603      	mov	r3, r0
 8004850:	461a      	mov	r2, r3
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	4413      	add	r3, r2
 8004856:	61fb      	str	r3, [r7, #28]
    break;
 8004858:	e01b      	b.n	8004892 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800485a:	89fb      	ldrh	r3, [r7, #14]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2273      	movs	r2, #115	; 0x73
 8004860:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fee9 	bl	800563c <CODEC_IO_Write>
 800486a:	4603      	mov	r3, r0
 800486c:	461a      	mov	r2, r3
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	4413      	add	r3, r2
 8004872:	61fb      	str	r3, [r7, #28]
    break; 
 8004874:	e00d      	b.n	8004892 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004876:	89fb      	ldrh	r3, [r7, #14]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2283      	movs	r2, #131	; 0x83
 800487c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fedb 	bl	800563c <CODEC_IO_Write>
 8004886:	4603      	mov	r3, r0
 8004888:	461a      	mov	r2, r3
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	4413      	add	r3, r2
 800488e:	61fb      	str	r3, [r7, #28]
    break; 
 8004890:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004892:	8afb      	ldrh	r3, [r7, #22]
 8004894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004898:	d10e      	bne.n	80048b8 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 800489a:	89fb      	ldrh	r3, [r7, #14]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f244 0218 	movw	r2, #16408	; 0x4018
 80048a2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fec8 	bl	800563c <CODEC_IO_Write>
 80048ac:	4603      	mov	r3, r0
 80048ae:	461a      	mov	r2, r3
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	4413      	add	r3, r2
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	e00d      	b.n	80048d4 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80048b8:	89fb      	ldrh	r3, [r7, #14]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f244 0210 	movw	r2, #16400	; 0x4010
 80048c0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 feb9 	bl	800563c <CODEC_IO_Write>
 80048ca:	4603      	mov	r3, r0
 80048cc:	461a      	mov	r2, r3
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	4413      	add	r3, r2
 80048d2:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80048d4:	89fb      	ldrh	r3, [r7, #14]
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2200      	movs	r2, #0
 80048da:	f240 3102 	movw	r1, #770	; 0x302
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 feac 	bl	800563c <CODEC_IO_Write>
 80048e4:	4603      	mov	r3, r0
 80048e6:	461a      	mov	r2, r3
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	4413      	add	r3, r2
 80048ec:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80048ee:	89fb      	ldrh	r3, [r7, #14]
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	220a      	movs	r2, #10
 80048f4:	f44f 7102 	mov.w	r1, #520	; 0x208
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fe9f 	bl	800563c <CODEC_IO_Write>
 80048fe:	4603      	mov	r3, r0
 8004900:	461a      	mov	r2, r3
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	4413      	add	r3, r2
 8004906:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8004908:	89fb      	ldrh	r3, [r7, #14]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2201      	movs	r2, #1
 800490e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fe92 	bl	800563c <CODEC_IO_Write>
 8004918:	4603      	mov	r3, r0
 800491a:	461a      	mov	r2, r3
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	4413      	add	r3, r2
 8004920:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8004922:	8b3b      	ldrh	r3, [r7, #24]
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 817b 	beq.w	8004c20 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800492a:	8b3b      	ldrh	r3, [r7, #24]
 800492c:	2b02      	cmp	r3, #2
 800492e:	d157      	bne.n	80049e0 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8004930:	89fb      	ldrh	r3, [r7, #14]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004938:	212d      	movs	r1, #45	; 0x2d
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fe7e 	bl	800563c <CODEC_IO_Write>
 8004940:	4603      	mov	r3, r0
 8004942:	461a      	mov	r2, r3
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	4413      	add	r3, r2
 8004948:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 800494a:	89fb      	ldrh	r3, [r7, #14]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004952:	212e      	movs	r1, #46	; 0x2e
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fe71 	bl	800563c <CODEC_IO_Write>
 800495a:	4603      	mov	r3, r0
 800495c:	461a      	mov	r2, r3
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	4413      	add	r3, r2
 8004962:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8004964:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <wm8994_Init+0x998>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01b      	beq.n	80049a4 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 800496c:	89fb      	ldrh	r3, [r7, #14]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8004974:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fe5f 	bl	800563c <CODEC_IO_Write>
 800497e:	4603      	mov	r3, r0
 8004980:	461a      	mov	r2, r3
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	4413      	add	r3, r2
 8004986:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8004988:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <wm8994_Init+0x998>)
 800498a:	2200      	movs	r2, #0
 800498c:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 800498e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004992:	f7fd fd65 	bl	8002460 <AUDIO_IO_Delay>
 8004996:	e016      	b.n	80049c6 <wm8994_Init+0x9be>
 8004998:	20000c24 	.word	0x20000c24
 800499c:	00017700 	.word	0x00017700
 80049a0:	20000074 	.word	0x20000074
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80049a4:	89fb      	ldrh	r3, [r7, #14]
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	f248 1208 	movw	r2, #33032	; 0x8108
 80049ac:	f44f 7188 	mov.w	r1, #272	; 0x110
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fe43 	bl	800563c <CODEC_IO_Write>
 80049b6:	4603      	mov	r3, r0
 80049b8:	461a      	mov	r2, r3
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	4413      	add	r3, r2
 80049be:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 80049c0:	2032      	movs	r0, #50	; 0x32
 80049c2:	f7fd fd4d 	bl	8002460 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80049c6:	89fb      	ldrh	r3, [r7, #14]
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2200      	movs	r2, #0
 80049cc:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fe33 	bl	800563c <CODEC_IO_Write>
 80049d6:	4603      	mov	r3, r0
 80049d8:	461a      	mov	r2, r3
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	4413      	add	r3, r2
 80049de:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80049e0:	89fb      	ldrh	r3, [r7, #14]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80049e8:	2103      	movs	r1, #3
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fe26 	bl	800563c <CODEC_IO_Write>
 80049f0:	4603      	mov	r3, r0
 80049f2:	461a      	mov	r2, r3
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	4413      	add	r3, r2
 80049f8:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80049fa:	89fb      	ldrh	r3, [r7, #14]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2200      	movs	r2, #0
 8004a00:	2122      	movs	r1, #34	; 0x22
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fe1a 	bl	800563c <CODEC_IO_Write>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	4413      	add	r3, r2
 8004a10:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8004a12:	89fb      	ldrh	r3, [r7, #14]
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2200      	movs	r2, #0
 8004a18:	2123      	movs	r1, #35	; 0x23
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fe0e 	bl	800563c <CODEC_IO_Write>
 8004a20:	4603      	mov	r3, r0
 8004a22:	461a      	mov	r2, r3
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	4413      	add	r3, r2
 8004a28:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8004a2a:	89fb      	ldrh	r3, [r7, #14]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004a32:	2136      	movs	r1, #54	; 0x36
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fe01 	bl	800563c <CODEC_IO_Write>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	4413      	add	r3, r2
 8004a42:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8004a44:	89fb      	ldrh	r3, [r7, #14]
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	f243 0203 	movw	r2, #12291	; 0x3003
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fdf4 	bl	800563c <CODEC_IO_Write>
 8004a54:	4603      	mov	r3, r0
 8004a56:	461a      	mov	r2, r3
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004a5e:	8afb      	ldrh	r3, [r7, #22]
 8004a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a64:	d10d      	bne.n	8004a82 <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8004a66:	89fb      	ldrh	r3, [r7, #14]
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	f240 2205 	movw	r2, #517	; 0x205
 8004a6e:	2151      	movs	r1, #81	; 0x51
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fde3 	bl	800563c <CODEC_IO_Write>
 8004a76:	4603      	mov	r3, r0
 8004a78:	461a      	mov	r2, r3
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	61fb      	str	r3, [r7, #28]
 8004a80:	e00b      	b.n	8004a9a <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8004a82:	89fb      	ldrh	r3, [r7, #14]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2205      	movs	r2, #5
 8004a88:	2151      	movs	r1, #81	; 0x51
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fdd6 	bl	800563c <CODEC_IO_Write>
 8004a90:	4603      	mov	r3, r0
 8004a92:	461a      	mov	r2, r3
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	4413      	add	r3, r2
 8004a98:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8004a9a:	8b7b      	ldrh	r3, [r7, #26]
 8004a9c:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8004aa0:	f043 0303 	orr.w	r3, r3, #3
 8004aa4:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004aa6:	89fb      	ldrh	r3, [r7, #14]
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	8b7a      	ldrh	r2, [r7, #26]
 8004aac:	2101      	movs	r1, #1
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fdc4 	bl	800563c <CODEC_IO_Write>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	4413      	add	r3, r2
 8004abc:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8004abe:	89fb      	ldrh	r3, [r7, #14]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2222      	movs	r2, #34	; 0x22
 8004ac4:	2160      	movs	r1, #96	; 0x60
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fdb8 	bl	800563c <CODEC_IO_Write>
 8004acc:	4603      	mov	r3, r0
 8004ace:	461a      	mov	r2, r3
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8004ad6:	89fb      	ldrh	r3, [r7, #14]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	f649 7225 	movw	r2, #40741	; 0x9f25
 8004ade:	214c      	movs	r1, #76	; 0x4c
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fdab 	bl	800563c <CODEC_IO_Write>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	461a      	mov	r2, r3
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	4413      	add	r3, r2
 8004aee:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8004af0:	200f      	movs	r0, #15
 8004af2:	f7fd fcb5 	bl	8002460 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8004af6:	89fb      	ldrh	r3, [r7, #14]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2201      	movs	r2, #1
 8004afc:	212d      	movs	r1, #45	; 0x2d
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fd9c 	bl	800563c <CODEC_IO_Write>
 8004b04:	4603      	mov	r3, r0
 8004b06:	461a      	mov	r2, r3
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8004b0e:	89fb      	ldrh	r3, [r7, #14]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2201      	movs	r2, #1
 8004b14:	212e      	movs	r1, #46	; 0x2e
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fd90 	bl	800563c <CODEC_IO_Write>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	461a      	mov	r2, r3
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	4413      	add	r3, r2
 8004b24:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8004b26:	89fb      	ldrh	r3, [r7, #14]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	f44f 724c 	mov.w	r2, #816	; 0x330
 8004b2e:	2103      	movs	r1, #3
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fd83 	bl	800563c <CODEC_IO_Write>
 8004b36:	4603      	mov	r3, r0
 8004b38:	461a      	mov	r2, r3
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8004b40:	89fb      	ldrh	r3, [r7, #14]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2233      	movs	r2, #51	; 0x33
 8004b46:	2154      	movs	r1, #84	; 0x54
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fd77 	bl	800563c <CODEC_IO_Write>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	461a      	mov	r2, r3
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	4413      	add	r3, r2
 8004b56:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8004b58:	f240 1001 	movw	r0, #257	; 0x101
 8004b5c:	f7fd fc80 	bl	8002460 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8004b60:	89fb      	ldrh	r3, [r7, #14]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	22ee      	movs	r2, #238	; 0xee
 8004b66:	2160      	movs	r1, #96	; 0x60
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fd67 	bl	800563c <CODEC_IO_Write>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	461a      	mov	r2, r3
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8004b78:	89fb      	ldrh	r3, [r7, #14]
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	22c0      	movs	r2, #192	; 0xc0
 8004b7e:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fd5a 	bl	800563c <CODEC_IO_Write>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	4413      	add	r3, r2
 8004b90:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8004b92:	89fb      	ldrh	r3, [r7, #14]
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	22c0      	movs	r2, #192	; 0xc0
 8004b98:	f240 6111 	movw	r1, #1553	; 0x611
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fd4d 	bl	800563c <CODEC_IO_Write>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	4413      	add	r3, r2
 8004baa:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8004bac:	89fb      	ldrh	r3, [r7, #14]
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2210      	movs	r2, #16
 8004bb2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fd40 	bl	800563c <CODEC_IO_Write>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8004bc6:	89fb      	ldrh	r3, [r7, #14]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	22c0      	movs	r2, #192	; 0xc0
 8004bcc:	f240 6112 	movw	r1, #1554	; 0x612
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fd33 	bl	800563c <CODEC_IO_Write>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	461a      	mov	r2, r3
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8004be0:	89fb      	ldrh	r3, [r7, #14]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	22c0      	movs	r2, #192	; 0xc0
 8004be6:	f240 6113 	movw	r1, #1555	; 0x613
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fd26 	bl	800563c <CODEC_IO_Write>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8004bfa:	89fb      	ldrh	r3, [r7, #14]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2210      	movs	r2, #16
 8004c00:	f240 4122 	movw	r1, #1058	; 0x422
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fd19 	bl	800563c <CODEC_IO_Write>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8004c14:	7afa      	ldrb	r2, [r7, #11]
 8004c16:	89fb      	ldrh	r3, [r7, #14]
 8004c18:	4611      	mov	r1, r2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 f984 	bl	8004f28 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8004c20:	8afb      	ldrh	r3, [r7, #22]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 80a6 	beq.w	8004d74 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8004c28:	8afb      	ldrh	r3, [r7, #22]
 8004c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c2e:	d003      	beq.n	8004c38 <wm8994_Init+0xc30>
 8004c30:	8afb      	ldrh	r3, [r7, #22]
 8004c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c36:	d12b      	bne.n	8004c90 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8004c38:	8b7b      	ldrh	r3, [r7, #26]
 8004c3a:	f043 0313 	orr.w	r3, r3, #19
 8004c3e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004c40:	89fb      	ldrh	r3, [r7, #14]
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	8b7a      	ldrh	r2, [r7, #26]
 8004c46:	2101      	movs	r1, #1
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fcf7 	bl	800563c <CODEC_IO_Write>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	461a      	mov	r2, r3
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	4413      	add	r3, r2
 8004c56:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8004c58:	89fb      	ldrh	r3, [r7, #14]
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fcea 	bl	800563c <CODEC_IO_Write>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	4413      	add	r3, r2
 8004c70:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8004c72:	89fb      	ldrh	r3, [r7, #14]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004c7a:	f240 4111 	movw	r1, #1041	; 0x411
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fcdc 	bl	800563c <CODEC_IO_Write>
 8004c84:	4603      	mov	r3, r0
 8004c86:	461a      	mov	r2, r3
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	61fb      	str	r3, [r7, #28]
 8004c8e:	e06b      	b.n	8004d68 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004c90:	8afb      	ldrh	r3, [r7, #22]
 8004c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c96:	d139      	bne.n	8004d0c <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8004c98:	8b7b      	ldrh	r3, [r7, #26]
 8004c9a:	f043 0313 	orr.w	r3, r3, #19
 8004c9e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004ca0:	89fb      	ldrh	r3, [r7, #14]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	8b7a      	ldrh	r2, [r7, #26]
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fcc7 	bl	800563c <CODEC_IO_Write>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8004cb8:	89fb      	ldrh	r3, [r7, #14]
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fcba 	bl	800563c <CODEC_IO_Write>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	461a      	mov	r2, r3
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	4413      	add	r3, r2
 8004cd0:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8004cd2:	89fb      	ldrh	r3, [r7, #14]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004cda:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fcac 	bl	800563c <CODEC_IO_Write>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	4413      	add	r3, r2
 8004cec:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8004cee:	89fb      	ldrh	r3, [r7, #14]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004cf6:	f240 4111 	movw	r1, #1041	; 0x411
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fc9e 	bl	800563c <CODEC_IO_Write>
 8004d00:	4603      	mov	r3, r0
 8004d02:	461a      	mov	r2, r3
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	4413      	add	r3, r2
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	e02d      	b.n	8004d68 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8004d0c:	8afb      	ldrh	r3, [r7, #22]
 8004d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d12:	d003      	beq.n	8004d1c <wm8994_Init+0xd14>
 8004d14:	8afb      	ldrh	r3, [r7, #22]
 8004d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d1a:	d125      	bne.n	8004d68 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8004d1c:	89fb      	ldrh	r3, [r7, #14]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	220b      	movs	r2, #11
 8004d22:	2118      	movs	r1, #24
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fc89 	bl	800563c <CODEC_IO_Write>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	4413      	add	r3, r2
 8004d32:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8004d34:	89fb      	ldrh	r3, [r7, #14]
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	220b      	movs	r2, #11
 8004d3a:	211a      	movs	r1, #26
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fc7d 	bl	800563c <CODEC_IO_Write>
 8004d42:	4603      	mov	r3, r0
 8004d44:	461a      	mov	r2, r3
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	4413      	add	r3, r2
 8004d4a:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8004d4c:	89fb      	ldrh	r3, [r7, #14]
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004d54:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fc6f 	bl	800563c <CODEC_IO_Write>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	461a      	mov	r2, r3
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	4413      	add	r3, r2
 8004d66:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8004d68:	7afa      	ldrb	r2, [r7, #11]
 8004d6a:	89fb      	ldrh	r3, [r7, #14]
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 f8da 	bl	8004f28 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8004d74:	69fb      	ldr	r3, [r7, #28]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3720      	adds	r7, #32
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop

08004d80 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8004d84:	f7fd fb0e 	bl	80023a4 <AUDIO_IO_DeInit>
}
 8004d88:	bf00      	nop
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4603      	mov	r3, r0
 8004d94:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8004d96:	f7fd fafb 	bl	8002390 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2100      	movs	r1, #0
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fd fb31 	bl	8002408 <AUDIO_IO_Read>
 8004da6:	4603      	mov	r3, r0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	4603      	mov	r3, r0
 8004db8:	6039      	str	r1, [r7, #0]
 8004dba:	80fb      	strh	r3, [r7, #6]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004dc4:	88fb      	ldrh	r3, [r7, #6]
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 f9d1 	bl	8005170 <wm8994_SetMute>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	4603      	mov	r3, r0
 8004de8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	2101      	movs	r1, #1
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 f9bc 	bl	8005170 <wm8994_SetMute>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2201      	movs	r2, #1
 8004e06:	2102      	movs	r1, #2
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 fc17 	bl	800563c <CODEC_IO_Write>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	461a      	mov	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4413      	add	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8004e18:	68fb      	ldr	r3, [r7, #12]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	4603      	mov	r3, r0
 8004e2a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004e30:	88fb      	ldrh	r3, [r7, #6]
 8004e32:	2100      	movs	r1, #0
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 f99b 	bl	8005170 <wm8994_SetMute>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8004e42:	68fb      	ldr	r3, [r7, #12]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	6039      	str	r1, [r7, #0]
 8004e56:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8004e5c:	4b31      	ldr	r3, [pc, #196]	; (8004f24 <wm8994_Stop+0xd8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d05a      	beq.n	8004f1a <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004e64:	88fb      	ldrh	r3, [r7, #6]
 8004e66:	2101      	movs	r1, #1
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 f981 	bl	8005170 <wm8994_SetMute>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d04e      	beq.n	8004f1a <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e84:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fbd7 	bl	800563c <CODEC_IO_Write>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	461a      	mov	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4413      	add	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ea0:	f240 4122 	movw	r1, #1058	; 0x422
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fbc9 	bl	800563c <CODEC_IO_Write>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	461a      	mov	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8004eb4:	88fb      	ldrh	r3, [r7, #6]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2200      	movs	r2, #0
 8004eba:	212d      	movs	r1, #45	; 0x2d
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 fbbd 	bl	800563c <CODEC_IO_Write>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4413      	add	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8004ecc:	88fb      	ldrh	r3, [r7, #6]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	212e      	movs	r1, #46	; 0x2e
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 fbb1 	bl	800563c <CODEC_IO_Write>
 8004eda:	4603      	mov	r3, r0
 8004edc:	461a      	mov	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8004ee4:	88fb      	ldrh	r3, [r7, #6]
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2105      	movs	r1, #5
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fba5 	bl	800563c <CODEC_IO_Write>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4413      	add	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8004efc:	88fb      	ldrh	r3, [r7, #6]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2200      	movs	r2, #0
 8004f02:	2100      	movs	r1, #0
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fb99 	bl	800563c <CODEC_IO_Write>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4413      	add	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8004f14:	4b03      	ldr	r3, [pc, #12]	; (8004f24 <wm8994_Stop+0xd8>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	20000c20 	.word	0x20000c20

08004f28 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	460a      	mov	r2, r1
 8004f32:	80fb      	strh	r3, [r7, #6]
 8004f34:	4613      	mov	r3, r2
 8004f36:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8004f3c:	797b      	ldrb	r3, [r7, #5]
 8004f3e:	2b64      	cmp	r3, #100	; 0x64
 8004f40:	d80b      	bhi.n	8004f5a <wm8994_SetVolume+0x32>
 8004f42:	797a      	ldrb	r2, [r7, #5]
 8004f44:	4613      	mov	r3, r2
 8004f46:	019b      	lsls	r3, r3, #6
 8004f48:	1a9b      	subs	r3, r3, r2
 8004f4a:	4a86      	ldr	r2, [pc, #536]	; (8005164 <wm8994_SetVolume+0x23c>)
 8004f4c:	fb82 1203 	smull	r1, r2, r2, r3
 8004f50:	1152      	asrs	r2, r2, #5
 8004f52:	17db      	asrs	r3, r3, #31
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	e000      	b.n	8004f5c <wm8994_SetVolume+0x34>
 8004f5a:	2364      	movs	r3, #100	; 0x64
 8004f5c:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8004f5e:	4b82      	ldr	r3, [pc, #520]	; (8005168 <wm8994_SetVolume+0x240>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 809b 	beq.w	800509e <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8004f68:	7afb      	ldrb	r3, [r7, #11]
 8004f6a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f6c:	d93d      	bls.n	8004fea <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004f6e:	88fb      	ldrh	r3, [r7, #6]
 8004f70:	2100      	movs	r1, #0
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 f8fc 	bl	8005170 <wm8994_SetMute>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8004f80:	88fb      	ldrh	r3, [r7, #6]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f240 127f 	movw	r2, #383	; 0x17f
 8004f88:	211c      	movs	r1, #28
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fb56 	bl	800563c <CODEC_IO_Write>
 8004f90:	4603      	mov	r3, r0
 8004f92:	461a      	mov	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8004f9a:	88fb      	ldrh	r3, [r7, #6]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	f240 127f 	movw	r2, #383	; 0x17f
 8004fa2:	211d      	movs	r1, #29
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 fb49 	bl	800563c <CODEC_IO_Write>
 8004faa:	4603      	mov	r3, r0
 8004fac:	461a      	mov	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8004fb4:	88fb      	ldrh	r3, [r7, #6]
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	f240 127f 	movw	r2, #383	; 0x17f
 8004fbc:	2126      	movs	r1, #38	; 0x26
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fb3c 	bl	800563c <CODEC_IO_Write>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4413      	add	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	f240 127f 	movw	r2, #383	; 0x17f
 8004fd6:	2127      	movs	r1, #39	; 0x27
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fb2f 	bl	800563c <CODEC_IO_Write>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e059      	b.n	800509e <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8004fea:	797b      	ldrb	r3, [r7, #5]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d109      	bne.n	8005004 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 f8bb 	bl	8005170 <wm8994_SetMute>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	e04c      	b.n	800509e <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	2100      	movs	r1, #0
 8005008:	4618      	mov	r0, r3
 800500a:	f000 f8b1 	bl	8005170 <wm8994_SetMute>
 800500e:	4602      	mov	r2, r0
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8005016:	88fb      	ldrh	r3, [r7, #6]
 8005018:	b2d8      	uxtb	r0, r3
 800501a:	7afb      	ldrb	r3, [r7, #11]
 800501c:	b21b      	sxth	r3, r3
 800501e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005022:	b21b      	sxth	r3, r3
 8005024:	b29b      	uxth	r3, r3
 8005026:	461a      	mov	r2, r3
 8005028:	211c      	movs	r1, #28
 800502a:	f000 fb07 	bl	800563c <CODEC_IO_Write>
 800502e:	4603      	mov	r3, r0
 8005030:	461a      	mov	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4413      	add	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8005038:	88fb      	ldrh	r3, [r7, #6]
 800503a:	b2d8      	uxtb	r0, r3
 800503c:	7afb      	ldrb	r3, [r7, #11]
 800503e:	b21b      	sxth	r3, r3
 8005040:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005044:	b21b      	sxth	r3, r3
 8005046:	b29b      	uxth	r3, r3
 8005048:	461a      	mov	r2, r3
 800504a:	211d      	movs	r1, #29
 800504c:	f000 faf6 	bl	800563c <CODEC_IO_Write>
 8005050:	4603      	mov	r3, r0
 8005052:	461a      	mov	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	b2d8      	uxtb	r0, r3
 800505e:	7afb      	ldrb	r3, [r7, #11]
 8005060:	b21b      	sxth	r3, r3
 8005062:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005066:	b21b      	sxth	r3, r3
 8005068:	b29b      	uxth	r3, r3
 800506a:	461a      	mov	r2, r3
 800506c:	2126      	movs	r1, #38	; 0x26
 800506e:	f000 fae5 	bl	800563c <CODEC_IO_Write>
 8005072:	4603      	mov	r3, r0
 8005074:	461a      	mov	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 800507c:	88fb      	ldrh	r3, [r7, #6]
 800507e:	b2d8      	uxtb	r0, r3
 8005080:	7afb      	ldrb	r3, [r7, #11]
 8005082:	b21b      	sxth	r3, r3
 8005084:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005088:	b21b      	sxth	r3, r3
 800508a:	b29b      	uxth	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	2127      	movs	r1, #39	; 0x27
 8005090:	f000 fad4 	bl	800563c <CODEC_IO_Write>
 8005094:	4603      	mov	r3, r0
 8005096:	461a      	mov	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 800509e:	4b33      	ldr	r3, [pc, #204]	; (800516c <wm8994_SetVolume+0x244>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d059      	beq.n	800515a <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80050a6:	797b      	ldrb	r3, [r7, #5]
 80050a8:	2b63      	cmp	r3, #99	; 0x63
 80050aa:	d80c      	bhi.n	80050c6 <wm8994_SetVolume+0x19e>
 80050ac:	797a      	ldrb	r2, [r7, #5]
 80050ae:	4613      	mov	r3, r2
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	4a2b      	ldr	r2, [pc, #172]	; (8005164 <wm8994_SetVolume+0x23c>)
 80050b8:	fb82 1203 	smull	r1, r2, r2, r3
 80050bc:	1152      	asrs	r2, r2, #5
 80050be:	17db      	asrs	r3, r3, #31
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	e000      	b.n	80050c8 <wm8994_SetVolume+0x1a0>
 80050c6:	23ef      	movs	r3, #239	; 0xef
 80050c8:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80050ca:	88fb      	ldrh	r3, [r7, #6]
 80050cc:	b2d8      	uxtb	r0, r3
 80050ce:	7afb      	ldrb	r3, [r7, #11]
 80050d0:	b21b      	sxth	r3, r3
 80050d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d6:	b21b      	sxth	r3, r3
 80050d8:	b29b      	uxth	r3, r3
 80050da:	461a      	mov	r2, r3
 80050dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050e0:	f000 faac 	bl	800563c <CODEC_IO_Write>
 80050e4:	4603      	mov	r3, r0
 80050e6:	461a      	mov	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80050ee:	88fb      	ldrh	r3, [r7, #6]
 80050f0:	b2d8      	uxtb	r0, r3
 80050f2:	7afb      	ldrb	r3, [r7, #11]
 80050f4:	b21b      	sxth	r3, r3
 80050f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050fa:	b21b      	sxth	r3, r3
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	461a      	mov	r2, r3
 8005100:	f240 4101 	movw	r1, #1025	; 0x401
 8005104:	f000 fa9a 	bl	800563c <CODEC_IO_Write>
 8005108:	4603      	mov	r3, r0
 800510a:	461a      	mov	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8005112:	88fb      	ldrh	r3, [r7, #6]
 8005114:	b2d8      	uxtb	r0, r3
 8005116:	7afb      	ldrb	r3, [r7, #11]
 8005118:	b21b      	sxth	r3, r3
 800511a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800511e:	b21b      	sxth	r3, r3
 8005120:	b29b      	uxth	r3, r3
 8005122:	461a      	mov	r2, r3
 8005124:	f240 4104 	movw	r1, #1028	; 0x404
 8005128:	f000 fa88 	bl	800563c <CODEC_IO_Write>
 800512c:	4603      	mov	r3, r0
 800512e:	461a      	mov	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8005136:	88fb      	ldrh	r3, [r7, #6]
 8005138:	b2d8      	uxtb	r0, r3
 800513a:	7afb      	ldrb	r3, [r7, #11]
 800513c:	b21b      	sxth	r3, r3
 800513e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005142:	b21b      	sxth	r3, r3
 8005144:	b29b      	uxth	r3, r3
 8005146:	461a      	mov	r2, r3
 8005148:	f240 4105 	movw	r1, #1029	; 0x405
 800514c:	f000 fa76 	bl	800563c <CODEC_IO_Write>
 8005150:	4603      	mov	r3, r0
 8005152:	461a      	mov	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800515a:	68fb      	ldr	r3, [r7, #12]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	51eb851f 	.word	0x51eb851f
 8005168:	20000c20 	.word	0x20000c20
 800516c:	20000c24 	.word	0x20000c24

08005170 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	4603      	mov	r3, r0
 8005178:	6039      	str	r1, [r7, #0]
 800517a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8005180:	4b21      	ldr	r3, [pc, #132]	; (8005208 <wm8994_SetMute+0x98>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d039      	beq.n	80051fc <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d11c      	bne.n	80051c8 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	b2db      	uxtb	r3, r3
 8005192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005196:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fa4e 	bl	800563c <CODEC_IO_Write>
 80051a0:	4603      	mov	r3, r0
 80051a2:	461a      	mov	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4413      	add	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80051aa:	88fb      	ldrh	r3, [r7, #6]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051b2:	f240 4122 	movw	r1, #1058	; 0x422
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fa40 	bl	800563c <CODEC_IO_Write>
 80051bc:	4603      	mov	r3, r0
 80051be:	461a      	mov	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	e019      	b.n	80051fc <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2210      	movs	r2, #16
 80051ce:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fa32 	bl	800563c <CODEC_IO_Write>
 80051d8:	4603      	mov	r3, r0
 80051da:	461a      	mov	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2210      	movs	r2, #16
 80051e8:	f240 4122 	movw	r1, #1058	; 0x422
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fa25 	bl	800563c <CODEC_IO_Write>
 80051f2:	4603      	mov	r3, r0
 80051f4:	461a      	mov	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4413      	add	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80051fc:	68fb      	ldr	r3, [r7, #12]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20000c20 	.word	0x20000c20

0800520c <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	460a      	mov	r2, r1
 8005216:	80fb      	strh	r3, [r7, #6]
 8005218:	4613      	mov	r3, r2
 800521a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8005220:	797b      	ldrb	r3, [r7, #5]
 8005222:	2b03      	cmp	r3, #3
 8005224:	f000 808c 	beq.w	8005340 <wm8994_SetOutputMode+0x134>
 8005228:	2b03      	cmp	r3, #3
 800522a:	f300 80cb 	bgt.w	80053c4 <wm8994_SetOutputMode+0x1b8>
 800522e:	2b01      	cmp	r3, #1
 8005230:	d002      	beq.n	8005238 <wm8994_SetOutputMode+0x2c>
 8005232:	2b02      	cmp	r3, #2
 8005234:	d042      	beq.n	80052bc <wm8994_SetOutputMode+0xb0>
 8005236:	e0c5      	b.n	80053c4 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8005238:	88fb      	ldrh	r3, [r7, #6]
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f640 420c 	movw	r2, #3084	; 0xc0c
 8005240:	2105      	movs	r1, #5
 8005242:	4618      	mov	r0, r3
 8005244:	f000 f9fa 	bl	800563c <CODEC_IO_Write>
 8005248:	4603      	mov	r3, r0
 800524a:	461a      	mov	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2200      	movs	r2, #0
 8005258:	f240 6101 	movw	r1, #1537	; 0x601
 800525c:	4618      	mov	r0, r3
 800525e:	f000 f9ed 	bl	800563c <CODEC_IO_Write>
 8005262:	4603      	mov	r3, r0
 8005264:	461a      	mov	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4413      	add	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 800526c:	88fb      	ldrh	r3, [r7, #6]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2200      	movs	r2, #0
 8005272:	f240 6102 	movw	r1, #1538	; 0x602
 8005276:	4618      	mov	r0, r3
 8005278:	f000 f9e0 	bl	800563c <CODEC_IO_Write>
 800527c:	4603      	mov	r3, r0
 800527e:	461a      	mov	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2202      	movs	r2, #2
 800528c:	f240 6104 	movw	r1, #1540	; 0x604
 8005290:	4618      	mov	r0, r3
 8005292:	f000 f9d3 	bl	800563c <CODEC_IO_Write>
 8005296:	4603      	mov	r3, r0
 8005298:	461a      	mov	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2202      	movs	r2, #2
 80052a6:	f240 6105 	movw	r1, #1541	; 0x605
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 f9c6 	bl	800563c <CODEC_IO_Write>
 80052b0:	4603      	mov	r3, r0
 80052b2:	461a      	mov	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]
    break;
 80052ba:	e0c5      	b.n	8005448 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80052bc:	88fb      	ldrh	r3, [r7, #6]
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	f240 3203 	movw	r2, #771	; 0x303
 80052c4:	2105      	movs	r1, #5
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 f9b8 	bl	800563c <CODEC_IO_Write>
 80052cc:	4603      	mov	r3, r0
 80052ce:	461a      	mov	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2201      	movs	r2, #1
 80052dc:	f240 6101 	movw	r1, #1537	; 0x601
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 f9ab 	bl	800563c <CODEC_IO_Write>
 80052e6:	4603      	mov	r3, r0
 80052e8:	461a      	mov	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4413      	add	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80052f0:	88fb      	ldrh	r3, [r7, #6]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2201      	movs	r2, #1
 80052f6:	f240 6102 	movw	r1, #1538	; 0x602
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f99e 	bl	800563c <CODEC_IO_Write>
 8005300:	4603      	mov	r3, r0
 8005302:	461a      	mov	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800530a:	88fb      	ldrh	r3, [r7, #6]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2200      	movs	r2, #0
 8005310:	f240 6104 	movw	r1, #1540	; 0x604
 8005314:	4618      	mov	r0, r3
 8005316:	f000 f991 	bl	800563c <CODEC_IO_Write>
 800531a:	4603      	mov	r3, r0
 800531c:	461a      	mov	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4413      	add	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8005324:	88fb      	ldrh	r3, [r7, #6]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2200      	movs	r2, #0
 800532a:	f240 6105 	movw	r1, #1541	; 0x605
 800532e:	4618      	mov	r0, r3
 8005330:	f000 f984 	bl	800563c <CODEC_IO_Write>
 8005334:	4603      	mov	r3, r0
 8005336:	461a      	mov	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]
    break;
 800533e:	e083      	b.n	8005448 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8005340:	88fb      	ldrh	r3, [r7, #6]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	f640 720f 	movw	r2, #3855	; 0xf0f
 8005348:	2105      	movs	r1, #5
 800534a:	4618      	mov	r0, r3
 800534c:	f000 f976 	bl	800563c <CODEC_IO_Write>
 8005350:	4603      	mov	r3, r0
 8005352:	461a      	mov	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800535a:	88fb      	ldrh	r3, [r7, #6]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2201      	movs	r2, #1
 8005360:	f240 6101 	movw	r1, #1537	; 0x601
 8005364:	4618      	mov	r0, r3
 8005366:	f000 f969 	bl	800563c <CODEC_IO_Write>
 800536a:	4603      	mov	r3, r0
 800536c:	461a      	mov	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2201      	movs	r2, #1
 800537a:	f240 6102 	movw	r1, #1538	; 0x602
 800537e:	4618      	mov	r0, r3
 8005380:	f000 f95c 	bl	800563c <CODEC_IO_Write>
 8005384:	4603      	mov	r3, r0
 8005386:	461a      	mov	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2202      	movs	r2, #2
 8005394:	f240 6104 	movw	r1, #1540	; 0x604
 8005398:	4618      	mov	r0, r3
 800539a:	f000 f94f 	bl	800563c <CODEC_IO_Write>
 800539e:	4603      	mov	r3, r0
 80053a0:	461a      	mov	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80053a8:	88fb      	ldrh	r3, [r7, #6]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2202      	movs	r2, #2
 80053ae:	f240 6105 	movw	r1, #1541	; 0x605
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f942 	bl	800563c <CODEC_IO_Write>
 80053b8:	4603      	mov	r3, r0
 80053ba:	461a      	mov	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
    break;
 80053c2:	e041      	b.n	8005448 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	f240 3203 	movw	r2, #771	; 0x303
 80053cc:	2105      	movs	r1, #5
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 f934 	bl	800563c <CODEC_IO_Write>
 80053d4:	4603      	mov	r3, r0
 80053d6:	461a      	mov	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4413      	add	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80053de:	88fb      	ldrh	r3, [r7, #6]
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2201      	movs	r2, #1
 80053e4:	f240 6101 	movw	r1, #1537	; 0x601
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 f927 	bl	800563c <CODEC_IO_Write>
 80053ee:	4603      	mov	r3, r0
 80053f0:	461a      	mov	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4413      	add	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80053f8:	88fb      	ldrh	r3, [r7, #6]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2201      	movs	r2, #1
 80053fe:	f240 6102 	movw	r1, #1538	; 0x602
 8005402:	4618      	mov	r0, r3
 8005404:	f000 f91a 	bl	800563c <CODEC_IO_Write>
 8005408:	4603      	mov	r3, r0
 800540a:	461a      	mov	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4413      	add	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8005412:	88fb      	ldrh	r3, [r7, #6]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2200      	movs	r2, #0
 8005418:	f240 6104 	movw	r1, #1540	; 0x604
 800541c:	4618      	mov	r0, r3
 800541e:	f000 f90d 	bl	800563c <CODEC_IO_Write>
 8005422:	4603      	mov	r3, r0
 8005424:	461a      	mov	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4413      	add	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800542c:	88fb      	ldrh	r3, [r7, #6]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2200      	movs	r2, #0
 8005432:	f240 6105 	movw	r1, #1541	; 0x605
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f900 	bl	800563c <CODEC_IO_Write>
 800543c:	4603      	mov	r3, r0
 800543e:	461a      	mov	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
    break;    
 8005446:	bf00      	nop
  }  
  return counter;
 8005448:	68fb      	ldr	r3, [r7, #12]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	4603      	mov	r3, r0
 800545c:	6039      	str	r1, [r7, #0]
 800545e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	4a64      	ldr	r2, [pc, #400]	; (80055f8 <wm8994_SetFrequency+0x1a4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d079      	beq.n	8005560 <wm8994_SetFrequency+0x10c>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	4a62      	ldr	r2, [pc, #392]	; (80055f8 <wm8994_SetFrequency+0x1a4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	f200 80ad 	bhi.w	80055d0 <wm8994_SetFrequency+0x17c>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800547c:	4293      	cmp	r3, r2
 800547e:	d061      	beq.n	8005544 <wm8994_SetFrequency+0xf0>
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8005486:	4293      	cmp	r3, r2
 8005488:	f200 80a2 	bhi.w	80055d0 <wm8994_SetFrequency+0x17c>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005492:	4293      	cmp	r3, r2
 8005494:	f000 808e 	beq.w	80055b4 <wm8994_SetFrequency+0x160>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800549e:	4293      	cmp	r3, r2
 80054a0:	f200 8096 	bhi.w	80055d0 <wm8994_SetFrequency+0x17c>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80054aa:	d03d      	beq.n	8005528 <wm8994_SetFrequency+0xd4>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80054b2:	f200 808d 	bhi.w	80055d0 <wm8994_SetFrequency+0x17c>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	f245 6222 	movw	r2, #22050	; 0x5622
 80054bc:	4293      	cmp	r3, r2
 80054be:	d06b      	beq.n	8005598 <wm8994_SetFrequency+0x144>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	f245 6222 	movw	r2, #22050	; 0x5622
 80054c6:	4293      	cmp	r3, r2
 80054c8:	f200 8082 	bhi.w	80055d0 <wm8994_SetFrequency+0x17c>
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80054d2:	d01b      	beq.n	800550c <wm8994_SetFrequency+0xb8>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80054da:	d879      	bhi.n	80055d0 <wm8994_SetFrequency+0x17c>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80054e2:	d005      	beq.n	80054f0 <wm8994_SetFrequency+0x9c>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	f642 3211 	movw	r2, #11025	; 0x2b11
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d046      	beq.n	800557c <wm8994_SetFrequency+0x128>
 80054ee:	e06f      	b.n	80055d0 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80054f0:	88fb      	ldrh	r3, [r7, #6]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2203      	movs	r2, #3
 80054f6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 f89e 	bl	800563c <CODEC_IO_Write>
 8005500:	4603      	mov	r3, r0
 8005502:	461a      	mov	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
    break;
 800550a:	e06f      	b.n	80055ec <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800550c:	88fb      	ldrh	r3, [r7, #6]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2233      	movs	r2, #51	; 0x33
 8005512:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005516:	4618      	mov	r0, r3
 8005518:	f000 f890 	bl	800563c <CODEC_IO_Write>
 800551c:	4603      	mov	r3, r0
 800551e:	461a      	mov	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
    break;
 8005526:	e061      	b.n	80055ec <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8005528:	88fb      	ldrh	r3, [r7, #6]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2263      	movs	r2, #99	; 0x63
 800552e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f882 	bl	800563c <CODEC_IO_Write>
 8005538:	4603      	mov	r3, r0
 800553a:	461a      	mov	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
    break;
 8005542:	e053      	b.n	80055ec <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8005544:	88fb      	ldrh	r3, [r7, #6]
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2283      	movs	r2, #131	; 0x83
 800554a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800554e:	4618      	mov	r0, r3
 8005550:	f000 f874 	bl	800563c <CODEC_IO_Write>
 8005554:	4603      	mov	r3, r0
 8005556:	461a      	mov	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
    break;
 800555e:	e045      	b.n	80055ec <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8005560:	88fb      	ldrh	r3, [r7, #6]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	22a3      	movs	r2, #163	; 0xa3
 8005566:	f44f 7104 	mov.w	r1, #528	; 0x210
 800556a:	4618      	mov	r0, r3
 800556c:	f000 f866 	bl	800563c <CODEC_IO_Write>
 8005570:	4603      	mov	r3, r0
 8005572:	461a      	mov	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4413      	add	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
    break;
 800557a:	e037      	b.n	80055ec <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800557c:	88fb      	ldrh	r3, [r7, #6]
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2213      	movs	r2, #19
 8005582:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005586:	4618      	mov	r0, r3
 8005588:	f000 f858 	bl	800563c <CODEC_IO_Write>
 800558c:	4603      	mov	r3, r0
 800558e:	461a      	mov	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
    break;
 8005596:	e029      	b.n	80055ec <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8005598:	88fb      	ldrh	r3, [r7, #6]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2243      	movs	r2, #67	; 0x43
 800559e:	f44f 7104 	mov.w	r1, #528	; 0x210
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 f84a 	bl	800563c <CODEC_IO_Write>
 80055a8:	4603      	mov	r3, r0
 80055aa:	461a      	mov	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
    break;
 80055b2:	e01b      	b.n	80055ec <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80055b4:	88fb      	ldrh	r3, [r7, #6]
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2273      	movs	r2, #115	; 0x73
 80055ba:	f44f 7104 	mov.w	r1, #528	; 0x210
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 f83c 	bl	800563c <CODEC_IO_Write>
 80055c4:	4603      	mov	r3, r0
 80055c6:	461a      	mov	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4413      	add	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]
    break; 
 80055ce:	e00d      	b.n	80055ec <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80055d0:	88fb      	ldrh	r3, [r7, #6]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2283      	movs	r2, #131	; 0x83
 80055d6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 f82e 	bl	800563c <CODEC_IO_Write>
 80055e0:	4603      	mov	r3, r0
 80055e2:	461a      	mov	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]
    break; 
 80055ea:	bf00      	nop
  }
  return counter;
 80055ec:	68fb      	ldr	r3, [r7, #12]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	00017700 	.word	0x00017700

080055fc <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800560a:	88fb      	ldrh	r3, [r7, #6]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2200      	movs	r2, #0
 8005610:	2100      	movs	r1, #0
 8005612:	4618      	mov	r0, r3
 8005614:	f000 f812 	bl	800563c <CODEC_IO_Write>
 8005618:	4603      	mov	r3, r0
 800561a:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <wm8994_Reset+0x38>)
 800561e:	2200      	movs	r2, #0
 8005620:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8005622:	4b05      	ldr	r3, [pc, #20]	; (8005638 <wm8994_Reset+0x3c>)
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]

  return counter;
 8005628:	68fb      	ldr	r3, [r7, #12]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20000c20 	.word	0x20000c20
 8005638:	20000c24 	.word	0x20000c24

0800563c <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	4603      	mov	r3, r0
 8005644:	71fb      	strb	r3, [r7, #7]
 8005646:	460b      	mov	r3, r1
 8005648:	80bb      	strh	r3, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8005652:	887a      	ldrh	r2, [r7, #2]
 8005654:	88b9      	ldrh	r1, [r7, #4]
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	4618      	mov	r0, r3
 800565a:	f7fc feab 	bl	80023b4 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	b2db      	uxtb	r3, r3
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800566c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005670:	480d      	ldr	r0, [pc, #52]	; (80056a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005672:	490e      	ldr	r1, [pc, #56]	; (80056ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005674:	4a0e      	ldr	r2, [pc, #56]	; (80056b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005678:	e002      	b.n	8005680 <LoopCopyDataInit>

0800567a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800567a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800567c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800567e:	3304      	adds	r3, #4

08005680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005684:	d3f9      	bcc.n	800567a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005686:	4a0b      	ldr	r2, [pc, #44]	; (80056b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005688:	4c0b      	ldr	r4, [pc, #44]	; (80056b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800568a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800568c:	e001      	b.n	8005692 <LoopFillZerobss>

0800568e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800568e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005690:	3204      	adds	r2, #4

08005692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005694:	d3fb      	bcc.n	800568e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005696:	f7fe fa5d 	bl	8003b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800569a:	f006 fe07 	bl	800c2ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800569e:	f7fc f85d 	bl	800175c <main>
  bx  lr    
 80056a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80056a4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80056a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056ac:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 80056b0:	0800f604 	.word	0x0800f604
  ldr r2, =_sbss
 80056b4:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 80056b8:	20000cf0 	.word	0x20000cf0

080056bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80056bc:	e7fe      	b.n	80056bc <ADC_IRQHandler>

080056be <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056c2:	2003      	movs	r0, #3
 80056c4:	f000 f91d 	bl	8005902 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80056c8:	200f      	movs	r0, #15
 80056ca:	f7fe f915 	bl	80038f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80056ce:	f7fe f8eb 	bl	80038a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056dc:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <HAL_IncTick+0x20>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	4b06      	ldr	r3, [pc, #24]	; (80056fc <HAL_IncTick+0x24>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4413      	add	r3, r2
 80056e8:	4a04      	ldr	r2, [pc, #16]	; (80056fc <HAL_IncTick+0x24>)
 80056ea:	6013      	str	r3, [r2, #0]
}
 80056ec:	bf00      	nop
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	2000007c 	.word	0x2000007c
 80056fc:	20000c28 	.word	0x20000c28

08005700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  return uwTick;
 8005704:	4b03      	ldr	r3, [pc, #12]	; (8005714 <HAL_GetTick+0x14>)
 8005706:	681b      	ldr	r3, [r3, #0]
}
 8005708:	4618      	mov	r0, r3
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	20000c28 	.word	0x20000c28

08005718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005720:	f7ff ffee 	bl	8005700 <HAL_GetTick>
 8005724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005730:	d005      	beq.n	800573e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005732:	4b0a      	ldr	r3, [pc, #40]	; (800575c <HAL_Delay+0x44>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4413      	add	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800573e:	bf00      	nop
 8005740:	f7ff ffde 	bl	8005700 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	429a      	cmp	r2, r3
 800574e:	d8f7      	bhi.n	8005740 <HAL_Delay+0x28>
  {
  }
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	2000007c 	.word	0x2000007c

08005760 <__NVIC_SetPriorityGrouping>:
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005770:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <__NVIC_SetPriorityGrouping+0x40>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800577c:	4013      	ands	r3, r2
 800577e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005788:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <__NVIC_SetPriorityGrouping+0x44>)
 800578a:	4313      	orrs	r3, r2
 800578c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800578e:	4a04      	ldr	r2, [pc, #16]	; (80057a0 <__NVIC_SetPriorityGrouping+0x40>)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	60d3      	str	r3, [r2, #12]
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	e000ed00 	.word	0xe000ed00
 80057a4:	05fa0000 	.word	0x05fa0000

080057a8 <__NVIC_GetPriorityGrouping>:
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057ac:	4b04      	ldr	r3, [pc, #16]	; (80057c0 <__NVIC_GetPriorityGrouping+0x18>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	0a1b      	lsrs	r3, r3, #8
 80057b2:	f003 0307 	and.w	r3, r3, #7
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	e000ed00 	.word	0xe000ed00

080057c4 <__NVIC_EnableIRQ>:
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	4603      	mov	r3, r0
 80057cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	db0b      	blt.n	80057ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	f003 021f 	and.w	r2, r3, #31
 80057dc:	4907      	ldr	r1, [pc, #28]	; (80057fc <__NVIC_EnableIRQ+0x38>)
 80057de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e2:	095b      	lsrs	r3, r3, #5
 80057e4:	2001      	movs	r0, #1
 80057e6:	fa00 f202 	lsl.w	r2, r0, r2
 80057ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	e000e100 	.word	0xe000e100

08005800 <__NVIC_DisableIRQ>:
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	4603      	mov	r3, r0
 8005808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800580a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800580e:	2b00      	cmp	r3, #0
 8005810:	db12      	blt.n	8005838 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	f003 021f 	and.w	r2, r3, #31
 8005818:	490a      	ldr	r1, [pc, #40]	; (8005844 <__NVIC_DisableIRQ+0x44>)
 800581a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	2001      	movs	r0, #1
 8005822:	fa00 f202 	lsl.w	r2, r0, r2
 8005826:	3320      	adds	r3, #32
 8005828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800582c:	f3bf 8f4f 	dsb	sy
}
 8005830:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005832:	f3bf 8f6f 	isb	sy
}
 8005836:	bf00      	nop
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	e000e100 	.word	0xe000e100

08005848 <__NVIC_SetPriority>:
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	6039      	str	r1, [r7, #0]
 8005852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005858:	2b00      	cmp	r3, #0
 800585a:	db0a      	blt.n	8005872 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	b2da      	uxtb	r2, r3
 8005860:	490c      	ldr	r1, [pc, #48]	; (8005894 <__NVIC_SetPriority+0x4c>)
 8005862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005866:	0112      	lsls	r2, r2, #4
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	440b      	add	r3, r1
 800586c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005870:	e00a      	b.n	8005888 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	b2da      	uxtb	r2, r3
 8005876:	4908      	ldr	r1, [pc, #32]	; (8005898 <__NVIC_SetPriority+0x50>)
 8005878:	79fb      	ldrb	r3, [r7, #7]
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	3b04      	subs	r3, #4
 8005880:	0112      	lsls	r2, r2, #4
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	440b      	add	r3, r1
 8005886:	761a      	strb	r2, [r3, #24]
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	e000e100 	.word	0xe000e100
 8005898:	e000ed00 	.word	0xe000ed00

0800589c <NVIC_EncodePriority>:
{
 800589c:	b480      	push	{r7}
 800589e:	b089      	sub	sp, #36	; 0x24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	f1c3 0307 	rsb	r3, r3, #7
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	bf28      	it	cs
 80058ba:	2304      	movcs	r3, #4
 80058bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	3304      	adds	r3, #4
 80058c2:	2b06      	cmp	r3, #6
 80058c4:	d902      	bls.n	80058cc <NVIC_EncodePriority+0x30>
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	3b03      	subs	r3, #3
 80058ca:	e000      	b.n	80058ce <NVIC_EncodePriority+0x32>
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058d0:	f04f 32ff 	mov.w	r2, #4294967295
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	fa02 f303 	lsl.w	r3, r2, r3
 80058da:	43da      	mvns	r2, r3
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	401a      	ands	r2, r3
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058e4:	f04f 31ff 	mov.w	r1, #4294967295
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	fa01 f303 	lsl.w	r3, r1, r3
 80058ee:	43d9      	mvns	r1, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058f4:	4313      	orrs	r3, r2
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3724      	adds	r7, #36	; 0x24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b082      	sub	sp, #8
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7ff ff28 	bl	8005760 <__NVIC_SetPriorityGrouping>
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	4603      	mov	r3, r0
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005926:	2300      	movs	r3, #0
 8005928:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800592a:	f7ff ff3d 	bl	80057a8 <__NVIC_GetPriorityGrouping>
 800592e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	68b9      	ldr	r1, [r7, #8]
 8005934:	6978      	ldr	r0, [r7, #20]
 8005936:	f7ff ffb1 	bl	800589c <NVIC_EncodePriority>
 800593a:	4602      	mov	r2, r0
 800593c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005940:	4611      	mov	r1, r2
 8005942:	4618      	mov	r0, r3
 8005944:	f7ff ff80 	bl	8005848 <__NVIC_SetPriority>
}
 8005948:	bf00      	nop
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800595a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff ff30 	bl	80057c4 <__NVIC_EnableIRQ>
}
 8005964:	bf00      	nop
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	4603      	mov	r3, r0
 8005974:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800597a:	4618      	mov	r0, r3
 800597c:	f7ff ff40 	bl	8005800 <__NVIC_DisableIRQ>
}
 8005980:	bf00      	nop
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800599a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800599e:	d120      	bne.n	80059e2 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ae:	d118      	bne.n	80059e2 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2204      	movs	r2, #4
 80059b4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f043 0201 	orr.w	r2, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80059ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059da:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f82d 	bl	8005a3c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059f0:	d120      	bne.n	8005a34 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a00:	d118      	bne.n	8005a34 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2204      	movs	r2, #4
 8005a06:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	f043 0202 	orr.w	r2, r3, #2
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005a1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005a2c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f80e 	bl	8005a50 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005a34:	bf00      	nop
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a70:	f7ff fe46 	bl	8005700 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e099      	b.n	8005bb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0201 	bic.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005aa0:	e00f      	b.n	8005ac2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005aa2:	f7ff fe2d 	bl	8005700 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b05      	cmp	r3, #5
 8005aae:	d908      	bls.n	8005ac2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2203      	movs	r2, #3
 8005aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e078      	b.n	8005bb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e8      	bne.n	8005aa2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4b38      	ldr	r3, [pc, #224]	; (8005bbc <HAL_DMA_Init+0x158>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d107      	bne.n	8005b2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	4313      	orrs	r3, r2
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f023 0307 	bic.w	r3, r3, #7
 8005b42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d117      	bne.n	8005b86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00e      	beq.n	8005b86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fb67 	bl	800623c <DMA_CheckFifoParam>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2240      	movs	r2, #64	; 0x40
 8005b78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005b82:	2301      	movs	r3, #1
 8005b84:	e016      	b.n	8005bb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fb1e 	bl	80061d0 <DMA_CalcBaseAndBitshift>
 8005b94:	4603      	mov	r3, r0
 8005b96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9c:	223f      	movs	r2, #63	; 0x3f
 8005b9e:	409a      	lsls	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	f010803f 	.word	0xf010803f

08005bc0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e050      	b.n	8005c74 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d101      	bne.n	8005be2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005bde:	2302      	movs	r3, #2
 8005be0:	e048      	b.n	8005c74 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0201 	bic.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2200      	movs	r2, #0
 8005c08:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2200      	movs	r2, #0
 8005c18:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2221      	movs	r2, #33	; 0x21
 8005c20:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fad4 	bl	80061d0 <DMA_CalcBaseAndBitshift>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c30:	223f      	movs	r2, #63	; 0x3f
 8005c32:	409a      	lsls	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d101      	bne.n	8005ca2 <HAL_DMA_Start_IT+0x26>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e048      	b.n	8005d34 <HAL_DMA_Start_IT+0xb8>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d137      	bne.n	8005d26 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 fa52 	bl	8006174 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd4:	223f      	movs	r2, #63	; 0x3f
 8005cd6:	409a      	lsls	r2, r3
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0216 	orr.w	r2, r2, #22
 8005cea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695a      	ldr	r2, [r3, #20]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005cfa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d007      	beq.n	8005d14 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0208 	orr.w	r2, r2, #8
 8005d12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0201 	orr.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	e005      	b.n	8005d32 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d2e:	2302      	movs	r3, #2
 8005d30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d48:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005d4a:	f7ff fcd9 	bl	8005700 <HAL_GetTick>
 8005d4e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d008      	beq.n	8005d6e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2280      	movs	r2, #128	; 0x80
 8005d60:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e052      	b.n	8005e14 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0216 	bic.w	r2, r2, #22
 8005d7c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	695a      	ldr	r2, [r3, #20]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d8c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d103      	bne.n	8005d9e <HAL_DMA_Abort+0x62>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d007      	beq.n	8005dae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0208 	bic.w	r2, r2, #8
 8005dac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0201 	bic.w	r2, r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dbe:	e013      	b.n	8005de8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dc0:	f7ff fc9e 	bl	8005700 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b05      	cmp	r3, #5
 8005dcc:	d90c      	bls.n	8005de8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2203      	movs	r2, #3
 8005dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e015      	b.n	8005e14 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1e4      	bne.n	8005dc0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dfa:	223f      	movs	r2, #63	; 0x3f
 8005dfc:	409a      	lsls	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d004      	beq.n	8005e3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2280      	movs	r2, #128	; 0x80
 8005e34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e00c      	b.n	8005e54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2205      	movs	r2, #5
 8005e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 0201 	bic.w	r2, r2, #1
 8005e50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005e6c:	4b8e      	ldr	r3, [pc, #568]	; (80060a8 <HAL_DMA_IRQHandler+0x248>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a8e      	ldr	r2, [pc, #568]	; (80060ac <HAL_DMA_IRQHandler+0x24c>)
 8005e72:	fba2 2303 	umull	r2, r3, r2, r3
 8005e76:	0a9b      	lsrs	r3, r3, #10
 8005e78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e8a:	2208      	movs	r2, #8
 8005e8c:	409a      	lsls	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4013      	ands	r3, r2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d01a      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d013      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0204 	bic.w	r2, r2, #4
 8005eb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb8:	2208      	movs	r2, #8
 8005eba:	409a      	lsls	r2, r3
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec4:	f043 0201 	orr.w	r2, r3, #1
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	409a      	lsls	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d012      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00b      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eee:	2201      	movs	r2, #1
 8005ef0:	409a      	lsls	r2, r3
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efa:	f043 0202 	orr.w	r2, r3, #2
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f06:	2204      	movs	r2, #4
 8005f08:	409a      	lsls	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d012      	beq.n	8005f38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00b      	beq.n	8005f38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f24:	2204      	movs	r2, #4
 8005f26:	409a      	lsls	r2, r3
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f30:	f043 0204 	orr.w	r2, r3, #4
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f3c:	2210      	movs	r2, #16
 8005f3e:	409a      	lsls	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4013      	ands	r3, r2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d043      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d03c      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f5a:	2210      	movs	r2, #16
 8005f5c:	409a      	lsls	r2, r3
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d018      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d108      	bne.n	8005f90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d024      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	4798      	blx	r3
 8005f8e:	e01f      	b.n	8005fd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01b      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	4798      	blx	r3
 8005fa0:	e016      	b.n	8005fd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d107      	bne.n	8005fc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0208 	bic.w	r2, r2, #8
 8005fbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	409a      	lsls	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 808f 	beq.w	8006100 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 8087 	beq.w	8006100 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	409a      	lsls	r2, r3
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b05      	cmp	r3, #5
 8006008:	d136      	bne.n	8006078 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0216 	bic.w	r2, r2, #22
 8006018:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695a      	ldr	r2, [r3, #20]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006028:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	2b00      	cmp	r3, #0
 8006030:	d103      	bne.n	800603a <HAL_DMA_IRQHandler+0x1da>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006036:	2b00      	cmp	r3, #0
 8006038:	d007      	beq.n	800604a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0208 	bic.w	r2, r2, #8
 8006048:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604e:	223f      	movs	r2, #63	; 0x3f
 8006050:	409a      	lsls	r2, r3
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606a:	2b00      	cmp	r3, #0
 800606c:	d07e      	beq.n	800616c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	4798      	blx	r3
        }
        return;
 8006076:	e079      	b.n	800616c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d01d      	beq.n	80060c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10d      	bne.n	80060b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006098:	2b00      	cmp	r3, #0
 800609a:	d031      	beq.n	8006100 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	4798      	blx	r3
 80060a4:	e02c      	b.n	8006100 <HAL_DMA_IRQHandler+0x2a0>
 80060a6:	bf00      	nop
 80060a8:	20000040 	.word	0x20000040
 80060ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d023      	beq.n	8006100 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	4798      	blx	r3
 80060c0:	e01e      	b.n	8006100 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10f      	bne.n	80060f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0210 	bic.w	r2, r2, #16
 80060de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d003      	beq.n	8006100 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006104:	2b00      	cmp	r3, #0
 8006106:	d032      	beq.n	800616e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d022      	beq.n	800615a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2205      	movs	r2, #5
 8006118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0201 	bic.w	r2, r2, #1
 800612a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	3301      	adds	r3, #1
 8006130:	60bb      	str	r3, [r7, #8]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	429a      	cmp	r2, r3
 8006136:	d307      	bcc.n	8006148 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f2      	bne.n	800612c <HAL_DMA_IRQHandler+0x2cc>
 8006146:	e000      	b.n	800614a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006148:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800615e:	2b00      	cmp	r3, #0
 8006160:	d005      	beq.n	800616e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	4798      	blx	r3
 800616a:	e000      	b.n	800616e <HAL_DMA_IRQHandler+0x30e>
        return;
 800616c:	bf00      	nop
    }
  }
}
 800616e:	3718      	adds	r7, #24
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
 8006180:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006190:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	d108      	bne.n	80061b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80061b2:	e007      	b.n	80061c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	60da      	str	r2, [r3, #12]
}
 80061c4:	bf00      	nop
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	3b10      	subs	r3, #16
 80061e0:	4a13      	ldr	r2, [pc, #76]	; (8006230 <DMA_CalcBaseAndBitshift+0x60>)
 80061e2:	fba2 2303 	umull	r2, r3, r2, r3
 80061e6:	091b      	lsrs	r3, r3, #4
 80061e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80061ea:	4a12      	ldr	r2, [pc, #72]	; (8006234 <DMA_CalcBaseAndBitshift+0x64>)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d908      	bls.n	8006210 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	4b0c      	ldr	r3, [pc, #48]	; (8006238 <DMA_CalcBaseAndBitshift+0x68>)
 8006206:	4013      	ands	r3, r2
 8006208:	1d1a      	adds	r2, r3, #4
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	659a      	str	r2, [r3, #88]	; 0x58
 800620e:	e006      	b.n	800621e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	4b08      	ldr	r3, [pc, #32]	; (8006238 <DMA_CalcBaseAndBitshift+0x68>)
 8006218:	4013      	ands	r3, r2
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	aaaaaaab 	.word	0xaaaaaaab
 8006234:	0800f5b8 	.word	0x0800f5b8
 8006238:	fffffc00 	.word	0xfffffc00

0800623c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d11f      	bne.n	8006296 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2b03      	cmp	r3, #3
 800625a:	d856      	bhi.n	800630a <DMA_CheckFifoParam+0xce>
 800625c:	a201      	add	r2, pc, #4	; (adr r2, 8006264 <DMA_CheckFifoParam+0x28>)
 800625e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006262:	bf00      	nop
 8006264:	08006275 	.word	0x08006275
 8006268:	08006287 	.word	0x08006287
 800626c:	08006275 	.word	0x08006275
 8006270:	0800630b 	.word	0x0800630b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d046      	beq.n	800630e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006284:	e043      	b.n	800630e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800628e:	d140      	bne.n	8006312 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006294:	e03d      	b.n	8006312 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800629e:	d121      	bne.n	80062e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d837      	bhi.n	8006316 <DMA_CheckFifoParam+0xda>
 80062a6:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <DMA_CheckFifoParam+0x70>)
 80062a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ac:	080062bd 	.word	0x080062bd
 80062b0:	080062c3 	.word	0x080062c3
 80062b4:	080062bd 	.word	0x080062bd
 80062b8:	080062d5 	.word	0x080062d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	73fb      	strb	r3, [r7, #15]
      break;
 80062c0:	e030      	b.n	8006324 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d025      	beq.n	800631a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062d2:	e022      	b.n	800631a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062dc:	d11f      	bne.n	800631e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80062e2:	e01c      	b.n	800631e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d903      	bls.n	80062f2 <DMA_CheckFifoParam+0xb6>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d003      	beq.n	80062f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80062f0:	e018      	b.n	8006324 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	73fb      	strb	r3, [r7, #15]
      break;
 80062f6:	e015      	b.n	8006324 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00e      	beq.n	8006322 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	73fb      	strb	r3, [r7, #15]
      break;
 8006308:	e00b      	b.n	8006322 <DMA_CheckFifoParam+0xe6>
      break;
 800630a:	bf00      	nop
 800630c:	e00a      	b.n	8006324 <DMA_CheckFifoParam+0xe8>
      break;
 800630e:	bf00      	nop
 8006310:	e008      	b.n	8006324 <DMA_CheckFifoParam+0xe8>
      break;
 8006312:	bf00      	nop
 8006314:	e006      	b.n	8006324 <DMA_CheckFifoParam+0xe8>
      break;
 8006316:	bf00      	nop
 8006318:	e004      	b.n	8006324 <DMA_CheckFifoParam+0xe8>
      break;
 800631a:	bf00      	nop
 800631c:	e002      	b.n	8006324 <DMA_CheckFifoParam+0xe8>
      break;   
 800631e:	bf00      	nop
 8006320:	e000      	b.n	8006324 <DMA_CheckFifoParam+0xe8>
      break;
 8006322:	bf00      	nop
    }
  } 
  
  return status; 
 8006324:	7bfb      	ldrb	r3, [r7, #15]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop

08006334 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e039      	b.n	80063ba <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fa f95c 	bl	8000618 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006384:	f023 0107 	bic.w	r1, r3, #7
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800639a:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <HAL_DMA2D_Init+0x90>)
 800639c:	4013      	ands	r3, r2
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	68d1      	ldr	r1, [r2, #12]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6812      	ldr	r2, [r2, #0]
 80063a6:	430b      	orrs	r3, r1
 80063a8:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	ffffc000 	.word	0xffffc000

080063c8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af02      	add	r7, sp, #8
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
 80063d4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <HAL_DMA2D_Start+0x1c>
 80063e0:	2302      	movs	r3, #2
 80063e2:	e018      	b.n	8006416 <HAL_DMA2D_Start+0x4e>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 fa98 	bl	8006934 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b086      	sub	sp, #24
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d056      	beq.n	80064e8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800643a:	f7ff f961 	bl	8005700 <HAL_GetTick>
 800643e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006440:	e04b      	b.n	80064da <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006450:	2b00      	cmp	r3, #0
 8006452:	d023      	beq.n	800649c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b00      	cmp	r3, #0
 800645c:	d005      	beq.n	800646a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006462:	f043 0202 	orr.w	r2, r3, #2
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006478:	f043 0201 	orr.w	r2, r3, #1
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2221      	movs	r2, #33	; 0x21
 8006486:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2204      	movs	r2, #4
 800648c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e0a5      	b.n	80065e8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a2:	d01a      	beq.n	80064da <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064a4:	f7ff f92c 	bl	8005700 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d302      	bcc.n	80064ba <HAL_DMA2D_PollForTransfer+0x9c>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10f      	bne.n	80064da <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064be:	f043 0220 	orr.w	r2, r3, #32
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2203      	movs	r2, #3
 80064ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e086      	b.n	80065e8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d0ac      	beq.n	8006442 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d061      	beq.n	80065ce <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800650a:	f7ff f8f9 	bl	8005700 <HAL_GetTick>
 800650e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006510:	e056      	b.n	80065c0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006520:	2b00      	cmp	r3, #0
 8006522:	d02e      	beq.n	8006582 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	2b00      	cmp	r3, #0
 800652c:	d005      	beq.n	800653a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006532:	f043 0204 	orr.w	r2, r3, #4
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006548:	f043 0202 	orr.w	r2, r3, #2
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d005      	beq.n	8006566 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655e:	f043 0201 	orr.w	r2, r3, #1
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2229      	movs	r2, #41	; 0x29
 800656c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2204      	movs	r2, #4
 8006572:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e032      	b.n	80065e8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006588:	d01a      	beq.n	80065c0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800658a:	f7ff f8b9 	bl	8005700 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d302      	bcc.n	80065a0 <HAL_DMA2D_PollForTransfer+0x182>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10f      	bne.n	80065c0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a4:	f043 0220 	orr.w	r2, r3, #32
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2203      	movs	r2, #3
 80065b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e013      	b.n	80065e8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f003 0310 	and.w	r3, r3, #16
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0a1      	beq.n	8006512 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2212      	movs	r2, #18
 80065d4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3718      	adds	r7, #24
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d026      	beq.n	8006660 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006618:	2b00      	cmp	r3, #0
 800661a:	d021      	beq.n	8006660 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800662a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006630:	f043 0201 	orr.w	r2, r3, #1
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2201      	movs	r2, #1
 800663e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2204      	movs	r2, #4
 8006644:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f003 0320 	and.w	r3, r3, #32
 8006666:	2b00      	cmp	r3, #0
 8006668:	d026      	beq.n	80066b8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d021      	beq.n	80066b8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006682:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2220      	movs	r2, #32
 800668a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006690:	f043 0202 	orr.w	r2, r3, #2
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2204      	movs	r2, #4
 800669c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f003 0308 	and.w	r3, r3, #8
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d026      	beq.n	8006710 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d021      	beq.n	8006710 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066da:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2208      	movs	r2, #8
 80066e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e8:	f043 0204 	orr.w	r2, r3, #4
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2204      	movs	r2, #4
 80066f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f003 0304 	and.w	r3, r3, #4
 8006716:	2b00      	cmp	r3, #0
 8006718:	d013      	beq.n	8006742 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00e      	beq.n	8006742 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006732:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2204      	movs	r2, #4
 800673a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f853 	bl	80067e8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d024      	beq.n	8006796 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006752:	2b00      	cmp	r3, #0
 8006754:	d01f      	beq.n	8006796 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006764:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2202      	movs	r2, #2
 800676c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f003 0310 	and.w	r3, r3, #16
 800679c:	2b00      	cmp	r3, #0
 800679e:	d01f      	beq.n	80067e0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d01a      	beq.n	80067e0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067b8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2210      	movs	r2, #16
 80067c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f80e 	bl	80067fc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80067e0:	bf00      	nop
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006828:	2b01      	cmp	r3, #1
 800682a:	d101      	bne.n	8006830 <HAL_DMA2D_ConfigLayer+0x20>
 800682c:	2302      	movs	r3, #2
 800682e:	e079      	b.n	8006924 <HAL_DMA2D_ConfigLayer+0x114>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	3318      	adds	r3, #24
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	4413      	add	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	041b      	lsls	r3, r3, #16
 8006856:	4313      	orrs	r3, r2
 8006858:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800685a:	4b35      	ldr	r3, [pc, #212]	; (8006930 <HAL_DMA2D_ConfigLayer+0x120>)
 800685c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	2b0a      	cmp	r3, #10
 8006864:	d003      	beq.n	800686e <HAL_DMA2D_ConfigLayer+0x5e>
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	2b09      	cmp	r3, #9
 800686c:	d107      	bne.n	800687e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	e005      	b.n	800688a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	061b      	lsls	r3, r3, #24
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d120      	bne.n	80068d2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	43db      	mvns	r3, r3
 800689a:	ea02 0103 	and.w	r1, r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	6812      	ldr	r2, [r2, #0]
 80068b0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	2b0a      	cmp	r3, #10
 80068b8:	d003      	beq.n	80068c2 <HAL_DMA2D_ConfigLayer+0xb2>
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2b09      	cmp	r3, #9
 80068c0:	d127      	bne.n	8006912 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80068ce:	629a      	str	r2, [r3, #40]	; 0x28
 80068d0:	e01f      	b.n	8006912 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69da      	ldr	r2, [r3, #28]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	43db      	mvns	r3, r3
 80068dc:	ea02 0103 	and.w	r1, r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	6812      	ldr	r2, [r2, #0]
 80068f2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2b0a      	cmp	r3, #10
 80068fa:	d003      	beq.n	8006904 <HAL_DMA2D_ConfigLayer+0xf4>
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	2b09      	cmp	r3, #9
 8006902:	d106      	bne.n	8006912 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006910:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	371c      	adds	r7, #28
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	ff03000f 	.word	0xff03000f

08006934 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006934:	b480      	push	{r7}
 8006936:	b08b      	sub	sp, #44	; 0x2c
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006948:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	041a      	lsls	r2, r3, #16
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	431a      	orrs	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800696c:	d174      	bne.n	8006a58 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006974:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800697c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006984:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	b2db      	uxtb	r3, r3
 800698a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d108      	bne.n	80069a6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	431a      	orrs	r2, r3
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	4313      	orrs	r3, r2
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
 80069a4:	e053      	b.n	8006a4e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d106      	bne.n	80069bc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
 80069ba:	e048      	b.n	8006a4e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d111      	bne.n	80069e8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	0cdb      	lsrs	r3, r3, #19
 80069c8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	0a9b      	lsrs	r3, r3, #10
 80069ce:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	08db      	lsrs	r3, r3, #3
 80069d4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	02db      	lsls	r3, r3, #11
 80069de:	4313      	orrs	r3, r2
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
 80069e6:	e032      	b.n	8006a4e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d117      	bne.n	8006a20 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	0fdb      	lsrs	r3, r3, #31
 80069f4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	0cdb      	lsrs	r3, r3, #19
 80069fa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	0adb      	lsrs	r3, r3, #11
 8006a00:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	08db      	lsrs	r3, r3, #3
 8006a06:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	029b      	lsls	r3, r3, #10
 8006a10:	431a      	orrs	r2, r3
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	03db      	lsls	r3, r3, #15
 8006a16:	4313      	orrs	r3, r2
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a1e:	e016      	b.n	8006a4e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	0f1b      	lsrs	r3, r3, #28
 8006a24:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	0d1b      	lsrs	r3, r3, #20
 8006a2a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	0b1b      	lsrs	r3, r3, #12
 8006a30:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	091b      	lsrs	r3, r3, #4
 8006a36:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	011a      	lsls	r2, r3, #4
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	021b      	lsls	r3, r3, #8
 8006a40:	431a      	orrs	r2, r3
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	031b      	lsls	r3, r3, #12
 8006a46:	4313      	orrs	r3, r2
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a54:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006a56:	e003      	b.n	8006a60 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	60da      	str	r2, [r3, #12]
}
 8006a60:	bf00      	nop
 8006a62:	372c      	adds	r7, #44	; 0x2c
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b089      	sub	sp, #36	; 0x24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006a76:	2300      	movs	r3, #0
 8006a78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006a82:	2300      	movs	r3, #0
 8006a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006a86:	2300      	movs	r3, #0
 8006a88:	61fb      	str	r3, [r7, #28]
 8006a8a:	e175      	b.n	8006d78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	fa02 f303 	lsl.w	r3, r2, r3
 8006a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	f040 8164 	bne.w	8006d72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f003 0303 	and.w	r3, r3, #3
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d005      	beq.n	8006ac2 <HAL_GPIO_Init+0x56>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f003 0303 	and.w	r3, r3, #3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d130      	bne.n	8006b24 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	005b      	lsls	r3, r3, #1
 8006acc:	2203      	movs	r2, #3
 8006ace:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad2:	43db      	mvns	r3, r3
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68da      	ldr	r2, [r3, #12]
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006af8:	2201      	movs	r2, #1
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	fa02 f303 	lsl.w	r3, r2, r3
 8006b00:	43db      	mvns	r3, r3
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	4013      	ands	r3, r2
 8006b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	091b      	lsrs	r3, r3, #4
 8006b0e:	f003 0201 	and.w	r2, r3, #1
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	fa02 f303 	lsl.w	r3, r2, r3
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d017      	beq.n	8006b60 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	2203      	movs	r2, #3
 8006b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b40:	43db      	mvns	r3, r3
 8006b42:	69ba      	ldr	r2, [r7, #24]
 8006b44:	4013      	ands	r3, r2
 8006b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	fa02 f303 	lsl.w	r3, r2, r3
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f003 0303 	and.w	r3, r3, #3
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d123      	bne.n	8006bb4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	08da      	lsrs	r2, r3, #3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3208      	adds	r2, #8
 8006b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	220f      	movs	r2, #15
 8006b84:	fa02 f303 	lsl.w	r3, r2, r3
 8006b88:	43db      	mvns	r3, r3
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	691a      	ldr	r2, [r3, #16]
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f003 0307 	and.w	r3, r3, #7
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	08da      	lsrs	r2, r3, #3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	3208      	adds	r2, #8
 8006bae:	69b9      	ldr	r1, [r7, #24]
 8006bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	005b      	lsls	r3, r3, #1
 8006bbe:	2203      	movs	r2, #3
 8006bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc4:	43db      	mvns	r3, r3
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	4013      	ands	r3, r2
 8006bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f003 0203 	and.w	r2, r3, #3
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 80be 	beq.w	8006d72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bf6:	4b66      	ldr	r3, [pc, #408]	; (8006d90 <HAL_GPIO_Init+0x324>)
 8006bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bfa:	4a65      	ldr	r2, [pc, #404]	; (8006d90 <HAL_GPIO_Init+0x324>)
 8006bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c00:	6453      	str	r3, [r2, #68]	; 0x44
 8006c02:	4b63      	ldr	r3, [pc, #396]	; (8006d90 <HAL_GPIO_Init+0x324>)
 8006c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006c0e:	4a61      	ldr	r2, [pc, #388]	; (8006d94 <HAL_GPIO_Init+0x328>)
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	089b      	lsrs	r3, r3, #2
 8006c14:	3302      	adds	r3, #2
 8006c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	f003 0303 	and.w	r3, r3, #3
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	220f      	movs	r2, #15
 8006c26:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2a:	43db      	mvns	r3, r3
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a58      	ldr	r2, [pc, #352]	; (8006d98 <HAL_GPIO_Init+0x32c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d037      	beq.n	8006caa <HAL_GPIO_Init+0x23e>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a57      	ldr	r2, [pc, #348]	; (8006d9c <HAL_GPIO_Init+0x330>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d031      	beq.n	8006ca6 <HAL_GPIO_Init+0x23a>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a56      	ldr	r2, [pc, #344]	; (8006da0 <HAL_GPIO_Init+0x334>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d02b      	beq.n	8006ca2 <HAL_GPIO_Init+0x236>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a55      	ldr	r2, [pc, #340]	; (8006da4 <HAL_GPIO_Init+0x338>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d025      	beq.n	8006c9e <HAL_GPIO_Init+0x232>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a54      	ldr	r2, [pc, #336]	; (8006da8 <HAL_GPIO_Init+0x33c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d01f      	beq.n	8006c9a <HAL_GPIO_Init+0x22e>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a53      	ldr	r2, [pc, #332]	; (8006dac <HAL_GPIO_Init+0x340>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d019      	beq.n	8006c96 <HAL_GPIO_Init+0x22a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a52      	ldr	r2, [pc, #328]	; (8006db0 <HAL_GPIO_Init+0x344>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d013      	beq.n	8006c92 <HAL_GPIO_Init+0x226>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a51      	ldr	r2, [pc, #324]	; (8006db4 <HAL_GPIO_Init+0x348>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00d      	beq.n	8006c8e <HAL_GPIO_Init+0x222>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a50      	ldr	r2, [pc, #320]	; (8006db8 <HAL_GPIO_Init+0x34c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d007      	beq.n	8006c8a <HAL_GPIO_Init+0x21e>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a4f      	ldr	r2, [pc, #316]	; (8006dbc <HAL_GPIO_Init+0x350>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d101      	bne.n	8006c86 <HAL_GPIO_Init+0x21a>
 8006c82:	2309      	movs	r3, #9
 8006c84:	e012      	b.n	8006cac <HAL_GPIO_Init+0x240>
 8006c86:	230a      	movs	r3, #10
 8006c88:	e010      	b.n	8006cac <HAL_GPIO_Init+0x240>
 8006c8a:	2308      	movs	r3, #8
 8006c8c:	e00e      	b.n	8006cac <HAL_GPIO_Init+0x240>
 8006c8e:	2307      	movs	r3, #7
 8006c90:	e00c      	b.n	8006cac <HAL_GPIO_Init+0x240>
 8006c92:	2306      	movs	r3, #6
 8006c94:	e00a      	b.n	8006cac <HAL_GPIO_Init+0x240>
 8006c96:	2305      	movs	r3, #5
 8006c98:	e008      	b.n	8006cac <HAL_GPIO_Init+0x240>
 8006c9a:	2304      	movs	r3, #4
 8006c9c:	e006      	b.n	8006cac <HAL_GPIO_Init+0x240>
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e004      	b.n	8006cac <HAL_GPIO_Init+0x240>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	e002      	b.n	8006cac <HAL_GPIO_Init+0x240>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e000      	b.n	8006cac <HAL_GPIO_Init+0x240>
 8006caa:	2300      	movs	r3, #0
 8006cac:	69fa      	ldr	r2, [r7, #28]
 8006cae:	f002 0203 	and.w	r2, r2, #3
 8006cb2:	0092      	lsls	r2, r2, #2
 8006cb4:	4093      	lsls	r3, r2
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006cbc:	4935      	ldr	r1, [pc, #212]	; (8006d94 <HAL_GPIO_Init+0x328>)
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	089b      	lsrs	r3, r3, #2
 8006cc2:	3302      	adds	r3, #2
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006cca:	4b3d      	ldr	r3, [pc, #244]	; (8006dc0 <HAL_GPIO_Init+0x354>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	43db      	mvns	r3, r3
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006cee:	4a34      	ldr	r2, [pc, #208]	; (8006dc0 <HAL_GPIO_Init+0x354>)
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006cf4:	4b32      	ldr	r3, [pc, #200]	; (8006dc0 <HAL_GPIO_Init+0x354>)
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	43db      	mvns	r3, r3
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	4013      	ands	r3, r2
 8006d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d003      	beq.n	8006d18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006d18:	4a29      	ldr	r2, [pc, #164]	; (8006dc0 <HAL_GPIO_Init+0x354>)
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006d1e:	4b28      	ldr	r3, [pc, #160]	; (8006dc0 <HAL_GPIO_Init+0x354>)
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	43db      	mvns	r3, r3
 8006d28:	69ba      	ldr	r2, [r7, #24]
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d42:	4a1f      	ldr	r2, [pc, #124]	; (8006dc0 <HAL_GPIO_Init+0x354>)
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d48:	4b1d      	ldr	r3, [pc, #116]	; (8006dc0 <HAL_GPIO_Init+0x354>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	43db      	mvns	r3, r3
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	4013      	ands	r3, r2
 8006d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d003      	beq.n	8006d6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d6c:	4a14      	ldr	r2, [pc, #80]	; (8006dc0 <HAL_GPIO_Init+0x354>)
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	3301      	adds	r3, #1
 8006d76:	61fb      	str	r3, [r7, #28]
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	2b0f      	cmp	r3, #15
 8006d7c:	f67f ae86 	bls.w	8006a8c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006d80:	bf00      	nop
 8006d82:	bf00      	nop
 8006d84:	3724      	adds	r7, #36	; 0x24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	40023800 	.word	0x40023800
 8006d94:	40013800 	.word	0x40013800
 8006d98:	40020000 	.word	0x40020000
 8006d9c:	40020400 	.word	0x40020400
 8006da0:	40020800 	.word	0x40020800
 8006da4:	40020c00 	.word	0x40020c00
 8006da8:	40021000 	.word	0x40021000
 8006dac:	40021400 	.word	0x40021400
 8006db0:	40021800 	.word	0x40021800
 8006db4:	40021c00 	.word	0x40021c00
 8006db8:	40022000 	.word	0x40022000
 8006dbc:	40022400 	.word	0x40022400
 8006dc0:	40013c00 	.word	0x40013c00

08006dc4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006dda:	2300      	movs	r3, #0
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	e0d9      	b.n	8006f94 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006de0:	2201      	movs	r2, #1
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	fa02 f303 	lsl.w	r3, r2, r3
 8006de8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	4013      	ands	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	f040 80c9 	bne.w	8006f8e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006dfc:	4a6b      	ldr	r2, [pc, #428]	; (8006fac <HAL_GPIO_DeInit+0x1e8>)
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	089b      	lsrs	r3, r3, #2
 8006e02:	3302      	adds	r3, #2
 8006e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e08:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f003 0303 	and.w	r3, r3, #3
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	220f      	movs	r2, #15
 8006e14:	fa02 f303 	lsl.w	r3, r2, r3
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a63      	ldr	r2, [pc, #396]	; (8006fb0 <HAL_GPIO_DeInit+0x1ec>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d037      	beq.n	8006e96 <HAL_GPIO_DeInit+0xd2>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a62      	ldr	r2, [pc, #392]	; (8006fb4 <HAL_GPIO_DeInit+0x1f0>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d031      	beq.n	8006e92 <HAL_GPIO_DeInit+0xce>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a61      	ldr	r2, [pc, #388]	; (8006fb8 <HAL_GPIO_DeInit+0x1f4>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d02b      	beq.n	8006e8e <HAL_GPIO_DeInit+0xca>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a60      	ldr	r2, [pc, #384]	; (8006fbc <HAL_GPIO_DeInit+0x1f8>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d025      	beq.n	8006e8a <HAL_GPIO_DeInit+0xc6>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a5f      	ldr	r2, [pc, #380]	; (8006fc0 <HAL_GPIO_DeInit+0x1fc>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d01f      	beq.n	8006e86 <HAL_GPIO_DeInit+0xc2>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a5e      	ldr	r2, [pc, #376]	; (8006fc4 <HAL_GPIO_DeInit+0x200>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d019      	beq.n	8006e82 <HAL_GPIO_DeInit+0xbe>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a5d      	ldr	r2, [pc, #372]	; (8006fc8 <HAL_GPIO_DeInit+0x204>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d013      	beq.n	8006e7e <HAL_GPIO_DeInit+0xba>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a5c      	ldr	r2, [pc, #368]	; (8006fcc <HAL_GPIO_DeInit+0x208>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d00d      	beq.n	8006e7a <HAL_GPIO_DeInit+0xb6>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a5b      	ldr	r2, [pc, #364]	; (8006fd0 <HAL_GPIO_DeInit+0x20c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d007      	beq.n	8006e76 <HAL_GPIO_DeInit+0xb2>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a5a      	ldr	r2, [pc, #360]	; (8006fd4 <HAL_GPIO_DeInit+0x210>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d101      	bne.n	8006e72 <HAL_GPIO_DeInit+0xae>
 8006e6e:	2309      	movs	r3, #9
 8006e70:	e012      	b.n	8006e98 <HAL_GPIO_DeInit+0xd4>
 8006e72:	230a      	movs	r3, #10
 8006e74:	e010      	b.n	8006e98 <HAL_GPIO_DeInit+0xd4>
 8006e76:	2308      	movs	r3, #8
 8006e78:	e00e      	b.n	8006e98 <HAL_GPIO_DeInit+0xd4>
 8006e7a:	2307      	movs	r3, #7
 8006e7c:	e00c      	b.n	8006e98 <HAL_GPIO_DeInit+0xd4>
 8006e7e:	2306      	movs	r3, #6
 8006e80:	e00a      	b.n	8006e98 <HAL_GPIO_DeInit+0xd4>
 8006e82:	2305      	movs	r3, #5
 8006e84:	e008      	b.n	8006e98 <HAL_GPIO_DeInit+0xd4>
 8006e86:	2304      	movs	r3, #4
 8006e88:	e006      	b.n	8006e98 <HAL_GPIO_DeInit+0xd4>
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e004      	b.n	8006e98 <HAL_GPIO_DeInit+0xd4>
 8006e8e:	2302      	movs	r3, #2
 8006e90:	e002      	b.n	8006e98 <HAL_GPIO_DeInit+0xd4>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e000      	b.n	8006e98 <HAL_GPIO_DeInit+0xd4>
 8006e96:	2300      	movs	r3, #0
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	f002 0203 	and.w	r2, r2, #3
 8006e9e:	0092      	lsls	r2, r2, #2
 8006ea0:	4093      	lsls	r3, r2
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d132      	bne.n	8006f0e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006ea8:	4b4b      	ldr	r3, [pc, #300]	; (8006fd8 <HAL_GPIO_DeInit+0x214>)
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	43db      	mvns	r3, r3
 8006eb0:	4949      	ldr	r1, [pc, #292]	; (8006fd8 <HAL_GPIO_DeInit+0x214>)
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006eb6:	4b48      	ldr	r3, [pc, #288]	; (8006fd8 <HAL_GPIO_DeInit+0x214>)
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	43db      	mvns	r3, r3
 8006ebe:	4946      	ldr	r1, [pc, #280]	; (8006fd8 <HAL_GPIO_DeInit+0x214>)
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006ec4:	4b44      	ldr	r3, [pc, #272]	; (8006fd8 <HAL_GPIO_DeInit+0x214>)
 8006ec6:	68da      	ldr	r2, [r3, #12]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	43db      	mvns	r3, r3
 8006ecc:	4942      	ldr	r1, [pc, #264]	; (8006fd8 <HAL_GPIO_DeInit+0x214>)
 8006ece:	4013      	ands	r3, r2
 8006ed0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006ed2:	4b41      	ldr	r3, [pc, #260]	; (8006fd8 <HAL_GPIO_DeInit+0x214>)
 8006ed4:	689a      	ldr	r2, [r3, #8]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	43db      	mvns	r3, r3
 8006eda:	493f      	ldr	r1, [pc, #252]	; (8006fd8 <HAL_GPIO_DeInit+0x214>)
 8006edc:	4013      	ands	r3, r2
 8006ede:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f003 0303 	and.w	r3, r3, #3
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	220f      	movs	r2, #15
 8006eea:	fa02 f303 	lsl.w	r3, r2, r3
 8006eee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006ef0:	4a2e      	ldr	r2, [pc, #184]	; (8006fac <HAL_GPIO_DeInit+0x1e8>)
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	089b      	lsrs	r3, r3, #2
 8006ef6:	3302      	adds	r3, #2
 8006ef8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	43da      	mvns	r2, r3
 8006f00:	482a      	ldr	r0, [pc, #168]	; (8006fac <HAL_GPIO_DeInit+0x1e8>)
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	089b      	lsrs	r3, r3, #2
 8006f06:	400a      	ands	r2, r1
 8006f08:	3302      	adds	r3, #2
 8006f0a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	2103      	movs	r1, #3
 8006f18:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	401a      	ands	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	08da      	lsrs	r2, r3, #3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3208      	adds	r2, #8
 8006f2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	220f      	movs	r2, #15
 8006f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3e:	43db      	mvns	r3, r3
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	08d2      	lsrs	r2, r2, #3
 8006f44:	4019      	ands	r1, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3208      	adds	r2, #8
 8006f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	2103      	movs	r1, #3
 8006f58:	fa01 f303 	lsl.w	r3, r1, r3
 8006f5c:	43db      	mvns	r3, r3
 8006f5e:	401a      	ands	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	2101      	movs	r1, #1
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f70:	43db      	mvns	r3, r3
 8006f72:	401a      	ands	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	2103      	movs	r1, #3
 8006f82:	fa01 f303 	lsl.w	r3, r1, r3
 8006f86:	43db      	mvns	r3, r3
 8006f88:	401a      	ands	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	3301      	adds	r3, #1
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2b0f      	cmp	r3, #15
 8006f98:	f67f af22 	bls.w	8006de0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006f9c:	bf00      	nop
 8006f9e:	bf00      	nop
 8006fa0:	371c      	adds	r7, #28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40013800 	.word	0x40013800
 8006fb0:	40020000 	.word	0x40020000
 8006fb4:	40020400 	.word	0x40020400
 8006fb8:	40020800 	.word	0x40020800
 8006fbc:	40020c00 	.word	0x40020c00
 8006fc0:	40021000 	.word	0x40021000
 8006fc4:	40021400 	.word	0x40021400
 8006fc8:	40021800 	.word	0x40021800
 8006fcc:	40021c00 	.word	0x40021c00
 8006fd0:	40022000 	.word	0x40022000
 8006fd4:	40022400 	.word	0x40022400
 8006fd8:	40013c00 	.word	0x40013c00

08006fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	807b      	strh	r3, [r7, #2]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006fec:	787b      	ldrb	r3, [r7, #1]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d003      	beq.n	8006ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ff2:	887a      	ldrh	r2, [r7, #2]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006ff8:	e003      	b.n	8007002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006ffa:	887b      	ldrh	r3, [r7, #2]
 8006ffc:	041a      	lsls	r2, r3, #16
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	619a      	str	r2, [r3, #24]
}
 8007002:	bf00      	nop
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
	...

08007010 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e07f      	b.n	8007122 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d106      	bne.n	800703c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7fa f8f8 	bl	800122c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2224      	movs	r2, #36	; 0x24
 8007040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0201 	bic.w	r2, r2, #1
 8007052:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007060:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007070:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d107      	bne.n	800708a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007086:	609a      	str	r2, [r3, #8]
 8007088:	e006      	b.n	8007098 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689a      	ldr	r2, [r3, #8]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007096:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	2b02      	cmp	r3, #2
 800709e:	d104      	bne.n	80070aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6859      	ldr	r1, [r3, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	4b1d      	ldr	r3, [pc, #116]	; (800712c <HAL_I2C_Init+0x11c>)
 80070b6:	430b      	orrs	r3, r1
 80070b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68da      	ldr	r2, [r3, #12]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	691a      	ldr	r2, [r3, #16]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	69d9      	ldr	r1, [r3, #28]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a1a      	ldr	r2, [r3, #32]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	430a      	orrs	r2, r1
 80070f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f042 0201 	orr.w	r2, r2, #1
 8007102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2220      	movs	r2, #32
 800710e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	02008000 	.word	0x02008000

08007130 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e021      	b.n	8007186 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2224      	movs	r2, #36	; 0x24
 8007146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f022 0201 	bic.w	r2, r2, #1
 8007158:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7fa f90e 	bl	800137c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b088      	sub	sp, #32
 8007194:	af02      	add	r7, sp, #8
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	4608      	mov	r0, r1
 800719a:	4611      	mov	r1, r2
 800719c:	461a      	mov	r2, r3
 800719e:	4603      	mov	r3, r0
 80071a0:	817b      	strh	r3, [r7, #10]
 80071a2:	460b      	mov	r3, r1
 80071a4:	813b      	strh	r3, [r7, #8]
 80071a6:	4613      	mov	r3, r2
 80071a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b20      	cmp	r3, #32
 80071b4:	f040 80f9 	bne.w	80073aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <HAL_I2C_Mem_Write+0x34>
 80071be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d105      	bne.n	80071d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e0ed      	b.n	80073ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d101      	bne.n	80071de <HAL_I2C_Mem_Write+0x4e>
 80071da:	2302      	movs	r3, #2
 80071dc:	e0e6      	b.n	80073ac <HAL_I2C_Mem_Write+0x21c>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80071e6:	f7fe fa8b 	bl	8005700 <HAL_GetTick>
 80071ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	2319      	movs	r3, #25
 80071f2:	2201      	movs	r2, #1
 80071f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 fad1 	bl	80077a0 <I2C_WaitOnFlagUntilTimeout>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d001      	beq.n	8007208 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e0d1      	b.n	80073ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2221      	movs	r2, #33	; 0x21
 800720c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2240      	movs	r2, #64	; 0x40
 8007214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6a3a      	ldr	r2, [r7, #32]
 8007222:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007228:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007230:	88f8      	ldrh	r0, [r7, #6]
 8007232:	893a      	ldrh	r2, [r7, #8]
 8007234:	8979      	ldrh	r1, [r7, #10]
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	4603      	mov	r3, r0
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 f9e1 	bl	8007608 <I2C_RequestMemoryWrite>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d005      	beq.n	8007258 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e0a9      	b.n	80073ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800725c:	b29b      	uxth	r3, r3
 800725e:	2bff      	cmp	r3, #255	; 0xff
 8007260:	d90e      	bls.n	8007280 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	22ff      	movs	r2, #255	; 0xff
 8007266:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800726c:	b2da      	uxtb	r2, r3
 800726e:	8979      	ldrh	r1, [r7, #10]
 8007270:	2300      	movs	r3, #0
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f000 fc2d 	bl	8007ad8 <I2C_TransferConfig>
 800727e:	e00f      	b.n	80072a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007284:	b29a      	uxth	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800728e:	b2da      	uxtb	r2, r3
 8007290:	8979      	ldrh	r1, [r7, #10]
 8007292:	2300      	movs	r3, #0
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 fc1c 	bl	8007ad8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 fabb 	bl	8007820 <I2C_WaitOnTXISFlagUntilTimeout>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e07b      	b.n	80073ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b8:	781a      	ldrb	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	3b01      	subs	r3, #1
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072dc:	3b01      	subs	r3, #1
 80072de:	b29a      	uxth	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d034      	beq.n	8007358 <HAL_I2C_Mem_Write+0x1c8>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d130      	bne.n	8007358 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	2200      	movs	r2, #0
 80072fe:	2180      	movs	r1, #128	; 0x80
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 fa4d 	bl	80077a0 <I2C_WaitOnFlagUntilTimeout>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e04d      	b.n	80073ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007314:	b29b      	uxth	r3, r3
 8007316:	2bff      	cmp	r3, #255	; 0xff
 8007318:	d90e      	bls.n	8007338 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	22ff      	movs	r2, #255	; 0xff
 800731e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007324:	b2da      	uxtb	r2, r3
 8007326:	8979      	ldrh	r1, [r7, #10]
 8007328:	2300      	movs	r3, #0
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 fbd1 	bl	8007ad8 <I2C_TransferConfig>
 8007336:	e00f      	b.n	8007358 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733c:	b29a      	uxth	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007346:	b2da      	uxtb	r2, r3
 8007348:	8979      	ldrh	r1, [r7, #10]
 800734a:	2300      	movs	r3, #0
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f000 fbc0 	bl	8007ad8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735c:	b29b      	uxth	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d19e      	bne.n	80072a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 fa9a 	bl	80078a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e01a      	b.n	80073ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2220      	movs	r2, #32
 800737c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6859      	ldr	r1, [r3, #4]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	4b0a      	ldr	r3, [pc, #40]	; (80073b4 <HAL_I2C_Mem_Write+0x224>)
 800738a:	400b      	ands	r3, r1
 800738c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2220      	movs	r2, #32
 8007392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	e000      	b.n	80073ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80073aa:	2302      	movs	r3, #2
  }
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	fe00e800 	.word	0xfe00e800

080073b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af02      	add	r7, sp, #8
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	4608      	mov	r0, r1
 80073c2:	4611      	mov	r1, r2
 80073c4:	461a      	mov	r2, r3
 80073c6:	4603      	mov	r3, r0
 80073c8:	817b      	strh	r3, [r7, #10]
 80073ca:	460b      	mov	r3, r1
 80073cc:	813b      	strh	r3, [r7, #8]
 80073ce:	4613      	mov	r3, r2
 80073d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b20      	cmp	r3, #32
 80073dc:	f040 80fd 	bne.w	80075da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <HAL_I2C_Mem_Read+0x34>
 80073e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d105      	bne.n	80073f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e0f1      	b.n	80075dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d101      	bne.n	8007406 <HAL_I2C_Mem_Read+0x4e>
 8007402:	2302      	movs	r3, #2
 8007404:	e0ea      	b.n	80075dc <HAL_I2C_Mem_Read+0x224>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800740e:	f7fe f977 	bl	8005700 <HAL_GetTick>
 8007412:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	2319      	movs	r3, #25
 800741a:	2201      	movs	r2, #1
 800741c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f9bd 	bl	80077a0 <I2C_WaitOnFlagUntilTimeout>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e0d5      	b.n	80075dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2222      	movs	r2, #34	; 0x22
 8007434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2240      	movs	r2, #64	; 0x40
 800743c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6a3a      	ldr	r2, [r7, #32]
 800744a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007450:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007458:	88f8      	ldrh	r0, [r7, #6]
 800745a:	893a      	ldrh	r2, [r7, #8]
 800745c:	8979      	ldrh	r1, [r7, #10]
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	9301      	str	r3, [sp, #4]
 8007462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	4603      	mov	r3, r0
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 f921 	bl	80076b0 <I2C_RequestMemoryRead>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d005      	beq.n	8007480 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e0ad      	b.n	80075dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007484:	b29b      	uxth	r3, r3
 8007486:	2bff      	cmp	r3, #255	; 0xff
 8007488:	d90e      	bls.n	80074a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	22ff      	movs	r2, #255	; 0xff
 800748e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007494:	b2da      	uxtb	r2, r3
 8007496:	8979      	ldrh	r1, [r7, #10]
 8007498:	4b52      	ldr	r3, [pc, #328]	; (80075e4 <HAL_I2C_Mem_Read+0x22c>)
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 fb19 	bl	8007ad8 <I2C_TransferConfig>
 80074a6:	e00f      	b.n	80074c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	8979      	ldrh	r1, [r7, #10]
 80074ba:	4b4a      	ldr	r3, [pc, #296]	; (80075e4 <HAL_I2C_Mem_Read+0x22c>)
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 fb08 	bl	8007ad8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	2200      	movs	r2, #0
 80074d0:	2104      	movs	r1, #4
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f000 f964 	bl	80077a0 <I2C_WaitOnFlagUntilTimeout>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e07c      	b.n	80075dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	b2d2      	uxtb	r2, r2
 80074ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074fe:	3b01      	subs	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800750a:	b29b      	uxth	r3, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	b29a      	uxth	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007518:	b29b      	uxth	r3, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d034      	beq.n	8007588 <HAL_I2C_Mem_Read+0x1d0>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007522:	2b00      	cmp	r3, #0
 8007524:	d130      	bne.n	8007588 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	2200      	movs	r2, #0
 800752e:	2180      	movs	r1, #128	; 0x80
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 f935 	bl	80077a0 <I2C_WaitOnFlagUntilTimeout>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e04d      	b.n	80075dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007544:	b29b      	uxth	r3, r3
 8007546:	2bff      	cmp	r3, #255	; 0xff
 8007548:	d90e      	bls.n	8007568 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	22ff      	movs	r2, #255	; 0xff
 800754e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007554:	b2da      	uxtb	r2, r3
 8007556:	8979      	ldrh	r1, [r7, #10]
 8007558:	2300      	movs	r3, #0
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 fab9 	bl	8007ad8 <I2C_TransferConfig>
 8007566:	e00f      	b.n	8007588 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756c:	b29a      	uxth	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007576:	b2da      	uxtb	r2, r3
 8007578:	8979      	ldrh	r1, [r7, #10]
 800757a:	2300      	movs	r3, #0
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 faa8 	bl	8007ad8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758c:	b29b      	uxth	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d19a      	bne.n	80074c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 f982 	bl	80078a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e01a      	b.n	80075dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2220      	movs	r2, #32
 80075ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6859      	ldr	r1, [r3, #4]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <HAL_I2C_Mem_Read+0x230>)
 80075ba:	400b      	ands	r3, r1
 80075bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2220      	movs	r2, #32
 80075c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	e000      	b.n	80075dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80075da:	2302      	movs	r3, #2
  }
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	80002400 	.word	0x80002400
 80075e8:	fe00e800 	.word	0xfe00e800

080075ec <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075fa:	b2db      	uxtb	r3, r3
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af02      	add	r7, sp, #8
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	4608      	mov	r0, r1
 8007612:	4611      	mov	r1, r2
 8007614:	461a      	mov	r2, r3
 8007616:	4603      	mov	r3, r0
 8007618:	817b      	strh	r3, [r7, #10]
 800761a:	460b      	mov	r3, r1
 800761c:	813b      	strh	r3, [r7, #8]
 800761e:	4613      	mov	r3, r2
 8007620:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007622:	88fb      	ldrh	r3, [r7, #6]
 8007624:	b2da      	uxtb	r2, r3
 8007626:	8979      	ldrh	r1, [r7, #10]
 8007628:	4b20      	ldr	r3, [pc, #128]	; (80076ac <I2C_RequestMemoryWrite+0xa4>)
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f000 fa51 	bl	8007ad8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007636:	69fa      	ldr	r2, [r7, #28]
 8007638:	69b9      	ldr	r1, [r7, #24]
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 f8f0 	bl	8007820 <I2C_WaitOnTXISFlagUntilTimeout>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e02c      	b.n	80076a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800764a:	88fb      	ldrh	r3, [r7, #6]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d105      	bne.n	800765c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007650:	893b      	ldrh	r3, [r7, #8]
 8007652:	b2da      	uxtb	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	629a      	str	r2, [r3, #40]	; 0x28
 800765a:	e015      	b.n	8007688 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800765c:	893b      	ldrh	r3, [r7, #8]
 800765e:	0a1b      	lsrs	r3, r3, #8
 8007660:	b29b      	uxth	r3, r3
 8007662:	b2da      	uxtb	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	69b9      	ldr	r1, [r7, #24]
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f000 f8d6 	bl	8007820 <I2C_WaitOnTXISFlagUntilTimeout>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d001      	beq.n	800767e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e012      	b.n	80076a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800767e:	893b      	ldrh	r3, [r7, #8]
 8007680:	b2da      	uxtb	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	2200      	movs	r2, #0
 8007690:	2180      	movs	r1, #128	; 0x80
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 f884 	bl	80077a0 <I2C_WaitOnFlagUntilTimeout>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e000      	b.n	80076a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	80002000 	.word	0x80002000

080076b0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af02      	add	r7, sp, #8
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	4608      	mov	r0, r1
 80076ba:	4611      	mov	r1, r2
 80076bc:	461a      	mov	r2, r3
 80076be:	4603      	mov	r3, r0
 80076c0:	817b      	strh	r3, [r7, #10]
 80076c2:	460b      	mov	r3, r1
 80076c4:	813b      	strh	r3, [r7, #8]
 80076c6:	4613      	mov	r3, r2
 80076c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80076ca:	88fb      	ldrh	r3, [r7, #6]
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	8979      	ldrh	r1, [r7, #10]
 80076d0:	4b20      	ldr	r3, [pc, #128]	; (8007754 <I2C_RequestMemoryRead+0xa4>)
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	2300      	movs	r3, #0
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 f9fe 	bl	8007ad8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076dc:	69fa      	ldr	r2, [r7, #28]
 80076de:	69b9      	ldr	r1, [r7, #24]
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 f89d 	bl	8007820 <I2C_WaitOnTXISFlagUntilTimeout>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e02c      	b.n	800774a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076f0:	88fb      	ldrh	r3, [r7, #6]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d105      	bne.n	8007702 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076f6:	893b      	ldrh	r3, [r7, #8]
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	629a      	str	r2, [r3, #40]	; 0x28
 8007700:	e015      	b.n	800772e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007702:	893b      	ldrh	r3, [r7, #8]
 8007704:	0a1b      	lsrs	r3, r3, #8
 8007706:	b29b      	uxth	r3, r3
 8007708:	b2da      	uxtb	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007710:	69fa      	ldr	r2, [r7, #28]
 8007712:	69b9      	ldr	r1, [r7, #24]
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 f883 	bl	8007820 <I2C_WaitOnTXISFlagUntilTimeout>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e012      	b.n	800774a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007724:	893b      	ldrh	r3, [r7, #8]
 8007726:	b2da      	uxtb	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	2200      	movs	r2, #0
 8007736:	2140      	movs	r1, #64	; 0x40
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 f831 	bl	80077a0 <I2C_WaitOnFlagUntilTimeout>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e000      	b.n	800774a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	80002000 	.word	0x80002000

08007758 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b02      	cmp	r3, #2
 800776c:	d103      	bne.n	8007776 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2200      	movs	r2, #0
 8007774:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	2b01      	cmp	r3, #1
 8007782:	d007      	beq.n	8007794 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f042 0201 	orr.w	r2, r2, #1
 8007792:	619a      	str	r2, [r3, #24]
  }
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	603b      	str	r3, [r7, #0]
 80077ac:	4613      	mov	r3, r2
 80077ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077b0:	e022      	b.n	80077f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b8:	d01e      	beq.n	80077f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ba:	f7fd ffa1 	bl	8005700 <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d302      	bcc.n	80077d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d113      	bne.n	80077f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d4:	f043 0220 	orr.w	r2, r3, #32
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2220      	movs	r2, #32
 80077e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e00f      	b.n	8007818 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	699a      	ldr	r2, [r3, #24]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	4013      	ands	r3, r2
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	429a      	cmp	r2, r3
 8007806:	bf0c      	ite	eq
 8007808:	2301      	moveq	r3, #1
 800780a:	2300      	movne	r3, #0
 800780c:	b2db      	uxtb	r3, r3
 800780e:	461a      	mov	r2, r3
 8007810:	79fb      	ldrb	r3, [r7, #7]
 8007812:	429a      	cmp	r2, r3
 8007814:	d0cd      	beq.n	80077b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800782c:	e02c      	b.n	8007888 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	68b9      	ldr	r1, [r7, #8]
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 f870 	bl	8007918 <I2C_IsErrorOccurred>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e02a      	b.n	8007898 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007848:	d01e      	beq.n	8007888 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800784a:	f7fd ff59 	bl	8005700 <HAL_GetTick>
 800784e:	4602      	mov	r2, r0
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	429a      	cmp	r2, r3
 8007858:	d302      	bcc.n	8007860 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d113      	bne.n	8007888 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007864:	f043 0220 	orr.w	r2, r3, #32
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2220      	movs	r2, #32
 8007870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e007      	b.n	8007898 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	2b02      	cmp	r3, #2
 8007894:	d1cb      	bne.n	800782e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078ac:	e028      	b.n	8007900 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	68b9      	ldr	r1, [r7, #8]
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 f830 	bl	8007918 <I2C_IsErrorOccurred>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e026      	b.n	8007910 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078c2:	f7fd ff1d 	bl	8005700 <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d302      	bcc.n	80078d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d113      	bne.n	8007900 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078dc:	f043 0220 	orr.w	r2, r3, #32
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2220      	movs	r2, #32
 80078e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e007      	b.n	8007910 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	f003 0320 	and.w	r3, r3, #32
 800790a:	2b20      	cmp	r3, #32
 800790c:	d1cf      	bne.n	80078ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08a      	sub	sp, #40	; 0x28
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007932:	2300      	movs	r3, #0
 8007934:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	f003 0310 	and.w	r3, r3, #16
 8007940:	2b00      	cmp	r3, #0
 8007942:	d068      	beq.n	8007a16 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2210      	movs	r2, #16
 800794a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800794c:	e049      	b.n	80079e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007954:	d045      	beq.n	80079e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007956:	f7fd fed3 	bl	8005700 <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	429a      	cmp	r2, r3
 8007964:	d302      	bcc.n	800796c <I2C_IsErrorOccurred+0x54>
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d13a      	bne.n	80079e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007976:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800797e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800798a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800798e:	d121      	bne.n	80079d4 <I2C_IsErrorOccurred+0xbc>
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007996:	d01d      	beq.n	80079d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007998:	7cfb      	ldrb	r3, [r7, #19]
 800799a:	2b20      	cmp	r3, #32
 800799c:	d01a      	beq.n	80079d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80079ae:	f7fd fea7 	bl	8005700 <HAL_GetTick>
 80079b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079b4:	e00e      	b.n	80079d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80079b6:	f7fd fea3 	bl	8005700 <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	2b19      	cmp	r3, #25
 80079c2:	d907      	bls.n	80079d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	f043 0320 	orr.w	r3, r3, #32
 80079ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80079d2:	e006      	b.n	80079e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	f003 0320 	and.w	r3, r3, #32
 80079de:	2b20      	cmp	r3, #32
 80079e0:	d1e9      	bne.n	80079b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	f003 0320 	and.w	r3, r3, #32
 80079ec:	2b20      	cmp	r3, #32
 80079ee:	d003      	beq.n	80079f8 <I2C_IsErrorOccurred+0xe0>
 80079f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d0aa      	beq.n	800794e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80079f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d103      	bne.n	8007a08 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2220      	movs	r2, #32
 8007a06:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	f043 0304 	orr.w	r3, r3, #4
 8007a0e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00b      	beq.n	8007a40 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	f043 0301 	orr.w	r3, r3, #1
 8007a2e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00b      	beq.n	8007a62 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	f043 0308 	orr.w	r3, r3, #8
 8007a50:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00b      	beq.n	8007a84 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	f043 0302 	orr.w	r3, r3, #2
 8007a72:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d01c      	beq.n	8007ac6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f7ff fe63 	bl	8007758 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6859      	ldr	r1, [r3, #4]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	4b0d      	ldr	r3, [pc, #52]	; (8007ad4 <I2C_IsErrorOccurred+0x1bc>)
 8007a9e:	400b      	ands	r3, r1
 8007aa0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3728      	adds	r7, #40	; 0x28
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	fe00e800 	.word	0xfe00e800

08007ad8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	607b      	str	r3, [r7, #4]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	817b      	strh	r3, [r7, #10]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007aea:	897b      	ldrh	r3, [r7, #10]
 8007aec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007af0:	7a7b      	ldrb	r3, [r7, #9]
 8007af2:	041b      	lsls	r3, r3, #16
 8007af4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007af8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	0d5b      	lsrs	r3, r3, #21
 8007b12:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007b16:	4b08      	ldr	r3, [pc, #32]	; (8007b38 <I2C_TransferConfig+0x60>)
 8007b18:	430b      	orrs	r3, r1
 8007b1a:	43db      	mvns	r3, r3
 8007b1c:	ea02 0103 	and.w	r1, r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007b2a:	bf00      	nop
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	03ff63ff 	.word	0x03ff63ff

08007b3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b20      	cmp	r3, #32
 8007b50:	d138      	bne.n	8007bc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d101      	bne.n	8007b60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	e032      	b.n	8007bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2224      	movs	r2, #36	; 0x24
 8007b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 0201 	bic.w	r2, r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6819      	ldr	r1, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f042 0201 	orr.w	r2, r2, #1
 8007bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	e000      	b.n	8007bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007bc4:	2302      	movs	r3, #2
  }
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b085      	sub	sp, #20
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b20      	cmp	r3, #32
 8007be6:	d139      	bne.n	8007c5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d101      	bne.n	8007bf6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	e033      	b.n	8007c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2224      	movs	r2, #36	; 0x24
 8007c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f022 0201 	bic.w	r2, r2, #1
 8007c14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007c24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	021b      	lsls	r3, r3, #8
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f042 0201 	orr.w	r2, r2, #1
 8007c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	e000      	b.n	8007c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007c5c:	2302      	movs	r3, #2
  }
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
	...

08007c6c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e0bf      	b.n	8007dfe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d106      	bne.n	8007c98 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7f9 fc30 	bl	80014f8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	699a      	ldr	r2, [r3, #24]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007cae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6999      	ldr	r1, [r3, #24]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007cc4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6899      	ldr	r1, [r3, #8]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	4b4a      	ldr	r3, [pc, #296]	; (8007e08 <HAL_LTDC_Init+0x19c>)
 8007ce0:	400b      	ands	r3, r1
 8007ce2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	041b      	lsls	r3, r3, #16
 8007cea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6899      	ldr	r1, [r3, #8]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	699a      	ldr	r2, [r3, #24]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	431a      	orrs	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68d9      	ldr	r1, [r3, #12]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	4b3e      	ldr	r3, [pc, #248]	; (8007e08 <HAL_LTDC_Init+0x19c>)
 8007d0e:	400b      	ands	r3, r1
 8007d10:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	041b      	lsls	r3, r3, #16
 8007d18:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68d9      	ldr	r1, [r3, #12]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a1a      	ldr	r2, [r3, #32]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	431a      	orrs	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6919      	ldr	r1, [r3, #16]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	4b33      	ldr	r3, [pc, #204]	; (8007e08 <HAL_LTDC_Init+0x19c>)
 8007d3c:	400b      	ands	r3, r1
 8007d3e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	041b      	lsls	r3, r3, #16
 8007d46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6919      	ldr	r1, [r3, #16]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	431a      	orrs	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6959      	ldr	r1, [r3, #20]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	4b27      	ldr	r3, [pc, #156]	; (8007e08 <HAL_LTDC_Init+0x19c>)
 8007d6a:	400b      	ands	r3, r1
 8007d6c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d72:	041b      	lsls	r3, r3, #16
 8007d74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6959      	ldr	r1, [r3, #20]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	431a      	orrs	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d92:	021b      	lsls	r3, r3, #8
 8007d94:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007d9c:	041b      	lsls	r3, r3, #16
 8007d9e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f042 0206 	orr.w	r2, r2, #6
 8007dda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	699a      	ldr	r2, [r3, #24]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f042 0201 	orr.w	r2, r2, #1
 8007dea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	f000f800 	.word	0xf000f800

08007e0c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e22:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f003 0304 	and.w	r3, r3, #4
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d023      	beq.n	8007e76 <HAL_LTDC_IRQHandler+0x6a>
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	f003 0304 	and.w	r3, r3, #4
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d01e      	beq.n	8007e76 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 0204 	bic.w	r2, r2, #4
 8007e46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2204      	movs	r2, #4
 8007e4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e56:	f043 0201 	orr.w	r2, r3, #1
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2204      	movs	r2, #4
 8007e64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f86f 	bl	8007f54 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f003 0302 	and.w	r3, r3, #2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d023      	beq.n	8007ec8 <HAL_LTDC_IRQHandler+0xbc>
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	f003 0302 	and.w	r3, r3, #2
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d01e      	beq.n	8007ec8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 0202 	bic.w	r2, r2, #2
 8007e98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ea8:	f043 0202 	orr.w	r2, r3, #2
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2204      	movs	r2, #4
 8007eb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f846 	bl	8007f54 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d01b      	beq.n	8007f0a <HAL_LTDC_IRQHandler+0xfe>
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d016      	beq.n	8007f0a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f022 0201 	bic.w	r2, r2, #1
 8007eea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f82f 	bl	8007f68 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f003 0308 	and.w	r3, r3, #8
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d01b      	beq.n	8007f4c <HAL_LTDC_IRQHandler+0x140>
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f003 0308 	and.w	r3, r3, #8
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d016      	beq.n	8007f4c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0208 	bic.w	r2, r2, #8
 8007f2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2208      	movs	r2, #8
 8007f34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f818 	bl	8007f7c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007f4c:	bf00      	nop
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007f90:	b5b0      	push	{r4, r5, r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d101      	bne.n	8007faa <HAL_LTDC_ConfigLayer+0x1a>
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	e02c      	b.n	8008004 <HAL_LTDC_ConfigLayer+0x74>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2134      	movs	r1, #52	; 0x34
 8007fc0:	fb01 f303 	mul.w	r3, r1, r3
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	4614      	mov	r4, r2
 8007fce:	461d      	mov	r5, r3
 8007fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	68b9      	ldr	r1, [r7, #8]
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 f81f 	bl	8008028 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bdb0      	pop	{r4, r5, r7, pc}

0800800c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800801a:	b2db      	uxtb	r3, r3
}
 800801c:	4618      	mov	r0, r3
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008028:	b480      	push	{r7}
 800802a:	b089      	sub	sp, #36	; 0x24
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	0c1b      	lsrs	r3, r3, #16
 8008040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008044:	4413      	add	r3, r2
 8008046:	041b      	lsls	r3, r3, #16
 8008048:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	461a      	mov	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	01db      	lsls	r3, r3, #7
 8008054:	4413      	add	r3, r2
 8008056:	3384      	adds	r3, #132	; 0x84
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	6812      	ldr	r2, [r2, #0]
 800805e:	4611      	mov	r1, r2
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	01d2      	lsls	r2, r2, #7
 8008064:	440a      	add	r2, r1
 8008066:	3284      	adds	r2, #132	; 0x84
 8008068:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800806c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	0c1b      	lsrs	r3, r3, #16
 800807a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800807e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008080:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4619      	mov	r1, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	01db      	lsls	r3, r3, #7
 800808c:	440b      	add	r3, r1
 800808e:	3384      	adds	r3, #132	; 0x84
 8008090:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008096:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080a6:	4413      	add	r3, r2
 80080a8:	041b      	lsls	r3, r3, #16
 80080aa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	461a      	mov	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	01db      	lsls	r3, r3, #7
 80080b6:	4413      	add	r3, r2
 80080b8:	3384      	adds	r3, #132	; 0x84
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	6812      	ldr	r2, [r2, #0]
 80080c0:	4611      	mov	r1, r2
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	01d2      	lsls	r2, r2, #7
 80080c6:	440a      	add	r2, r1
 80080c8:	3284      	adds	r2, #132	; 0x84
 80080ca:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80080ce:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	689a      	ldr	r2, [r3, #8]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080de:	4413      	add	r3, r2
 80080e0:	1c5a      	adds	r2, r3, #1
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4619      	mov	r1, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	01db      	lsls	r3, r3, #7
 80080ec:	440b      	add	r3, r1
 80080ee:	3384      	adds	r3, #132	; 0x84
 80080f0:	4619      	mov	r1, r3
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	461a      	mov	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	01db      	lsls	r3, r3, #7
 8008102:	4413      	add	r3, r2
 8008104:	3384      	adds	r3, #132	; 0x84
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	6812      	ldr	r2, [r2, #0]
 800810c:	4611      	mov	r1, r2
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	01d2      	lsls	r2, r2, #7
 8008112:	440a      	add	r2, r1
 8008114:	3284      	adds	r2, #132	; 0x84
 8008116:	f023 0307 	bic.w	r3, r3, #7
 800811a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	461a      	mov	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	01db      	lsls	r3, r3, #7
 8008126:	4413      	add	r3, r2
 8008128:	3384      	adds	r3, #132	; 0x84
 800812a:	461a      	mov	r2, r3
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008138:	021b      	lsls	r3, r3, #8
 800813a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008142:	041b      	lsls	r3, r3, #16
 8008144:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	061b      	lsls	r3, r3, #24
 800814c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	01db      	lsls	r3, r3, #7
 8008158:	4413      	add	r3, r2
 800815a:	3384      	adds	r3, #132	; 0x84
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	01db      	lsls	r3, r3, #7
 8008168:	4413      	add	r3, r2
 800816a:	3384      	adds	r3, #132	; 0x84
 800816c:	461a      	mov	r2, r3
 800816e:	2300      	movs	r3, #0
 8008170:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008178:	461a      	mov	r2, r3
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	431a      	orrs	r2, r3
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	431a      	orrs	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4619      	mov	r1, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	01db      	lsls	r3, r3, #7
 800818c:	440b      	add	r3, r1
 800818e:	3384      	adds	r3, #132	; 0x84
 8008190:	4619      	mov	r1, r3
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	4313      	orrs	r3, r2
 8008196:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	461a      	mov	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	01db      	lsls	r3, r3, #7
 80081a2:	4413      	add	r3, r2
 80081a4:	3384      	adds	r3, #132	; 0x84
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	6812      	ldr	r2, [r2, #0]
 80081ac:	4611      	mov	r1, r2
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	01d2      	lsls	r2, r2, #7
 80081b2:	440a      	add	r2, r1
 80081b4:	3284      	adds	r2, #132	; 0x84
 80081b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081ba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	461a      	mov	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	01db      	lsls	r3, r3, #7
 80081c6:	4413      	add	r3, r2
 80081c8:	3384      	adds	r3, #132	; 0x84
 80081ca:	461a      	mov	r2, r3
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	695b      	ldr	r3, [r3, #20]
 80081d0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	461a      	mov	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	01db      	lsls	r3, r3, #7
 80081dc:	4413      	add	r3, r2
 80081de:	3384      	adds	r3, #132	; 0x84
 80081e0:	69da      	ldr	r2, [r3, #28]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4619      	mov	r1, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	01db      	lsls	r3, r3, #7
 80081ec:	440b      	add	r3, r1
 80081ee:	3384      	adds	r3, #132	; 0x84
 80081f0:	4619      	mov	r1, r3
 80081f2:	4b58      	ldr	r3, [pc, #352]	; (8008354 <LTDC_SetConfig+0x32c>)
 80081f4:	4013      	ands	r3, r2
 80081f6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	69da      	ldr	r2, [r3, #28]
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	6a1b      	ldr	r3, [r3, #32]
 8008200:	68f9      	ldr	r1, [r7, #12]
 8008202:	6809      	ldr	r1, [r1, #0]
 8008204:	4608      	mov	r0, r1
 8008206:	6879      	ldr	r1, [r7, #4]
 8008208:	01c9      	lsls	r1, r1, #7
 800820a:	4401      	add	r1, r0
 800820c:	3184      	adds	r1, #132	; 0x84
 800820e:	4313      	orrs	r3, r2
 8008210:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	01db      	lsls	r3, r3, #7
 800821c:	4413      	add	r3, r2
 800821e:	3384      	adds	r3, #132	; 0x84
 8008220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	01db      	lsls	r3, r3, #7
 800822c:	4413      	add	r3, r2
 800822e:	3384      	adds	r3, #132	; 0x84
 8008230:	461a      	mov	r2, r3
 8008232:	2300      	movs	r3, #0
 8008234:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	01db      	lsls	r3, r3, #7
 8008240:	4413      	add	r3, r2
 8008242:	3384      	adds	r3, #132	; 0x84
 8008244:	461a      	mov	r2, r3
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d102      	bne.n	800825a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008254:	2304      	movs	r3, #4
 8008256:	61fb      	str	r3, [r7, #28]
 8008258:	e01b      	b.n	8008292 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d102      	bne.n	8008268 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008262:	2303      	movs	r3, #3
 8008264:	61fb      	str	r3, [r7, #28]
 8008266:	e014      	b.n	8008292 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	2b04      	cmp	r3, #4
 800826e:	d00b      	beq.n	8008288 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008274:	2b02      	cmp	r3, #2
 8008276:	d007      	beq.n	8008288 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800827c:	2b03      	cmp	r3, #3
 800827e:	d003      	beq.n	8008288 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008284:	2b07      	cmp	r3, #7
 8008286:	d102      	bne.n	800828e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008288:	2302      	movs	r3, #2
 800828a:	61fb      	str	r3, [r7, #28]
 800828c:	e001      	b.n	8008292 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800828e:	2301      	movs	r3, #1
 8008290:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	461a      	mov	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	01db      	lsls	r3, r3, #7
 800829c:	4413      	add	r3, r2
 800829e:	3384      	adds	r3, #132	; 0x84
 80082a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	6812      	ldr	r2, [r2, #0]
 80082a6:	4611      	mov	r1, r2
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	01d2      	lsls	r2, r2, #7
 80082ac:	440a      	add	r2, r1
 80082ae:	3284      	adds	r2, #132	; 0x84
 80082b0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80082b4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ba:	69fa      	ldr	r2, [r7, #28]
 80082bc:	fb02 f303 	mul.w	r3, r2, r3
 80082c0:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	6859      	ldr	r1, [r3, #4]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	1acb      	subs	r3, r1, r3
 80082cc:	69f9      	ldr	r1, [r7, #28]
 80082ce:	fb01 f303 	mul.w	r3, r1, r3
 80082d2:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80082d4:	68f9      	ldr	r1, [r7, #12]
 80082d6:	6809      	ldr	r1, [r1, #0]
 80082d8:	4608      	mov	r0, r1
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	01c9      	lsls	r1, r1, #7
 80082de:	4401      	add	r1, r0
 80082e0:	3184      	adds	r1, #132	; 0x84
 80082e2:	4313      	orrs	r3, r2
 80082e4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	01db      	lsls	r3, r3, #7
 80082f0:	4413      	add	r3, r2
 80082f2:	3384      	adds	r3, #132	; 0x84
 80082f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4619      	mov	r1, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	01db      	lsls	r3, r3, #7
 8008300:	440b      	add	r3, r1
 8008302:	3384      	adds	r3, #132	; 0x84
 8008304:	4619      	mov	r1, r3
 8008306:	4b14      	ldr	r3, [pc, #80]	; (8008358 <LTDC_SetConfig+0x330>)
 8008308:	4013      	ands	r3, r2
 800830a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	461a      	mov	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	01db      	lsls	r3, r3, #7
 8008316:	4413      	add	r3, r2
 8008318:	3384      	adds	r3, #132	; 0x84
 800831a:	461a      	mov	r2, r3
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008320:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	01db      	lsls	r3, r3, #7
 800832c:	4413      	add	r3, r2
 800832e:	3384      	adds	r3, #132	; 0x84
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	6812      	ldr	r2, [r2, #0]
 8008336:	4611      	mov	r1, r2
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	01d2      	lsls	r2, r2, #7
 800833c:	440a      	add	r2, r1
 800833e:	3284      	adds	r2, #132	; 0x84
 8008340:	f043 0301 	orr.w	r3, r3, #1
 8008344:	6013      	str	r3, [r2, #0]
}
 8008346:	bf00      	nop
 8008348:	3724      	adds	r7, #36	; 0x24
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	fffff8f8 	.word	0xfffff8f8
 8008358:	fffff800 	.word	0xfffff800

0800835c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800835c:	b480      	push	{r7}
 800835e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008360:	4b05      	ldr	r3, [pc, #20]	; (8008378 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a04      	ldr	r2, [pc, #16]	; (8008378 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800836a:	6013      	str	r3, [r2, #0]
}
 800836c:	bf00      	nop
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	40007000 	.word	0x40007000

0800837c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008382:	2300      	movs	r3, #0
 8008384:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008386:	4b23      	ldr	r3, [pc, #140]	; (8008414 <HAL_PWREx_EnableOverDrive+0x98>)
 8008388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838a:	4a22      	ldr	r2, [pc, #136]	; (8008414 <HAL_PWREx_EnableOverDrive+0x98>)
 800838c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008390:	6413      	str	r3, [r2, #64]	; 0x40
 8008392:	4b20      	ldr	r3, [pc, #128]	; (8008414 <HAL_PWREx_EnableOverDrive+0x98>)
 8008394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800839a:	603b      	str	r3, [r7, #0]
 800839c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800839e:	4b1e      	ldr	r3, [pc, #120]	; (8008418 <HAL_PWREx_EnableOverDrive+0x9c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a1d      	ldr	r2, [pc, #116]	; (8008418 <HAL_PWREx_EnableOverDrive+0x9c>)
 80083a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80083aa:	f7fd f9a9 	bl	8005700 <HAL_GetTick>
 80083ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80083b0:	e009      	b.n	80083c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80083b2:	f7fd f9a5 	bl	8005700 <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083c0:	d901      	bls.n	80083c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e022      	b.n	800840c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80083c6:	4b14      	ldr	r3, [pc, #80]	; (8008418 <HAL_PWREx_EnableOverDrive+0x9c>)
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083d2:	d1ee      	bne.n	80083b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80083d4:	4b10      	ldr	r3, [pc, #64]	; (8008418 <HAL_PWREx_EnableOverDrive+0x9c>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a0f      	ldr	r2, [pc, #60]	; (8008418 <HAL_PWREx_EnableOverDrive+0x9c>)
 80083da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80083e0:	f7fd f98e 	bl	8005700 <HAL_GetTick>
 80083e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80083e6:	e009      	b.n	80083fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80083e8:	f7fd f98a 	bl	8005700 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083f6:	d901      	bls.n	80083fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80083f8:	2303      	movs	r3, #3
 80083fa:	e007      	b.n	800840c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80083fc:	4b06      	ldr	r3, [pc, #24]	; (8008418 <HAL_PWREx_EnableOverDrive+0x9c>)
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008404:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008408:	d1ee      	bne.n	80083e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	40023800 	.word	0x40023800
 8008418:	40007000 	.word	0x40007000

0800841c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008424:	2300      	movs	r3, #0
 8008426:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e291      	b.n	8008956 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 8087 	beq.w	800854e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008440:	4b96      	ldr	r3, [pc, #600]	; (800869c <HAL_RCC_OscConfig+0x280>)
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f003 030c 	and.w	r3, r3, #12
 8008448:	2b04      	cmp	r3, #4
 800844a:	d00c      	beq.n	8008466 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800844c:	4b93      	ldr	r3, [pc, #588]	; (800869c <HAL_RCC_OscConfig+0x280>)
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f003 030c 	and.w	r3, r3, #12
 8008454:	2b08      	cmp	r3, #8
 8008456:	d112      	bne.n	800847e <HAL_RCC_OscConfig+0x62>
 8008458:	4b90      	ldr	r3, [pc, #576]	; (800869c <HAL_RCC_OscConfig+0x280>)
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008464:	d10b      	bne.n	800847e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008466:	4b8d      	ldr	r3, [pc, #564]	; (800869c <HAL_RCC_OscConfig+0x280>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d06c      	beq.n	800854c <HAL_RCC_OscConfig+0x130>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d168      	bne.n	800854c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e26b      	b.n	8008956 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008486:	d106      	bne.n	8008496 <HAL_RCC_OscConfig+0x7a>
 8008488:	4b84      	ldr	r3, [pc, #528]	; (800869c <HAL_RCC_OscConfig+0x280>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a83      	ldr	r2, [pc, #524]	; (800869c <HAL_RCC_OscConfig+0x280>)
 800848e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	e02e      	b.n	80084f4 <HAL_RCC_OscConfig+0xd8>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10c      	bne.n	80084b8 <HAL_RCC_OscConfig+0x9c>
 800849e:	4b7f      	ldr	r3, [pc, #508]	; (800869c <HAL_RCC_OscConfig+0x280>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a7e      	ldr	r2, [pc, #504]	; (800869c <HAL_RCC_OscConfig+0x280>)
 80084a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084a8:	6013      	str	r3, [r2, #0]
 80084aa:	4b7c      	ldr	r3, [pc, #496]	; (800869c <HAL_RCC_OscConfig+0x280>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a7b      	ldr	r2, [pc, #492]	; (800869c <HAL_RCC_OscConfig+0x280>)
 80084b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084b4:	6013      	str	r3, [r2, #0]
 80084b6:	e01d      	b.n	80084f4 <HAL_RCC_OscConfig+0xd8>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084c0:	d10c      	bne.n	80084dc <HAL_RCC_OscConfig+0xc0>
 80084c2:	4b76      	ldr	r3, [pc, #472]	; (800869c <HAL_RCC_OscConfig+0x280>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a75      	ldr	r2, [pc, #468]	; (800869c <HAL_RCC_OscConfig+0x280>)
 80084c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084cc:	6013      	str	r3, [r2, #0]
 80084ce:	4b73      	ldr	r3, [pc, #460]	; (800869c <HAL_RCC_OscConfig+0x280>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a72      	ldr	r2, [pc, #456]	; (800869c <HAL_RCC_OscConfig+0x280>)
 80084d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084d8:	6013      	str	r3, [r2, #0]
 80084da:	e00b      	b.n	80084f4 <HAL_RCC_OscConfig+0xd8>
 80084dc:	4b6f      	ldr	r3, [pc, #444]	; (800869c <HAL_RCC_OscConfig+0x280>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a6e      	ldr	r2, [pc, #440]	; (800869c <HAL_RCC_OscConfig+0x280>)
 80084e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084e6:	6013      	str	r3, [r2, #0]
 80084e8:	4b6c      	ldr	r3, [pc, #432]	; (800869c <HAL_RCC_OscConfig+0x280>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a6b      	ldr	r2, [pc, #428]	; (800869c <HAL_RCC_OscConfig+0x280>)
 80084ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d013      	beq.n	8008524 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084fc:	f7fd f900 	bl	8005700 <HAL_GetTick>
 8008500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008502:	e008      	b.n	8008516 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008504:	f7fd f8fc 	bl	8005700 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	2b64      	cmp	r3, #100	; 0x64
 8008510:	d901      	bls.n	8008516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e21f      	b.n	8008956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008516:	4b61      	ldr	r3, [pc, #388]	; (800869c <HAL_RCC_OscConfig+0x280>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d0f0      	beq.n	8008504 <HAL_RCC_OscConfig+0xe8>
 8008522:	e014      	b.n	800854e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008524:	f7fd f8ec 	bl	8005700 <HAL_GetTick>
 8008528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800852a:	e008      	b.n	800853e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800852c:	f7fd f8e8 	bl	8005700 <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	2b64      	cmp	r3, #100	; 0x64
 8008538:	d901      	bls.n	800853e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e20b      	b.n	8008956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800853e:	4b57      	ldr	r3, [pc, #348]	; (800869c <HAL_RCC_OscConfig+0x280>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1f0      	bne.n	800852c <HAL_RCC_OscConfig+0x110>
 800854a:	e000      	b.n	800854e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800854c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	2b00      	cmp	r3, #0
 8008558:	d069      	beq.n	800862e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800855a:	4b50      	ldr	r3, [pc, #320]	; (800869c <HAL_RCC_OscConfig+0x280>)
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f003 030c 	and.w	r3, r3, #12
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00b      	beq.n	800857e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008566:	4b4d      	ldr	r3, [pc, #308]	; (800869c <HAL_RCC_OscConfig+0x280>)
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f003 030c 	and.w	r3, r3, #12
 800856e:	2b08      	cmp	r3, #8
 8008570:	d11c      	bne.n	80085ac <HAL_RCC_OscConfig+0x190>
 8008572:	4b4a      	ldr	r3, [pc, #296]	; (800869c <HAL_RCC_OscConfig+0x280>)
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d116      	bne.n	80085ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800857e:	4b47      	ldr	r3, [pc, #284]	; (800869c <HAL_RCC_OscConfig+0x280>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	2b00      	cmp	r3, #0
 8008588:	d005      	beq.n	8008596 <HAL_RCC_OscConfig+0x17a>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	2b01      	cmp	r3, #1
 8008590:	d001      	beq.n	8008596 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e1df      	b.n	8008956 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008596:	4b41      	ldr	r3, [pc, #260]	; (800869c <HAL_RCC_OscConfig+0x280>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	00db      	lsls	r3, r3, #3
 80085a4:	493d      	ldr	r1, [pc, #244]	; (800869c <HAL_RCC_OscConfig+0x280>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085aa:	e040      	b.n	800862e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d023      	beq.n	80085fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085b4:	4b39      	ldr	r3, [pc, #228]	; (800869c <HAL_RCC_OscConfig+0x280>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a38      	ldr	r2, [pc, #224]	; (800869c <HAL_RCC_OscConfig+0x280>)
 80085ba:	f043 0301 	orr.w	r3, r3, #1
 80085be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085c0:	f7fd f89e 	bl	8005700 <HAL_GetTick>
 80085c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085c6:	e008      	b.n	80085da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085c8:	f7fd f89a 	bl	8005700 <HAL_GetTick>
 80085cc:	4602      	mov	r2, r0
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d901      	bls.n	80085da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e1bd      	b.n	8008956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085da:	4b30      	ldr	r3, [pc, #192]	; (800869c <HAL_RCC_OscConfig+0x280>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d0f0      	beq.n	80085c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085e6:	4b2d      	ldr	r3, [pc, #180]	; (800869c <HAL_RCC_OscConfig+0x280>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	00db      	lsls	r3, r3, #3
 80085f4:	4929      	ldr	r1, [pc, #164]	; (800869c <HAL_RCC_OscConfig+0x280>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	600b      	str	r3, [r1, #0]
 80085fa:	e018      	b.n	800862e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085fc:	4b27      	ldr	r3, [pc, #156]	; (800869c <HAL_RCC_OscConfig+0x280>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a26      	ldr	r2, [pc, #152]	; (800869c <HAL_RCC_OscConfig+0x280>)
 8008602:	f023 0301 	bic.w	r3, r3, #1
 8008606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008608:	f7fd f87a 	bl	8005700 <HAL_GetTick>
 800860c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800860e:	e008      	b.n	8008622 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008610:	f7fd f876 	bl	8005700 <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	2b02      	cmp	r3, #2
 800861c:	d901      	bls.n	8008622 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e199      	b.n	8008956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008622:	4b1e      	ldr	r3, [pc, #120]	; (800869c <HAL_RCC_OscConfig+0x280>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 0302 	and.w	r3, r3, #2
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1f0      	bne.n	8008610 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0308 	and.w	r3, r3, #8
 8008636:	2b00      	cmp	r3, #0
 8008638:	d038      	beq.n	80086ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d019      	beq.n	8008676 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008642:	4b16      	ldr	r3, [pc, #88]	; (800869c <HAL_RCC_OscConfig+0x280>)
 8008644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008646:	4a15      	ldr	r2, [pc, #84]	; (800869c <HAL_RCC_OscConfig+0x280>)
 8008648:	f043 0301 	orr.w	r3, r3, #1
 800864c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800864e:	f7fd f857 	bl	8005700 <HAL_GetTick>
 8008652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008654:	e008      	b.n	8008668 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008656:	f7fd f853 	bl	8005700 <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	2b02      	cmp	r3, #2
 8008662:	d901      	bls.n	8008668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e176      	b.n	8008956 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008668:	4b0c      	ldr	r3, [pc, #48]	; (800869c <HAL_RCC_OscConfig+0x280>)
 800866a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800866c:	f003 0302 	and.w	r3, r3, #2
 8008670:	2b00      	cmp	r3, #0
 8008672:	d0f0      	beq.n	8008656 <HAL_RCC_OscConfig+0x23a>
 8008674:	e01a      	b.n	80086ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008676:	4b09      	ldr	r3, [pc, #36]	; (800869c <HAL_RCC_OscConfig+0x280>)
 8008678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800867a:	4a08      	ldr	r2, [pc, #32]	; (800869c <HAL_RCC_OscConfig+0x280>)
 800867c:	f023 0301 	bic.w	r3, r3, #1
 8008680:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008682:	f7fd f83d 	bl	8005700 <HAL_GetTick>
 8008686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008688:	e00a      	b.n	80086a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800868a:	f7fd f839 	bl	8005700 <HAL_GetTick>
 800868e:	4602      	mov	r2, r0
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	2b02      	cmp	r3, #2
 8008696:	d903      	bls.n	80086a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008698:	2303      	movs	r3, #3
 800869a:	e15c      	b.n	8008956 <HAL_RCC_OscConfig+0x53a>
 800869c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086a0:	4b91      	ldr	r3, [pc, #580]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 80086a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086a4:	f003 0302 	and.w	r3, r3, #2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1ee      	bne.n	800868a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 80a4 	beq.w	8008802 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086ba:	4b8b      	ldr	r3, [pc, #556]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 80086bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10d      	bne.n	80086e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80086c6:	4b88      	ldr	r3, [pc, #544]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 80086c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ca:	4a87      	ldr	r2, [pc, #540]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 80086cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086d0:	6413      	str	r3, [r2, #64]	; 0x40
 80086d2:	4b85      	ldr	r3, [pc, #532]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 80086d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086da:	60bb      	str	r3, [r7, #8]
 80086dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086de:	2301      	movs	r3, #1
 80086e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80086e2:	4b82      	ldr	r3, [pc, #520]	; (80088ec <HAL_RCC_OscConfig+0x4d0>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d118      	bne.n	8008720 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80086ee:	4b7f      	ldr	r3, [pc, #508]	; (80088ec <HAL_RCC_OscConfig+0x4d0>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a7e      	ldr	r2, [pc, #504]	; (80088ec <HAL_RCC_OscConfig+0x4d0>)
 80086f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80086fa:	f7fd f801 	bl	8005700 <HAL_GetTick>
 80086fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008700:	e008      	b.n	8008714 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008702:	f7fc fffd 	bl	8005700 <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	2b64      	cmp	r3, #100	; 0x64
 800870e:	d901      	bls.n	8008714 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e120      	b.n	8008956 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008714:	4b75      	ldr	r3, [pc, #468]	; (80088ec <HAL_RCC_OscConfig+0x4d0>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800871c:	2b00      	cmp	r3, #0
 800871e:	d0f0      	beq.n	8008702 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d106      	bne.n	8008736 <HAL_RCC_OscConfig+0x31a>
 8008728:	4b6f      	ldr	r3, [pc, #444]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 800872a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800872c:	4a6e      	ldr	r2, [pc, #440]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 800872e:	f043 0301 	orr.w	r3, r3, #1
 8008732:	6713      	str	r3, [r2, #112]	; 0x70
 8008734:	e02d      	b.n	8008792 <HAL_RCC_OscConfig+0x376>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10c      	bne.n	8008758 <HAL_RCC_OscConfig+0x33c>
 800873e:	4b6a      	ldr	r3, [pc, #424]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 8008740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008742:	4a69      	ldr	r2, [pc, #420]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 8008744:	f023 0301 	bic.w	r3, r3, #1
 8008748:	6713      	str	r3, [r2, #112]	; 0x70
 800874a:	4b67      	ldr	r3, [pc, #412]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 800874c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800874e:	4a66      	ldr	r2, [pc, #408]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 8008750:	f023 0304 	bic.w	r3, r3, #4
 8008754:	6713      	str	r3, [r2, #112]	; 0x70
 8008756:	e01c      	b.n	8008792 <HAL_RCC_OscConfig+0x376>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	2b05      	cmp	r3, #5
 800875e:	d10c      	bne.n	800877a <HAL_RCC_OscConfig+0x35e>
 8008760:	4b61      	ldr	r3, [pc, #388]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 8008762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008764:	4a60      	ldr	r2, [pc, #384]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 8008766:	f043 0304 	orr.w	r3, r3, #4
 800876a:	6713      	str	r3, [r2, #112]	; 0x70
 800876c:	4b5e      	ldr	r3, [pc, #376]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 800876e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008770:	4a5d      	ldr	r2, [pc, #372]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 8008772:	f043 0301 	orr.w	r3, r3, #1
 8008776:	6713      	str	r3, [r2, #112]	; 0x70
 8008778:	e00b      	b.n	8008792 <HAL_RCC_OscConfig+0x376>
 800877a:	4b5b      	ldr	r3, [pc, #364]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 800877c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800877e:	4a5a      	ldr	r2, [pc, #360]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 8008780:	f023 0301 	bic.w	r3, r3, #1
 8008784:	6713      	str	r3, [r2, #112]	; 0x70
 8008786:	4b58      	ldr	r3, [pc, #352]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 8008788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800878a:	4a57      	ldr	r2, [pc, #348]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 800878c:	f023 0304 	bic.w	r3, r3, #4
 8008790:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d015      	beq.n	80087c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800879a:	f7fc ffb1 	bl	8005700 <HAL_GetTick>
 800879e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087a0:	e00a      	b.n	80087b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087a2:	f7fc ffad 	bl	8005700 <HAL_GetTick>
 80087a6:	4602      	mov	r2, r0
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d901      	bls.n	80087b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e0ce      	b.n	8008956 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087b8:	4b4b      	ldr	r3, [pc, #300]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 80087ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087bc:	f003 0302 	and.w	r3, r3, #2
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d0ee      	beq.n	80087a2 <HAL_RCC_OscConfig+0x386>
 80087c4:	e014      	b.n	80087f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087c6:	f7fc ff9b 	bl	8005700 <HAL_GetTick>
 80087ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087cc:	e00a      	b.n	80087e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087ce:	f7fc ff97 	bl	8005700 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80087dc:	4293      	cmp	r3, r2
 80087de:	d901      	bls.n	80087e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e0b8      	b.n	8008956 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087e4:	4b40      	ldr	r3, [pc, #256]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 80087e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e8:	f003 0302 	and.w	r3, r3, #2
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1ee      	bne.n	80087ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80087f0:	7dfb      	ldrb	r3, [r7, #23]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d105      	bne.n	8008802 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087f6:	4b3c      	ldr	r3, [pc, #240]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 80087f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fa:	4a3b      	ldr	r2, [pc, #236]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 80087fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008800:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 80a4 	beq.w	8008954 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800880c:	4b36      	ldr	r3, [pc, #216]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	f003 030c 	and.w	r3, r3, #12
 8008814:	2b08      	cmp	r3, #8
 8008816:	d06b      	beq.n	80088f0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	2b02      	cmp	r3, #2
 800881e:	d149      	bne.n	80088b4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008820:	4b31      	ldr	r3, [pc, #196]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a30      	ldr	r2, [pc, #192]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 8008826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800882a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800882c:	f7fc ff68 	bl	8005700 <HAL_GetTick>
 8008830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008832:	e008      	b.n	8008846 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008834:	f7fc ff64 	bl	8005700 <HAL_GetTick>
 8008838:	4602      	mov	r2, r0
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	2b02      	cmp	r3, #2
 8008840:	d901      	bls.n	8008846 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e087      	b.n	8008956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008846:	4b28      	ldr	r3, [pc, #160]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1f0      	bne.n	8008834 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	69da      	ldr	r2, [r3, #28]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	431a      	orrs	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	019b      	lsls	r3, r3, #6
 8008862:	431a      	orrs	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008868:	085b      	lsrs	r3, r3, #1
 800886a:	3b01      	subs	r3, #1
 800886c:	041b      	lsls	r3, r3, #16
 800886e:	431a      	orrs	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008874:	061b      	lsls	r3, r3, #24
 8008876:	4313      	orrs	r3, r2
 8008878:	4a1b      	ldr	r2, [pc, #108]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 800887a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800887e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008880:	4b19      	ldr	r3, [pc, #100]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a18      	ldr	r2, [pc, #96]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 8008886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800888a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800888c:	f7fc ff38 	bl	8005700 <HAL_GetTick>
 8008890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008892:	e008      	b.n	80088a6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008894:	f7fc ff34 	bl	8005700 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e057      	b.n	8008956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088a6:	4b10      	ldr	r3, [pc, #64]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0f0      	beq.n	8008894 <HAL_RCC_OscConfig+0x478>
 80088b2:	e04f      	b.n	8008954 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088b4:	4b0c      	ldr	r3, [pc, #48]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a0b      	ldr	r2, [pc, #44]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 80088ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088c0:	f7fc ff1e 	bl	8005700 <HAL_GetTick>
 80088c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088c6:	e008      	b.n	80088da <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088c8:	f7fc ff1a 	bl	8005700 <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d901      	bls.n	80088da <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e03d      	b.n	8008956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088da:	4b03      	ldr	r3, [pc, #12]	; (80088e8 <HAL_RCC_OscConfig+0x4cc>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1f0      	bne.n	80088c8 <HAL_RCC_OscConfig+0x4ac>
 80088e6:	e035      	b.n	8008954 <HAL_RCC_OscConfig+0x538>
 80088e8:	40023800 	.word	0x40023800
 80088ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80088f0:	4b1b      	ldr	r3, [pc, #108]	; (8008960 <HAL_RCC_OscConfig+0x544>)
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d028      	beq.n	8008950 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008908:	429a      	cmp	r2, r3
 800890a:	d121      	bne.n	8008950 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008916:	429a      	cmp	r2, r3
 8008918:	d11a      	bne.n	8008950 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008920:	4013      	ands	r3, r2
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008926:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008928:	4293      	cmp	r3, r2
 800892a:	d111      	bne.n	8008950 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008936:	085b      	lsrs	r3, r3, #1
 8008938:	3b01      	subs	r3, #1
 800893a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800893c:	429a      	cmp	r2, r3
 800893e:	d107      	bne.n	8008950 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800894c:	429a      	cmp	r2, r3
 800894e:	d001      	beq.n	8008954 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e000      	b.n	8008956 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3718      	adds	r7, #24
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	40023800 	.word	0x40023800

08008964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800896e:	2300      	movs	r3, #0
 8008970:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e0d0      	b.n	8008b1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800897c:	4b6a      	ldr	r3, [pc, #424]	; (8008b28 <HAL_RCC_ClockConfig+0x1c4>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 030f 	and.w	r3, r3, #15
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	429a      	cmp	r2, r3
 8008988:	d910      	bls.n	80089ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800898a:	4b67      	ldr	r3, [pc, #412]	; (8008b28 <HAL_RCC_ClockConfig+0x1c4>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f023 020f 	bic.w	r2, r3, #15
 8008992:	4965      	ldr	r1, [pc, #404]	; (8008b28 <HAL_RCC_ClockConfig+0x1c4>)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	4313      	orrs	r3, r2
 8008998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800899a:	4b63      	ldr	r3, [pc, #396]	; (8008b28 <HAL_RCC_ClockConfig+0x1c4>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 030f 	and.w	r3, r3, #15
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d001      	beq.n	80089ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e0b8      	b.n	8008b1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0302 	and.w	r3, r3, #2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d020      	beq.n	80089fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0304 	and.w	r3, r3, #4
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d005      	beq.n	80089d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089c4:	4b59      	ldr	r3, [pc, #356]	; (8008b2c <HAL_RCC_ClockConfig+0x1c8>)
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	4a58      	ldr	r2, [pc, #352]	; (8008b2c <HAL_RCC_ClockConfig+0x1c8>)
 80089ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80089ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0308 	and.w	r3, r3, #8
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d005      	beq.n	80089e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80089dc:	4b53      	ldr	r3, [pc, #332]	; (8008b2c <HAL_RCC_ClockConfig+0x1c8>)
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	4a52      	ldr	r2, [pc, #328]	; (8008b2c <HAL_RCC_ClockConfig+0x1c8>)
 80089e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80089e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089e8:	4b50      	ldr	r3, [pc, #320]	; (8008b2c <HAL_RCC_ClockConfig+0x1c8>)
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	494d      	ldr	r1, [pc, #308]	; (8008b2c <HAL_RCC_ClockConfig+0x1c8>)
 80089f6:	4313      	orrs	r3, r2
 80089f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 0301 	and.w	r3, r3, #1
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d040      	beq.n	8008a88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d107      	bne.n	8008a1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a0e:	4b47      	ldr	r3, [pc, #284]	; (8008b2c <HAL_RCC_ClockConfig+0x1c8>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d115      	bne.n	8008a46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e07f      	b.n	8008b1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d107      	bne.n	8008a36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a26:	4b41      	ldr	r3, [pc, #260]	; (8008b2c <HAL_RCC_ClockConfig+0x1c8>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d109      	bne.n	8008a46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e073      	b.n	8008b1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a36:	4b3d      	ldr	r3, [pc, #244]	; (8008b2c <HAL_RCC_ClockConfig+0x1c8>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0302 	and.w	r3, r3, #2
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e06b      	b.n	8008b1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a46:	4b39      	ldr	r3, [pc, #228]	; (8008b2c <HAL_RCC_ClockConfig+0x1c8>)
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	f023 0203 	bic.w	r2, r3, #3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	4936      	ldr	r1, [pc, #216]	; (8008b2c <HAL_RCC_ClockConfig+0x1c8>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a58:	f7fc fe52 	bl	8005700 <HAL_GetTick>
 8008a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a5e:	e00a      	b.n	8008a76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a60:	f7fc fe4e 	bl	8005700 <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d901      	bls.n	8008a76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e053      	b.n	8008b1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a76:	4b2d      	ldr	r3, [pc, #180]	; (8008b2c <HAL_RCC_ClockConfig+0x1c8>)
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f003 020c 	and.w	r2, r3, #12
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d1eb      	bne.n	8008a60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a88:	4b27      	ldr	r3, [pc, #156]	; (8008b28 <HAL_RCC_ClockConfig+0x1c4>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 030f 	and.w	r3, r3, #15
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d210      	bcs.n	8008ab8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a96:	4b24      	ldr	r3, [pc, #144]	; (8008b28 <HAL_RCC_ClockConfig+0x1c4>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f023 020f 	bic.w	r2, r3, #15
 8008a9e:	4922      	ldr	r1, [pc, #136]	; (8008b28 <HAL_RCC_ClockConfig+0x1c4>)
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aa6:	4b20      	ldr	r3, [pc, #128]	; (8008b28 <HAL_RCC_ClockConfig+0x1c4>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 030f 	and.w	r3, r3, #15
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d001      	beq.n	8008ab8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e032      	b.n	8008b1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0304 	and.w	r3, r3, #4
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d008      	beq.n	8008ad6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ac4:	4b19      	ldr	r3, [pc, #100]	; (8008b2c <HAL_RCC_ClockConfig+0x1c8>)
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	4916      	ldr	r1, [pc, #88]	; (8008b2c <HAL_RCC_ClockConfig+0x1c8>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 0308 	and.w	r3, r3, #8
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d009      	beq.n	8008af6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008ae2:	4b12      	ldr	r3, [pc, #72]	; (8008b2c <HAL_RCC_ClockConfig+0x1c8>)
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	00db      	lsls	r3, r3, #3
 8008af0:	490e      	ldr	r1, [pc, #56]	; (8008b2c <HAL_RCC_ClockConfig+0x1c8>)
 8008af2:	4313      	orrs	r3, r2
 8008af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008af6:	f000 f821 	bl	8008b3c <HAL_RCC_GetSysClockFreq>
 8008afa:	4602      	mov	r2, r0
 8008afc:	4b0b      	ldr	r3, [pc, #44]	; (8008b2c <HAL_RCC_ClockConfig+0x1c8>)
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	091b      	lsrs	r3, r3, #4
 8008b02:	f003 030f 	and.w	r3, r3, #15
 8008b06:	490a      	ldr	r1, [pc, #40]	; (8008b30 <HAL_RCC_ClockConfig+0x1cc>)
 8008b08:	5ccb      	ldrb	r3, [r1, r3]
 8008b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b0e:	4a09      	ldr	r2, [pc, #36]	; (8008b34 <HAL_RCC_ClockConfig+0x1d0>)
 8008b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008b12:	4b09      	ldr	r3, [pc, #36]	; (8008b38 <HAL_RCC_ClockConfig+0x1d4>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fa feee 	bl	80038f8 <HAL_InitTick>

  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	40023c00 	.word	0x40023c00
 8008b2c:	40023800 	.word	0x40023800
 8008b30:	0800f5a0 	.word	0x0800f5a0
 8008b34:	20000040 	.word	0x20000040
 8008b38:	20000078 	.word	0x20000078

08008b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b40:	b090      	sub	sp, #64	; 0x40
 8008b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008b44:	2300      	movs	r3, #0
 8008b46:	637b      	str	r3, [r7, #52]	; 0x34
 8008b48:	2300      	movs	r3, #0
 8008b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8008b50:	2300      	movs	r3, #0
 8008b52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b54:	4b59      	ldr	r3, [pc, #356]	; (8008cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f003 030c 	and.w	r3, r3, #12
 8008b5c:	2b08      	cmp	r3, #8
 8008b5e:	d00d      	beq.n	8008b7c <HAL_RCC_GetSysClockFreq+0x40>
 8008b60:	2b08      	cmp	r3, #8
 8008b62:	f200 80a1 	bhi.w	8008ca8 <HAL_RCC_GetSysClockFreq+0x16c>
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d002      	beq.n	8008b70 <HAL_RCC_GetSysClockFreq+0x34>
 8008b6a:	2b04      	cmp	r3, #4
 8008b6c:	d003      	beq.n	8008b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8008b6e:	e09b      	b.n	8008ca8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b70:	4b53      	ldr	r3, [pc, #332]	; (8008cc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8008b72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008b74:	e09b      	b.n	8008cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b76:	4b53      	ldr	r3, [pc, #332]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008b78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008b7a:	e098      	b.n	8008cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b7c:	4b4f      	ldr	r3, [pc, #316]	; (8008cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b84:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008b86:	4b4d      	ldr	r3, [pc, #308]	; (8008cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d028      	beq.n	8008be4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b92:	4b4a      	ldr	r3, [pc, #296]	; (8008cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	099b      	lsrs	r3, r3, #6
 8008b98:	2200      	movs	r2, #0
 8008b9a:	623b      	str	r3, [r7, #32]
 8008b9c:	627a      	str	r2, [r7, #36]	; 0x24
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	4b47      	ldr	r3, [pc, #284]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008ba8:	fb03 f201 	mul.w	r2, r3, r1
 8008bac:	2300      	movs	r3, #0
 8008bae:	fb00 f303 	mul.w	r3, r0, r3
 8008bb2:	4413      	add	r3, r2
 8008bb4:	4a43      	ldr	r2, [pc, #268]	; (8008cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008bb6:	fba0 1202 	umull	r1, r2, r0, r2
 8008bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bbc:	460a      	mov	r2, r1
 8008bbe:	62ba      	str	r2, [r7, #40]	; 0x28
 8008bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bc2:	4413      	add	r3, r2
 8008bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc8:	2200      	movs	r2, #0
 8008bca:	61bb      	str	r3, [r7, #24]
 8008bcc:	61fa      	str	r2, [r7, #28]
 8008bce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008bd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008bd6:	f7f7 fb6b 	bl	80002b0 <__aeabi_uldivmod>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	4613      	mov	r3, r2
 8008be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008be2:	e053      	b.n	8008c8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008be4:	4b35      	ldr	r3, [pc, #212]	; (8008cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	099b      	lsrs	r3, r3, #6
 8008bea:	2200      	movs	r2, #0
 8008bec:	613b      	str	r3, [r7, #16]
 8008bee:	617a      	str	r2, [r7, #20]
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008bf6:	f04f 0b00 	mov.w	fp, #0
 8008bfa:	4652      	mov	r2, sl
 8008bfc:	465b      	mov	r3, fp
 8008bfe:	f04f 0000 	mov.w	r0, #0
 8008c02:	f04f 0100 	mov.w	r1, #0
 8008c06:	0159      	lsls	r1, r3, #5
 8008c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c0c:	0150      	lsls	r0, r2, #5
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	ebb2 080a 	subs.w	r8, r2, sl
 8008c16:	eb63 090b 	sbc.w	r9, r3, fp
 8008c1a:	f04f 0200 	mov.w	r2, #0
 8008c1e:	f04f 0300 	mov.w	r3, #0
 8008c22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008c26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008c2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008c2e:	ebb2 0408 	subs.w	r4, r2, r8
 8008c32:	eb63 0509 	sbc.w	r5, r3, r9
 8008c36:	f04f 0200 	mov.w	r2, #0
 8008c3a:	f04f 0300 	mov.w	r3, #0
 8008c3e:	00eb      	lsls	r3, r5, #3
 8008c40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c44:	00e2      	lsls	r2, r4, #3
 8008c46:	4614      	mov	r4, r2
 8008c48:	461d      	mov	r5, r3
 8008c4a:	eb14 030a 	adds.w	r3, r4, sl
 8008c4e:	603b      	str	r3, [r7, #0]
 8008c50:	eb45 030b 	adc.w	r3, r5, fp
 8008c54:	607b      	str	r3, [r7, #4]
 8008c56:	f04f 0200 	mov.w	r2, #0
 8008c5a:	f04f 0300 	mov.w	r3, #0
 8008c5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c62:	4629      	mov	r1, r5
 8008c64:	028b      	lsls	r3, r1, #10
 8008c66:	4621      	mov	r1, r4
 8008c68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008c6c:	4621      	mov	r1, r4
 8008c6e:	028a      	lsls	r2, r1, #10
 8008c70:	4610      	mov	r0, r2
 8008c72:	4619      	mov	r1, r3
 8008c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c76:	2200      	movs	r2, #0
 8008c78:	60bb      	str	r3, [r7, #8]
 8008c7a:	60fa      	str	r2, [r7, #12]
 8008c7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c80:	f7f7 fb16 	bl	80002b0 <__aeabi_uldivmod>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	4613      	mov	r3, r2
 8008c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008c8c:	4b0b      	ldr	r3, [pc, #44]	; (8008cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	0c1b      	lsrs	r3, r3, #16
 8008c92:	f003 0303 	and.w	r3, r3, #3
 8008c96:	3301      	adds	r3, #1
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8008c9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008ca6:	e002      	b.n	8008cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ca8:	4b05      	ldr	r3, [pc, #20]	; (8008cc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8008caa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3740      	adds	r7, #64	; 0x40
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cba:	bf00      	nop
 8008cbc:	40023800 	.word	0x40023800
 8008cc0:	00f42400 	.word	0x00f42400
 8008cc4:	017d7840 	.word	0x017d7840

08008cc8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ccc:	4b03      	ldr	r3, [pc, #12]	; (8008cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8008cce:	681b      	ldr	r3, [r3, #0]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	20000040 	.word	0x20000040

08008ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008ce4:	f7ff fff0 	bl	8008cc8 <HAL_RCC_GetHCLKFreq>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	0a9b      	lsrs	r3, r3, #10
 8008cf0:	f003 0307 	and.w	r3, r3, #7
 8008cf4:	4903      	ldr	r1, [pc, #12]	; (8008d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cf6:	5ccb      	ldrb	r3, [r1, r3]
 8008cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	40023800 	.word	0x40023800
 8008d04:	0800f5b0 	.word	0x0800f5b0

08008d08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	220f      	movs	r2, #15
 8008d16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008d18:	4b12      	ldr	r3, [pc, #72]	; (8008d64 <HAL_RCC_GetClockConfig+0x5c>)
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	f003 0203 	and.w	r2, r3, #3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008d24:	4b0f      	ldr	r3, [pc, #60]	; (8008d64 <HAL_RCC_GetClockConfig+0x5c>)
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008d30:	4b0c      	ldr	r3, [pc, #48]	; (8008d64 <HAL_RCC_GetClockConfig+0x5c>)
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008d3c:	4b09      	ldr	r3, [pc, #36]	; (8008d64 <HAL_RCC_GetClockConfig+0x5c>)
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	08db      	lsrs	r3, r3, #3
 8008d42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008d4a:	4b07      	ldr	r3, [pc, #28]	; (8008d68 <HAL_RCC_GetClockConfig+0x60>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 020f 	and.w	r2, r3, #15
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	601a      	str	r2, [r3, #0]
}
 8008d56:	bf00      	nop
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	40023800 	.word	0x40023800
 8008d68:	40023c00 	.word	0x40023c00

08008d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b088      	sub	sp, #32
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008d80:	2300      	movs	r3, #0
 8008d82:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008d84:	2300      	movs	r3, #0
 8008d86:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 0301 	and.w	r3, r3, #1
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d012      	beq.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008d94:	4b69      	ldr	r3, [pc, #420]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	4a68      	ldr	r2, [pc, #416]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008d9e:	6093      	str	r3, [r2, #8]
 8008da0:	4b66      	ldr	r3, [pc, #408]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008da2:	689a      	ldr	r2, [r3, #8]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da8:	4964      	ldr	r1, [pc, #400]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d101      	bne.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008db6:	2301      	movs	r3, #1
 8008db8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d017      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008dc6:	4b5d      	ldr	r3, [pc, #372]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd4:	4959      	ldr	r1, [pc, #356]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008de4:	d101      	bne.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008de6:	2301      	movs	r3, #1
 8008de8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d101      	bne.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008df2:	2301      	movs	r3, #1
 8008df4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d017      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008e02:	4b4e      	ldr	r3, [pc, #312]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e10:	494a      	ldr	r1, [pc, #296]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e12:	4313      	orrs	r3, r2
 8008e14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e20:	d101      	bne.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008e22:	2301      	movs	r3, #1
 8008e24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0320 	and.w	r3, r3, #32
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f000 808b 	beq.w	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008e50:	4b3a      	ldr	r3, [pc, #232]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e54:	4a39      	ldr	r2, [pc, #228]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8008e5c:	4b37      	ldr	r3, [pc, #220]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e64:	60bb      	str	r3, [r7, #8]
 8008e66:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008e68:	4b35      	ldr	r3, [pc, #212]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a34      	ldr	r2, [pc, #208]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e74:	f7fc fc44 	bl	8005700 <HAL_GetTick>
 8008e78:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008e7a:	e008      	b.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e7c:	f7fc fc40 	bl	8005700 <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	2b64      	cmp	r3, #100	; 0x64
 8008e88:	d901      	bls.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e357      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008e8e:	4b2c      	ldr	r3, [pc, #176]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d0f0      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e9a:	4b28      	ldr	r3, [pc, #160]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ea2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d035      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eb2:	693a      	ldr	r2, [r7, #16]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d02e      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008eb8:	4b20      	ldr	r3, [pc, #128]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ec0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008ec2:	4b1e      	ldr	r3, [pc, #120]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec6:	4a1d      	ldr	r2, [pc, #116]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ecc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008ece:	4b1b      	ldr	r3, [pc, #108]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed2:	4a1a      	ldr	r2, [pc, #104]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ed8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008eda:	4a18      	ldr	r2, [pc, #96]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008ee0:	4b16      	ldr	r3, [pc, #88]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d114      	bne.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eec:	f7fc fc08 	bl	8005700 <HAL_GetTick>
 8008ef0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ef2:	e00a      	b.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ef4:	f7fc fc04 	bl	8005700 <HAL_GetTick>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d901      	bls.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e319      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f0a:	4b0c      	ldr	r3, [pc, #48]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f0e:	f003 0302 	and.w	r3, r3, #2
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d0ee      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f22:	d111      	bne.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008f24:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008f30:	4b04      	ldr	r3, [pc, #16]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008f32:	400b      	ands	r3, r1
 8008f34:	4901      	ldr	r1, [pc, #4]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	608b      	str	r3, [r1, #8]
 8008f3a:	e00b      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008f3c:	40023800 	.word	0x40023800
 8008f40:	40007000 	.word	0x40007000
 8008f44:	0ffffcff 	.word	0x0ffffcff
 8008f48:	4baa      	ldr	r3, [pc, #680]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	4aa9      	ldr	r2, [pc, #676]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008f52:	6093      	str	r3, [r2, #8]
 8008f54:	4ba7      	ldr	r3, [pc, #668]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f60:	49a4      	ldr	r1, [pc, #656]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f62:	4313      	orrs	r3, r2
 8008f64:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0310 	and.w	r3, r3, #16
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d010      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f72:	4ba0      	ldr	r3, [pc, #640]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f78:	4a9e      	ldr	r2, [pc, #632]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008f82:	4b9c      	ldr	r3, [pc, #624]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8c:	4999      	ldr	r1, [pc, #612]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00a      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008fa0:	4b94      	ldr	r3, [pc, #592]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fa6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fae:	4991      	ldr	r1, [pc, #580]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00a      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008fc2:	4b8c      	ldr	r3, [pc, #560]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fd0:	4988      	ldr	r1, [pc, #544]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00a      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008fe4:	4b83      	ldr	r3, [pc, #524]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ff2:	4980      	ldr	r1, [pc, #512]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00a      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009006:	4b7b      	ldr	r3, [pc, #492]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800900c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009014:	4977      	ldr	r1, [pc, #476]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009016:	4313      	orrs	r3, r2
 8009018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00a      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009028:	4b72      	ldr	r3, [pc, #456]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800902a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800902e:	f023 0203 	bic.w	r2, r3, #3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009036:	496f      	ldr	r1, [pc, #444]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009038:	4313      	orrs	r3, r2
 800903a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00a      	beq.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800904a:	4b6a      	ldr	r3, [pc, #424]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800904c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009050:	f023 020c 	bic.w	r2, r3, #12
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009058:	4966      	ldr	r1, [pc, #408]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800905a:	4313      	orrs	r3, r2
 800905c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00a      	beq.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800906c:	4b61      	ldr	r3, [pc, #388]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800906e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009072:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800907a:	495e      	ldr	r1, [pc, #376]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800907c:	4313      	orrs	r3, r2
 800907e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00a      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800908e:	4b59      	ldr	r3, [pc, #356]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009094:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800909c:	4955      	ldr	r1, [pc, #340]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800909e:	4313      	orrs	r3, r2
 80090a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00a      	beq.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80090b0:	4b50      	ldr	r3, [pc, #320]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090be:	494d      	ldr	r1, [pc, #308]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090c0:	4313      	orrs	r3, r2
 80090c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00a      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80090d2:	4b48      	ldr	r3, [pc, #288]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090e0:	4944      	ldr	r1, [pc, #272]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090e2:	4313      	orrs	r3, r2
 80090e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00a      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80090f4:	4b3f      	ldr	r3, [pc, #252]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009102:	493c      	ldr	r1, [pc, #240]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009104:	4313      	orrs	r3, r2
 8009106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00a      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009116:	4b37      	ldr	r3, [pc, #220]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800911c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009124:	4933      	ldr	r1, [pc, #204]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009126:	4313      	orrs	r3, r2
 8009128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00a      	beq.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009138:	4b2e      	ldr	r3, [pc, #184]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800913a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800913e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009146:	492b      	ldr	r1, [pc, #172]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009148:	4313      	orrs	r3, r2
 800914a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d011      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800915a:	4b26      	ldr	r3, [pc, #152]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800915c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009160:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009168:	4922      	ldr	r1, [pc, #136]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800916a:	4313      	orrs	r3, r2
 800916c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009178:	d101      	bne.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800917a:	2301      	movs	r3, #1
 800917c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0308 	and.w	r3, r3, #8
 8009186:	2b00      	cmp	r3, #0
 8009188:	d001      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800918a:	2301      	movs	r3, #1
 800918c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00a      	beq.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800919a:	4b16      	ldr	r3, [pc, #88]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800919c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091a8:	4912      	ldr	r1, [pc, #72]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091aa:	4313      	orrs	r3, r2
 80091ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00b      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80091bc:	4b0d      	ldr	r3, [pc, #52]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091cc:	4909      	ldr	r1, [pc, #36]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091ce:	4313      	orrs	r3, r2
 80091d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d006      	beq.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 80d9 	beq.w	800939a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80091e8:	4b02      	ldr	r3, [pc, #8]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a01      	ldr	r2, [pc, #4]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80091f2:	e001      	b.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80091f4:	40023800 	.word	0x40023800
 80091f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091fa:	f7fc fa81 	bl	8005700 <HAL_GetTick>
 80091fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009200:	e008      	b.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009202:	f7fc fa7d 	bl	8005700 <HAL_GetTick>
 8009206:	4602      	mov	r2, r0
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	2b64      	cmp	r3, #100	; 0x64
 800920e:	d901      	bls.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e194      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009214:	4b6c      	ldr	r3, [pc, #432]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1f0      	bne.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	2b00      	cmp	r3, #0
 800922a:	d021      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009230:	2b00      	cmp	r3, #0
 8009232:	d11d      	bne.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009234:	4b64      	ldr	r3, [pc, #400]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800923a:	0c1b      	lsrs	r3, r3, #16
 800923c:	f003 0303 	and.w	r3, r3, #3
 8009240:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009242:	4b61      	ldr	r3, [pc, #388]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009248:	0e1b      	lsrs	r3, r3, #24
 800924a:	f003 030f 	and.w	r3, r3, #15
 800924e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	019a      	lsls	r2, r3, #6
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	041b      	lsls	r3, r3, #16
 800925a:	431a      	orrs	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	061b      	lsls	r3, r3, #24
 8009260:	431a      	orrs	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	071b      	lsls	r3, r3, #28
 8009268:	4957      	ldr	r1, [pc, #348]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800926a:	4313      	orrs	r3, r2
 800926c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d004      	beq.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009284:	d00a      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800928e:	2b00      	cmp	r3, #0
 8009290:	d02e      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800929a:	d129      	bne.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800929c:	4b4a      	ldr	r3, [pc, #296]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800929e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092a2:	0c1b      	lsrs	r3, r3, #16
 80092a4:	f003 0303 	and.w	r3, r3, #3
 80092a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80092aa:	4b47      	ldr	r3, [pc, #284]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092b0:	0f1b      	lsrs	r3, r3, #28
 80092b2:	f003 0307 	and.w	r3, r3, #7
 80092b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	019a      	lsls	r2, r3, #6
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	041b      	lsls	r3, r3, #16
 80092c2:	431a      	orrs	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	061b      	lsls	r3, r3, #24
 80092ca:	431a      	orrs	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	071b      	lsls	r3, r3, #28
 80092d0:	493d      	ldr	r1, [pc, #244]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092d2:	4313      	orrs	r3, r2
 80092d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80092d8:	4b3b      	ldr	r3, [pc, #236]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092de:	f023 021f 	bic.w	r2, r3, #31
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e6:	3b01      	subs	r3, #1
 80092e8:	4937      	ldr	r1, [pc, #220]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092ea:	4313      	orrs	r3, r2
 80092ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d01d      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80092fc:	4b32      	ldr	r3, [pc, #200]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009302:	0e1b      	lsrs	r3, r3, #24
 8009304:	f003 030f 	and.w	r3, r3, #15
 8009308:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800930a:	4b2f      	ldr	r3, [pc, #188]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800930c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009310:	0f1b      	lsrs	r3, r3, #28
 8009312:	f003 0307 	and.w	r3, r3, #7
 8009316:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	019a      	lsls	r2, r3, #6
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	041b      	lsls	r3, r3, #16
 8009324:	431a      	orrs	r2, r3
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	061b      	lsls	r3, r3, #24
 800932a:	431a      	orrs	r2, r3
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	071b      	lsls	r3, r3, #28
 8009330:	4925      	ldr	r1, [pc, #148]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009332:	4313      	orrs	r3, r2
 8009334:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009340:	2b00      	cmp	r3, #0
 8009342:	d011      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	019a      	lsls	r2, r3, #6
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	041b      	lsls	r3, r3, #16
 8009350:	431a      	orrs	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	061b      	lsls	r3, r3, #24
 8009358:	431a      	orrs	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	071b      	lsls	r3, r3, #28
 8009360:	4919      	ldr	r1, [pc, #100]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009362:	4313      	orrs	r3, r2
 8009364:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009368:	4b17      	ldr	r3, [pc, #92]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a16      	ldr	r2, [pc, #88]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800936e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009374:	f7fc f9c4 	bl	8005700 <HAL_GetTick>
 8009378:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800937a:	e008      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800937c:	f7fc f9c0 	bl	8005700 <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	2b64      	cmp	r3, #100	; 0x64
 8009388:	d901      	bls.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e0d7      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800938e:	4b0e      	ldr	r3, [pc, #56]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d0f0      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	2b01      	cmp	r3, #1
 800939e:	f040 80cd 	bne.w	800953c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80093a2:	4b09      	ldr	r3, [pc, #36]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a08      	ldr	r2, [pc, #32]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093ae:	f7fc f9a7 	bl	8005700 <HAL_GetTick>
 80093b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80093b4:	e00a      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80093b6:	f7fc f9a3 	bl	8005700 <HAL_GetTick>
 80093ba:	4602      	mov	r2, r0
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	2b64      	cmp	r3, #100	; 0x64
 80093c2:	d903      	bls.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e0ba      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80093c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80093cc:	4b5e      	ldr	r3, [pc, #376]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093d8:	d0ed      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d003      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x682>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d009      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d02e      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d12a      	bne.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009402:	4b51      	ldr	r3, [pc, #324]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009408:	0c1b      	lsrs	r3, r3, #16
 800940a:	f003 0303 	and.w	r3, r3, #3
 800940e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009410:	4b4d      	ldr	r3, [pc, #308]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009416:	0f1b      	lsrs	r3, r3, #28
 8009418:	f003 0307 	and.w	r3, r3, #7
 800941c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	019a      	lsls	r2, r3, #6
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	041b      	lsls	r3, r3, #16
 8009428:	431a      	orrs	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	061b      	lsls	r3, r3, #24
 8009430:	431a      	orrs	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	071b      	lsls	r3, r3, #28
 8009436:	4944      	ldr	r1, [pc, #272]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009438:	4313      	orrs	r3, r2
 800943a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800943e:	4b42      	ldr	r3, [pc, #264]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009444:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800944c:	3b01      	subs	r3, #1
 800944e:	021b      	lsls	r3, r3, #8
 8009450:	493d      	ldr	r1, [pc, #244]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009452:	4313      	orrs	r3, r2
 8009454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d022      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800946c:	d11d      	bne.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800946e:	4b36      	ldr	r3, [pc, #216]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009474:	0e1b      	lsrs	r3, r3, #24
 8009476:	f003 030f 	and.w	r3, r3, #15
 800947a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800947c:	4b32      	ldr	r3, [pc, #200]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800947e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009482:	0f1b      	lsrs	r3, r3, #28
 8009484:	f003 0307 	and.w	r3, r3, #7
 8009488:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	695b      	ldr	r3, [r3, #20]
 800948e:	019a      	lsls	r2, r3, #6
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a1b      	ldr	r3, [r3, #32]
 8009494:	041b      	lsls	r3, r3, #16
 8009496:	431a      	orrs	r2, r3
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	061b      	lsls	r3, r3, #24
 800949c:	431a      	orrs	r2, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	071b      	lsls	r3, r3, #28
 80094a2:	4929      	ldr	r1, [pc, #164]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094a4:	4313      	orrs	r3, r2
 80094a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0308 	and.w	r3, r3, #8
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d028      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80094b6:	4b24      	ldr	r3, [pc, #144]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094bc:	0e1b      	lsrs	r3, r3, #24
 80094be:	f003 030f 	and.w	r3, r3, #15
 80094c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80094c4:	4b20      	ldr	r3, [pc, #128]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ca:	0c1b      	lsrs	r3, r3, #16
 80094cc:	f003 0303 	and.w	r3, r3, #3
 80094d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	695b      	ldr	r3, [r3, #20]
 80094d6:	019a      	lsls	r2, r3, #6
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	041b      	lsls	r3, r3, #16
 80094dc:	431a      	orrs	r2, r3
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	061b      	lsls	r3, r3, #24
 80094e2:	431a      	orrs	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	69db      	ldr	r3, [r3, #28]
 80094e8:	071b      	lsls	r3, r3, #28
 80094ea:	4917      	ldr	r1, [pc, #92]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094ec:	4313      	orrs	r3, r2
 80094ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80094f2:	4b15      	ldr	r3, [pc, #84]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009500:	4911      	ldr	r1, [pc, #68]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009502:	4313      	orrs	r3, r2
 8009504:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009508:	4b0f      	ldr	r3, [pc, #60]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a0e      	ldr	r2, [pc, #56]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800950e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009512:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009514:	f7fc f8f4 	bl	8005700 <HAL_GetTick>
 8009518:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800951a:	e008      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800951c:	f7fc f8f0 	bl	8005700 <HAL_GetTick>
 8009520:	4602      	mov	r2, r0
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	2b64      	cmp	r3, #100	; 0x64
 8009528:	d901      	bls.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800952a:	2303      	movs	r3, #3
 800952c:	e007      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800952e:	4b06      	ldr	r3, [pc, #24]	; (8009548 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800953a:	d1ef      	bne.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3720      	adds	r7, #32
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	40023800 	.word	0x40023800

0800954c <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8009554:	2300      	movs	r3, #0
 8009556:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a80      	ldr	r2, [pc, #512]	; (800975c <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800955c:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800955e:	4b80      	ldr	r3, [pc, #512]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009564:	099b      	lsrs	r3, r3, #6
 8009566:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800956e:	4b7c      	ldr	r3, [pc, #496]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009574:	0c1b      	lsrs	r3, r3, #16
 8009576:	f003 0203 	and.w	r2, r3, #3
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800957e:	4b78      	ldr	r3, [pc, #480]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009584:	0e1b      	lsrs	r3, r3, #24
 8009586:	f003 020f 	and.w	r2, r3, #15
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800958e:	4b74      	ldr	r3, [pc, #464]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009594:	0f1b      	lsrs	r3, r3, #28
 8009596:	f003 0207 	and.w	r2, r3, #7
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800959e:	4b70      	ldr	r3, [pc, #448]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80095a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a4:	099b      	lsrs	r3, r3, #6
 80095a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80095ae:	4b6c      	ldr	r3, [pc, #432]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80095b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095b4:	0c1b      	lsrs	r3, r3, #16
 80095b6:	f003 0203 	and.w	r2, r3, #3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80095be:	4b68      	ldr	r3, [pc, #416]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80095c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095c4:	0e1b      	lsrs	r3, r3, #24
 80095c6:	f003 020f 	and.w	r2, r3, #15
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80095ce:	4b64      	ldr	r3, [pc, #400]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80095d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095d4:	0f1b      	lsrs	r3, r3, #28
 80095d6:	f003 0207 	and.w	r2, r3, #7
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 80095de:	4b60      	ldr	r3, [pc, #384]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80095e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095e4:	f003 021f 	and.w	r2, r3, #31
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 80095ec:	4b5c      	ldr	r3, [pc, #368]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80095ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095f2:	0a1b      	lsrs	r3, r3, #8
 80095f4:	f003 021f 	and.w	r2, r3, #31
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 80095fc:	4b58      	ldr	r3, [pc, #352]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80095fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009602:	0c1b      	lsrs	r3, r3, #16
 8009604:	f003 0203 	and.w	r2, r3, #3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800960c:	4b54      	ldr	r3, [pc, #336]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800960e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009612:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800961a:	4b51      	ldr	r3, [pc, #324]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800961c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009620:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8009628:	4b4d      	ldr	r3, [pc, #308]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8009634:	4b4a      	ldr	r3, [pc, #296]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800963a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8009642:	4b47      	ldr	r3, [pc, #284]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009648:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8009650:	4b43      	ldr	r3, [pc, #268]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009656:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800965e:	4b40      	ldr	r3, [pc, #256]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009664:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800966c:	4b3c      	ldr	r3, [pc, #240]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800966e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009672:	f003 0203 	and.w	r2, r3, #3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800967a:	4b39      	ldr	r3, [pc, #228]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800967c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009680:	f003 020c 	and.w	r2, r3, #12
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8009688:	4b35      	ldr	r3, [pc, #212]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800968a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800968e:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8009696:	4b32      	ldr	r3, [pc, #200]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800969c:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80096a4:	4b2e      	ldr	r3, [pc, #184]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80096a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096aa:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80096b2:	4b2b      	ldr	r3, [pc, #172]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80096b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096b8:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80096c0:	4b27      	ldr	r3, [pc, #156]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80096c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096c6:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80096ce:	4b24      	ldr	r3, [pc, #144]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80096d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096d4:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80096dc:	4b20      	ldr	r3, [pc, #128]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80096de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096e2:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80096ea:	4b1d      	ldr	r3, [pc, #116]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80096ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096f0:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80096f8:	4b19      	ldr	r3, [pc, #100]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80096fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096fe:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8009706:	4b16      	ldr	r3, [pc, #88]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800970c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8009716:	4b12      	ldr	r3, [pc, #72]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800971e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8009720:	4b0f      	ldr	r3, [pc, #60]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009724:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	431a      	orrs	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8009730:	4b0b      	ldr	r3, [pc, #44]	; (8009760 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800973a:	2b00      	cmp	r3, #0
 800973c:	d103      	bne.n	8009746 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8009744:	e003      	b.n	800974e <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800974c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800974e:	bf00      	nop
 8009750:	3714      	adds	r7, #20
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	00fffff1 	.word	0x00fffff1
 8009760:	40023800 	.word	0x40023800

08009764 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009764:	b480      	push	{r7}
 8009766:	b087      	sub	sp, #28
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8009770:	2300      	movs	r3, #0
 8009772:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8009774:	2300      	movs	r3, #0
 8009776:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009778:	2300      	movs	r3, #0
 800977a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009782:	f040 808c 	bne.w	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009786:	4b95      	ldr	r3, [pc, #596]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800978c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009794:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800979c:	d07c      	beq.n	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097a4:	d87d      	bhi.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d004      	beq.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097b2:	d039      	beq.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80097b4:	e075      	b.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80097b6:	4b89      	ldr	r3, [pc, #548]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d108      	bne.n	80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80097c2:	4b86      	ldr	r3, [pc, #536]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097ca:	4a85      	ldr	r2, [pc, #532]	; (80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80097cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80097d0:	613b      	str	r3, [r7, #16]
 80097d2:	e007      	b.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80097d4:	4b81      	ldr	r3, [pc, #516]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097dc:	4a81      	ldr	r2, [pc, #516]	; (80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80097de:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80097e4:	4b7d      	ldr	r3, [pc, #500]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ea:	0e1b      	lsrs	r3, r3, #24
 80097ec:	f003 030f 	and.w	r3, r3, #15
 80097f0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80097f2:	4b7a      	ldr	r3, [pc, #488]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097f8:	099b      	lsrs	r3, r3, #6
 80097fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097fe:	693a      	ldr	r2, [r7, #16]
 8009800:	fb03 f202 	mul.w	r2, r3, r2
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	fbb2 f3f3 	udiv	r3, r2, r3
 800980a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800980c:	4b73      	ldr	r3, [pc, #460]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800980e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009812:	0a1b      	lsrs	r3, r3, #8
 8009814:	f003 031f 	and.w	r3, r3, #31
 8009818:	3301      	adds	r3, #1
 800981a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800981c:	697a      	ldr	r2, [r7, #20]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	fbb2 f3f3 	udiv	r3, r2, r3
 8009824:	617b      	str	r3, [r7, #20]
        break;
 8009826:	e03d      	b.n	80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009828:	4b6c      	ldr	r3, [pc, #432]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009830:	2b00      	cmp	r3, #0
 8009832:	d108      	bne.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009834:	4b69      	ldr	r3, [pc, #420]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800983c:	4a68      	ldr	r2, [pc, #416]	; (80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800983e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009842:	613b      	str	r3, [r7, #16]
 8009844:	e007      	b.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009846:	4b65      	ldr	r3, [pc, #404]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800984e:	4a65      	ldr	r2, [pc, #404]	; (80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009850:	fbb2 f3f3 	udiv	r3, r2, r3
 8009854:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009856:	4b61      	ldr	r3, [pc, #388]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800985c:	0e1b      	lsrs	r3, r3, #24
 800985e:	f003 030f 	and.w	r3, r3, #15
 8009862:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009864:	4b5d      	ldr	r3, [pc, #372]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800986a:	099b      	lsrs	r3, r3, #6
 800986c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	fb03 f202 	mul.w	r2, r3, r2
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	fbb2 f3f3 	udiv	r3, r2, r3
 800987c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800987e:	4b57      	ldr	r3, [pc, #348]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009884:	f003 031f 	and.w	r3, r3, #31
 8009888:	3301      	adds	r3, #1
 800988a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	fbb2 f3f3 	udiv	r3, r2, r3
 8009894:	617b      	str	r3, [r7, #20]
        break;
 8009896:	e005      	b.n	80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009898:	4b53      	ldr	r3, [pc, #332]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800989a:	617b      	str	r3, [r7, #20]
        break;
 800989c:	e002      	b.n	80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800989e:	bf00      	nop
 80098a0:	e000      	b.n	80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 80098a2:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098aa:	f040 808c 	bne.w	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 80098ae:	4b4b      	ldr	r3, [pc, #300]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80098b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098b4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80098bc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098c4:	d07c      	beq.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098cc:	d87d      	bhi.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d004      	beq.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098da:	d039      	beq.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80098dc:	e075      	b.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80098de:	4b3f      	ldr	r3, [pc, #252]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d108      	bne.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80098ea:	4b3c      	ldr	r3, [pc, #240]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098f2:	4a3b      	ldr	r2, [pc, #236]	; (80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80098f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098f8:	613b      	str	r3, [r7, #16]
 80098fa:	e007      	b.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80098fc:	4b37      	ldr	r3, [pc, #220]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009904:	4a37      	ldr	r2, [pc, #220]	; (80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009906:	fbb2 f3f3 	udiv	r3, r2, r3
 800990a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800990c:	4b33      	ldr	r3, [pc, #204]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800990e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009912:	0e1b      	lsrs	r3, r3, #24
 8009914:	f003 030f 	and.w	r3, r3, #15
 8009918:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800991a:	4b30      	ldr	r3, [pc, #192]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800991c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009920:	099b      	lsrs	r3, r3, #6
 8009922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	fb03 f202 	mul.w	r2, r3, r2
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009932:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009934:	4b29      	ldr	r3, [pc, #164]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800993a:	0a1b      	lsrs	r3, r3, #8
 800993c:	f003 031f 	and.w	r3, r3, #31
 8009940:	3301      	adds	r3, #1
 8009942:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009944:	697a      	ldr	r2, [r7, #20]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	fbb2 f3f3 	udiv	r3, r2, r3
 800994c:	617b      	str	r3, [r7, #20]
        break;
 800994e:	e03d      	b.n	80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009950:	4b22      	ldr	r3, [pc, #136]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009958:	2b00      	cmp	r3, #0
 800995a:	d108      	bne.n	800996e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800995c:	4b1f      	ldr	r3, [pc, #124]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009964:	4a1e      	ldr	r2, [pc, #120]	; (80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009966:	fbb2 f3f3 	udiv	r3, r2, r3
 800996a:	613b      	str	r3, [r7, #16]
 800996c:	e007      	b.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800996e:	4b1b      	ldr	r3, [pc, #108]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009976:	4a1b      	ldr	r2, [pc, #108]	; (80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009978:	fbb2 f3f3 	udiv	r3, r2, r3
 800997c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800997e:	4b17      	ldr	r3, [pc, #92]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009984:	0e1b      	lsrs	r3, r3, #24
 8009986:	f003 030f 	and.w	r3, r3, #15
 800998a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800998c:	4b13      	ldr	r3, [pc, #76]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800998e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009992:	099b      	lsrs	r3, r3, #6
 8009994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	fb03 f202 	mul.w	r2, r3, r2
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099a4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80099a6:	4b0d      	ldr	r3, [pc, #52]	; (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80099a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099ac:	f003 031f 	and.w	r3, r3, #31
 80099b0:	3301      	adds	r3, #1
 80099b2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80099bc:	617b      	str	r3, [r7, #20]
        break;
 80099be:	e005      	b.n	80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 80099c0:	4b09      	ldr	r3, [pc, #36]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80099c2:	617b      	str	r3, [r7, #20]
        break;
 80099c4:	e002      	b.n	80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 80099c6:	bf00      	nop
 80099c8:	e000      	b.n	80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 80099ca:	bf00      	nop

  return frequency;
 80099cc:	697b      	ldr	r3, [r7, #20]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	371c      	adds	r7, #28
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	40023800 	.word	0x40023800
 80099e0:	00f42400 	.word	0x00f42400
 80099e4:	017d7840 	.word	0x017d7840
 80099e8:	00bb8000 	.word	0x00bb8000

080099ec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d101      	bne.n	8009a02 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e071      	b.n	8009ae6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	7f5b      	ldrb	r3, [r3, #29]
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d105      	bne.n	8009a18 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f7f8 f8e8 	bl	8001be8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2202      	movs	r2, #2
 8009a1c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	f003 0310 	and.w	r3, r3, #16
 8009a28:	2b10      	cmp	r3, #16
 8009a2a:	d053      	beq.n	8009ad4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	22ca      	movs	r2, #202	; 0xca
 8009a32:	625a      	str	r2, [r3, #36]	; 0x24
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2253      	movs	r2, #83	; 0x53
 8009a3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fac9 	bl	8009fd4 <RTC_EnterInitMode>
 8009a42:	4603      	mov	r3, r0
 8009a44:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d12a      	bne.n	8009aa2 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6899      	ldr	r1, [r3, #8]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	4b26      	ldr	r3, [pc, #152]	; (8009af0 <HAL_RTC_Init+0x104>)
 8009a58:	400b      	ands	r3, r1
 8009a5a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6899      	ldr	r1, [r3, #8]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	685a      	ldr	r2, [r3, #4]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	431a      	orrs	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	695b      	ldr	r3, [r3, #20]
 8009a70:	431a      	orrs	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	430a      	orrs	r2, r1
 8009a78:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	68d2      	ldr	r2, [r2, #12]
 8009a82:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	6919      	ldr	r1, [r3, #16]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	041a      	lsls	r2, r3, #16
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	430a      	orrs	r2, r1
 8009a96:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fad2 	bl	800a042 <RTC_ExitInitMode>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009aa2:	7bfb      	ldrb	r3, [r7, #15]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d110      	bne.n	8009aca <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f022 0208 	bic.w	r2, r2, #8
 8009ab6:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	699a      	ldr	r2, [r3, #24]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	22ff      	movs	r2, #255	; 0xff
 8009ad0:	625a      	str	r2, [r3, #36]	; 0x24
 8009ad2:	e001      	b.n	8009ad8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009ad8:	7bfb      	ldrb	r3, [r7, #15]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d102      	bne.n	8009ae4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	ff8fffbf 	.word	0xff8fffbf

08009af4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009af4:	b590      	push	{r4, r7, lr}
 8009af6:	b087      	sub	sp, #28
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009b00:	2300      	movs	r3, #0
 8009b02:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	7f1b      	ldrb	r3, [r3, #28]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d101      	bne.n	8009b10 <HAL_RTC_SetTime+0x1c>
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	e085      	b.n	8009c1c <HAL_RTC_SetTime+0x128>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2201      	movs	r2, #1
 8009b14:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2202      	movs	r2, #2
 8009b1a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d126      	bne.n	8009b70 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d102      	bne.n	8009b36 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	2200      	movs	r2, #0
 8009b34:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 faa6 	bl	800a08c <RTC_ByteToBcd2>
 8009b40:	4603      	mov	r3, r0
 8009b42:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	785b      	ldrb	r3, [r3, #1]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f000 fa9f 	bl	800a08c <RTC_ByteToBcd2>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009b52:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	789b      	ldrb	r3, [r3, #2]
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f000 fa97 	bl	800a08c <RTC_ByteToBcd2>
 8009b5e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009b60:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	78db      	ldrb	r3, [r3, #3]
 8009b68:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	617b      	str	r3, [r7, #20]
 8009b6e:	e018      	b.n	8009ba2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d102      	bne.n	8009b84 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2200      	movs	r2, #0
 8009b82:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	785b      	ldrb	r3, [r3, #1]
 8009b8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009b90:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009b96:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	78db      	ldrb	r3, [r3, #3]
 8009b9c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	22ca      	movs	r2, #202	; 0xca
 8009ba8:	625a      	str	r2, [r3, #36]	; 0x24
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2253      	movs	r2, #83	; 0x53
 8009bb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f000 fa0e 	bl	8009fd4 <RTC_EnterInitMode>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009bbc:	7cfb      	ldrb	r3, [r7, #19]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d11e      	bne.n	8009c00 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	6979      	ldr	r1, [r7, #20]
 8009bc8:	4b16      	ldr	r3, [pc, #88]	; (8009c24 <HAL_RTC_SetTime+0x130>)
 8009bca:	400b      	ands	r3, r1
 8009bcc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009bdc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	6899      	ldr	r1, [r3, #8]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	68da      	ldr	r2, [r3, #12]
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	431a      	orrs	r2, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f000 fa23 	bl	800a042 <RTC_ExitInitMode>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009c00:	7cfb      	ldrb	r3, [r7, #19]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d102      	bne.n	8009c0c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	22ff      	movs	r2, #255	; 0xff
 8009c12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2200      	movs	r2, #0
 8009c18:	771a      	strb	r2, [r3, #28]

  return status;
 8009c1a:	7cfb      	ldrb	r3, [r7, #19]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	371c      	adds	r7, #28
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd90      	pop	{r4, r7, pc}
 8009c24:	007f7f7f 	.word	0x007f7f7f

08009c28 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009c28:	b590      	push	{r4, r7, lr}
 8009c2a:	b087      	sub	sp, #28
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009c34:	2300      	movs	r3, #0
 8009c36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	7f1b      	ldrb	r3, [r3, #28]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d101      	bne.n	8009c44 <HAL_RTC_SetDate+0x1c>
 8009c40:	2302      	movs	r3, #2
 8009c42:	e06f      	b.n	8009d24 <HAL_RTC_SetDate+0xfc>
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2201      	movs	r2, #1
 8009c48:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10e      	bne.n	8009c74 <HAL_RTC_SetDate+0x4c>
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	785b      	ldrb	r3, [r3, #1]
 8009c5a:	f003 0310 	and.w	r3, r3, #16
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d008      	beq.n	8009c74 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	785b      	ldrb	r3, [r3, #1]
 8009c66:	f023 0310 	bic.w	r3, r3, #16
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	330a      	adds	r3, #10
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d11c      	bne.n	8009cb4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	78db      	ldrb	r3, [r3, #3]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f000 fa04 	bl	800a08c <RTC_ByteToBcd2>
 8009c84:	4603      	mov	r3, r0
 8009c86:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	785b      	ldrb	r3, [r3, #1]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f000 f9fd 	bl	800a08c <RTC_ByteToBcd2>
 8009c92:	4603      	mov	r3, r0
 8009c94:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009c96:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	789b      	ldrb	r3, [r3, #2]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f000 f9f5 	bl	800a08c <RTC_ByteToBcd2>
 8009ca2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009ca4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	617b      	str	r3, [r7, #20]
 8009cb2:	e00e      	b.n	8009cd2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	78db      	ldrb	r3, [r3, #3]
 8009cb8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	785b      	ldrb	r3, [r3, #1]
 8009cbe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009cc0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009cc6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	22ca      	movs	r2, #202	; 0xca
 8009cd8:	625a      	str	r2, [r3, #36]	; 0x24
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2253      	movs	r2, #83	; 0x53
 8009ce0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f000 f976 	bl	8009fd4 <RTC_EnterInitMode>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009cec:	7cfb      	ldrb	r3, [r7, #19]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10a      	bne.n	8009d08 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	6979      	ldr	r1, [r7, #20]
 8009cf8:	4b0c      	ldr	r3, [pc, #48]	; (8009d2c <HAL_RTC_SetDate+0x104>)
 8009cfa:	400b      	ands	r3, r1
 8009cfc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 f99f 	bl	800a042 <RTC_ExitInitMode>
 8009d04:	4603      	mov	r3, r0
 8009d06:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009d08:	7cfb      	ldrb	r3, [r7, #19]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d102      	bne.n	8009d14 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2201      	movs	r2, #1
 8009d12:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	22ff      	movs	r2, #255	; 0xff
 8009d1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	771a      	strb	r2, [r3, #28]

  return status;
 8009d22:	7cfb      	ldrb	r3, [r7, #19]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	371c      	adds	r7, #28
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd90      	pop	{r4, r7, pc}
 8009d2c:	00ffff3f 	.word	0x00ffff3f

08009d30 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009d30:	b590      	push	{r4, r7, lr}
 8009d32:	b089      	sub	sp, #36	; 0x24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8009d40:	2300      	movs	r3, #0
 8009d42:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8009d44:	2300      	movs	r3, #0
 8009d46:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	7f1b      	ldrb	r3, [r3, #28]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d101      	bne.n	8009d54 <HAL_RTC_SetAlarm+0x24>
 8009d50:	2302      	movs	r3, #2
 8009d52:	e113      	b.n	8009f7c <HAL_RTC_SetAlarm+0x24c>
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2201      	movs	r2, #1
 8009d58:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2202      	movs	r2, #2
 8009d5e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d137      	bne.n	8009dd6 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d102      	bne.n	8009d7a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	2200      	movs	r2, #0
 8009d78:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f000 f984 	bl	800a08c <RTC_ByteToBcd2>
 8009d84:	4603      	mov	r3, r0
 8009d86:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	785b      	ldrb	r3, [r3, #1]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f000 f97d 	bl	800a08c <RTC_ByteToBcd2>
 8009d92:	4603      	mov	r3, r0
 8009d94:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009d96:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	789b      	ldrb	r3, [r3, #2]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 f975 	bl	800a08c <RTC_ByteToBcd2>
 8009da2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009da4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	78db      	ldrb	r3, [r3, #3]
 8009dac:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009dae:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f000 f967 	bl	800a08c <RTC_ByteToBcd2>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009dc2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009dca:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	61fb      	str	r3, [r7, #28]
 8009dd4:	e023      	b.n	8009e1e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d102      	bne.n	8009dea <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	2200      	movs	r2, #0
 8009de8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	785b      	ldrb	r3, [r3, #1]
 8009df4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009df6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009dfc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	78db      	ldrb	r3, [r3, #3]
 8009e02:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009e04:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e0c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009e0e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009e14:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009e26:	4313      	orrs	r3, r2
 8009e28:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	22ca      	movs	r2, #202	; 0xca
 8009e30:	625a      	str	r2, [r3, #36]	; 0x24
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2253      	movs	r2, #83	; 0x53
 8009e38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e42:	d148      	bne.n	8009ed6 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	689a      	ldr	r2, [r3, #8]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e52:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	689a      	ldr	r2, [r3, #8]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e62:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	b2da      	uxtb	r2, r3
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8009e74:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009e76:	f7fb fc43 	bl	8005700 <HAL_GetTick>
 8009e7a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009e7c:	e013      	b.n	8009ea6 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009e7e:	f7fb fc3f 	bl	8005700 <HAL_GetTick>
 8009e82:	4602      	mov	r2, r0
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e8c:	d90b      	bls.n	8009ea6 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	22ff      	movs	r2, #255	; 0xff
 8009e94:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2203      	movs	r2, #3
 8009e9a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	e06a      	b.n	8009f7c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	f003 0301 	and.w	r3, r3, #1
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d0e4      	beq.n	8009e7e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	69fa      	ldr	r2, [r7, #28]
 8009eba:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	697a      	ldr	r2, [r7, #20]
 8009ec2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	689a      	ldr	r2, [r3, #8]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ed2:	609a      	str	r2, [r3, #8]
 8009ed4:	e047      	b.n	8009f66 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	689a      	ldr	r2, [r3, #8]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009ee4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	689a      	ldr	r2, [r3, #8]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ef4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f462 7220 	orn	r2, r2, #640	; 0x280
 8009f06:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f08:	f7fb fbfa 	bl	8005700 <HAL_GetTick>
 8009f0c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009f0e:	e013      	b.n	8009f38 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f10:	f7fb fbf6 	bl	8005700 <HAL_GetTick>
 8009f14:	4602      	mov	r2, r0
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f1e:	d90b      	bls.n	8009f38 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	22ff      	movs	r2, #255	; 0xff
 8009f26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2203      	movs	r2, #3
 8009f2c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009f34:	2303      	movs	r3, #3
 8009f36:	e021      	b.n	8009f7c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	f003 0302 	and.w	r3, r3, #2
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d0e4      	beq.n	8009f10 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	69fa      	ldr	r2, [r7, #28]
 8009f4c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689a      	ldr	r2, [r3, #8]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f64:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	22ff      	movs	r2, #255	; 0xff
 8009f6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2201      	movs	r2, #1
 8009f72:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3724      	adds	r7, #36	; 0x24
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd90      	pop	{r4, r7, pc}

08009f84 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68da      	ldr	r2, [r3, #12]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009f9e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009fa0:	f7fb fbae 	bl	8005700 <HAL_GetTick>
 8009fa4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009fa6:	e009      	b.n	8009fbc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009fa8:	f7fb fbaa 	bl	8005700 <HAL_GetTick>
 8009fac:	4602      	mov	r2, r0
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fb6:	d901      	bls.n	8009fbc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	e007      	b.n	8009fcc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	f003 0320 	and.w	r3, r3, #32
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d0ee      	beq.n	8009fa8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d122      	bne.n	800a038 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68da      	ldr	r2, [r3, #12]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a000:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a002:	f7fb fb7d 	bl	8005700 <HAL_GetTick>
 800a006:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a008:	e00c      	b.n	800a024 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a00a:	f7fb fb79 	bl	8005700 <HAL_GetTick>
 800a00e:	4602      	mov	r2, r0
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a018:	d904      	bls.n	800a024 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2204      	movs	r2, #4
 800a01e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d102      	bne.n	800a038 <RTC_EnterInitMode+0x64>
 800a032:	7bfb      	ldrb	r3, [r7, #15]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d1e8      	bne.n	800a00a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a038:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b084      	sub	sp, #16
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	68da      	ldr	r2, [r3, #12]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a05c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	f003 0320 	and.w	r3, r3, #32
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10a      	bne.n	800a082 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f7ff ff89 	bl	8009f84 <HAL_RTC_WaitForSynchro>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d004      	beq.n	800a082 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2204      	movs	r2, #4
 800a07c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a082:	7bfb      	ldrb	r3, [r7, #15]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	4603      	mov	r3, r0
 800a094:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a096:	2300      	movs	r3, #0
 800a098:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800a09a:	e005      	b.n	800a0a8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a0a2:	79fb      	ldrb	r3, [r7, #7]
 800a0a4:	3b0a      	subs	r3, #10
 800a0a6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a0a8:	79fb      	ldrb	r3, [r7, #7]
 800a0aa:	2b09      	cmp	r3, #9
 800a0ac:	d8f6      	bhi.n	800a09c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	011b      	lsls	r3, r3, #4
 800a0b4:	b2da      	uxtb	r2, r3
 800a0b6:	79fb      	ldrb	r3, [r7, #7]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	b2db      	uxtb	r3, r3
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b087      	sub	sp, #28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	7f1b      	ldrb	r3, [r3, #28]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d101      	bne.n	800a0e4 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a0e0:	2302      	movs	r3, #2
 800a0e2:	e050      	b.n	800a186 <HAL_RTCEx_SetTimeStamp+0xbe>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2202      	movs	r2, #2
 800a0ee:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f022 0206 	bic.w	r2, r2, #6
 800a0fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	430a      	orrs	r2, r1
 800a10e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	689a      	ldr	r2, [r3, #8]
 800a116:	4b1f      	ldr	r3, [pc, #124]	; (800a194 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800a118:	4013      	ands	r3, r2
 800a11a:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800a11c:	697a      	ldr	r2, [r7, #20]
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	4313      	orrs	r3, r2
 800a122:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	22ca      	movs	r2, #202	; 0xca
 800a12a:	625a      	str	r2, [r3, #36]	; 0x24
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2253      	movs	r2, #83	; 0x53
 800a132:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	697a      	ldr	r2, [r7, #20]
 800a13a:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	b2da      	uxtb	r2, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f462 6208 	orn	r2, r2, #2176	; 0x880
 800a14c:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	b2da      	uxtb	r2, r3
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 800a15e:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	689a      	ldr	r2, [r3, #8]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a16e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	22ff      	movs	r2, #255	; 0xff
 800a176:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2201      	movs	r2, #1
 800a17c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2200      	movs	r2, #0
 800a182:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	371c      	adds	r7, #28
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	fffff7f7 	.word	0xfffff7f7

0800a198 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b086      	sub	sp, #24
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d904      	bls.n	800a1ba <HAL_SAI_InitProtocol+0x22>
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	3b03      	subs	r3, #3
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d812      	bhi.n	800a1de <HAL_SAI_InitProtocol+0x46>
 800a1b8:	e008      	b.n	800a1cc <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	68b9      	ldr	r1, [r7, #8]
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f000 fce9 	bl	800ab98 <SAI_InitI2S>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	75fb      	strb	r3, [r7, #23]
      break;
 800a1ca:	e00b      	b.n	800a1e4 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	68b9      	ldr	r1, [r7, #8]
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f000 fd8e 	bl	800acf4 <SAI_InitPCM>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	75fb      	strb	r3, [r7, #23]
      break;
 800a1dc:	e002      	b.n	800a1e4 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	75fb      	strb	r3, [r7, #23]
      break;
 800a1e2:	bf00      	nop
  }

  if (status == HAL_OK)
 800a1e4:	7dfb      	ldrb	r3, [r7, #23]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d104      	bne.n	800a1f4 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f000 f808 	bl	800a200 <HAL_SAI_Init>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a1f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3718      	adds	r7, #24
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
	...

0800a200 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b088      	sub	sp, #32
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800a208:	2300      	movs	r3, #0
 800a20a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800a20c:	2300      	movs	r3, #0
 800a20e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800a210:	2300      	movs	r3, #0
 800a212:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d101      	bne.n	800a21e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	e156      	b.n	800a4cc <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a224:	b2db      	uxtb	r3, r3
 800a226:	2b00      	cmp	r3, #0
 800a228:	d106      	bne.n	800a238 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7f7 fd68 	bl	8001d08 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2202      	movs	r2, #2
 800a23c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 fe0d 	bl	800ae60 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d00c      	beq.n	800a268 <HAL_SAI_Init+0x68>
 800a24e:	2b02      	cmp	r3, #2
 800a250:	d80d      	bhi.n	800a26e <HAL_SAI_Init+0x6e>
 800a252:	2b00      	cmp	r3, #0
 800a254:	d002      	beq.n	800a25c <HAL_SAI_Init+0x5c>
 800a256:	2b01      	cmp	r3, #1
 800a258:	d003      	beq.n	800a262 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800a25a:	e008      	b.n	800a26e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800a25c:	2300      	movs	r3, #0
 800a25e:	61fb      	str	r3, [r7, #28]
      break;
 800a260:	e006      	b.n	800a270 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a262:	2310      	movs	r3, #16
 800a264:	61fb      	str	r3, [r7, #28]
      break;
 800a266:	e003      	b.n	800a270 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a268:	2320      	movs	r3, #32
 800a26a:	61fb      	str	r3, [r7, #28]
      break;
 800a26c:	e000      	b.n	800a270 <HAL_SAI_Init+0x70>
      break;
 800a26e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	2b03      	cmp	r3, #3
 800a276:	d81e      	bhi.n	800a2b6 <HAL_SAI_Init+0xb6>
 800a278:	a201      	add	r2, pc, #4	; (adr r2, 800a280 <HAL_SAI_Init+0x80>)
 800a27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27e:	bf00      	nop
 800a280:	0800a291 	.word	0x0800a291
 800a284:	0800a297 	.word	0x0800a297
 800a288:	0800a29f 	.word	0x0800a29f
 800a28c:	0800a2a7 	.word	0x0800a2a7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800a290:	2300      	movs	r3, #0
 800a292:	617b      	str	r3, [r7, #20]
    }
    break;
 800a294:	e010      	b.n	800a2b8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a29a:	617b      	str	r3, [r7, #20]
    }
    break;
 800a29c:	e00c      	b.n	800a2b8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a29e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a2a2:	617b      	str	r3, [r7, #20]
    }
    break;
 800a2a4:	e008      	b.n	800a2b8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a2a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a2aa:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	f043 0301 	orr.w	r3, r3, #1
 800a2b2:	61fb      	str	r3, [r7, #28]
    }
    break;
 800a2b4:	e000      	b.n	800a2b8 <HAL_SAI_Init+0xb8>
    default:
      break;
 800a2b6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a85      	ldr	r2, [pc, #532]	; (800a4d4 <HAL_SAI_Init+0x2d4>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d004      	beq.n	800a2cc <HAL_SAI_Init+0xcc>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a84      	ldr	r2, [pc, #528]	; (800a4d8 <HAL_SAI_Init+0x2d8>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d103      	bne.n	800a2d4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800a2cc:	4a83      	ldr	r2, [pc, #524]	; (800a4dc <HAL_SAI_Init+0x2dc>)
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	6013      	str	r3, [r2, #0]
 800a2d2:	e002      	b.n	800a2da <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a2d4:	4a82      	ldr	r2, [pc, #520]	; (800a4e0 <HAL_SAI_Init+0x2e0>)
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	69db      	ldr	r3, [r3, #28]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d04c      	beq.n	800a37c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a7a      	ldr	r2, [pc, #488]	; (800a4d4 <HAL_SAI_Init+0x2d4>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d004      	beq.n	800a2fa <HAL_SAI_Init+0xfa>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a78      	ldr	r2, [pc, #480]	; (800a4d8 <HAL_SAI_Init+0x2d8>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d104      	bne.n	800a304 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a2fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a2fe:	f7ff fa31 	bl	8009764 <HAL_RCCEx_GetPeriphCLKFreq>
 800a302:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a76      	ldr	r2, [pc, #472]	; (800a4e4 <HAL_SAI_Init+0x2e4>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d004      	beq.n	800a318 <HAL_SAI_Init+0x118>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a75      	ldr	r2, [pc, #468]	; (800a4e8 <HAL_SAI_Init+0x2e8>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d104      	bne.n	800a322 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a318:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a31c:	f7ff fa22 	bl	8009764 <HAL_RCCEx_GetPeriphCLKFreq>
 800a320:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800a322:	693a      	ldr	r2, [r7, #16]
 800a324:	4613      	mov	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	4413      	add	r3, r2
 800a32a:	005b      	lsls	r3, r3, #1
 800a32c:	461a      	mov	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	69db      	ldr	r3, [r3, #28]
 800a332:	025b      	lsls	r3, r3, #9
 800a334:	fbb2 f3f3 	udiv	r3, r2, r3
 800a338:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	4a6b      	ldr	r2, [pc, #428]	; (800a4ec <HAL_SAI_Init+0x2ec>)
 800a33e:	fba2 2303 	umull	r2, r3, r2, r3
 800a342:	08da      	lsrs	r2, r3, #3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800a348:	68f9      	ldr	r1, [r7, #12]
 800a34a:	4b68      	ldr	r3, [pc, #416]	; (800a4ec <HAL_SAI_Init+0x2ec>)
 800a34c:	fba3 2301 	umull	r2, r3, r3, r1
 800a350:	08da      	lsrs	r2, r3, #3
 800a352:	4613      	mov	r3, r2
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	4413      	add	r3, r2
 800a358:	005b      	lsls	r3, r3, #1
 800a35a:	1aca      	subs	r2, r1, r3
 800a35c:	2a08      	cmp	r2, #8
 800a35e:	d904      	bls.n	800a36a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a1b      	ldr	r3, [r3, #32]
 800a364:	1c5a      	adds	r2, r3, #1
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36e:	2b04      	cmp	r3, #4
 800a370:	d104      	bne.n	800a37c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	085a      	lsrs	r2, r3, #1
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d003      	beq.n	800a38c <HAL_SAI_Init+0x18c>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d109      	bne.n	800a3a0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a390:	2b01      	cmp	r3, #1
 800a392:	d101      	bne.n	800a398 <HAL_SAI_Init+0x198>
 800a394:	2300      	movs	r3, #0
 800a396:	e001      	b.n	800a39c <HAL_SAI_Init+0x19c>
 800a398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a39c:	61bb      	str	r3, [r7, #24]
 800a39e:	e008      	b.n	800a3b2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d102      	bne.n	800a3ae <HAL_SAI_Init+0x1ae>
 800a3a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3ac:	e000      	b.n	800a3b0 <HAL_SAI_Init+0x1b0>
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6819      	ldr	r1, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	4b4c      	ldr	r3, [pc, #304]	; (800a4f0 <HAL_SAI_Init+0x2f0>)
 800a3be:	400b      	ands	r3, r1
 800a3c0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	6819      	ldr	r1, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	685a      	ldr	r2, [r3, #4]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a3d6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3dc:	431a      	orrs	r2, r3
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800a3ea:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a3f6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a1b      	ldr	r3, [r3, #32]
 800a3fc:	051b      	lsls	r3, r3, #20
 800a3fe:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	430a      	orrs	r2, r1
 800a406:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	6859      	ldr	r1, [r3, #4]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	4b38      	ldr	r3, [pc, #224]	; (800a4f4 <HAL_SAI_Init+0x2f4>)
 800a414:	400b      	ands	r3, r1
 800a416:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	6859      	ldr	r1, [r3, #4]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	699a      	ldr	r2, [r3, #24]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a426:	431a      	orrs	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a42c:	431a      	orrs	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	430a      	orrs	r2, r1
 800a434:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	6899      	ldr	r1, [r3, #8]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	4b2d      	ldr	r3, [pc, #180]	; (800a4f8 <HAL_SAI_Init+0x2f8>)
 800a442:	400b      	ands	r3, r1
 800a444:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	6899      	ldr	r1, [r3, #8]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a450:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a456:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800a45c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800a462:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a468:	3b01      	subs	r3, #1
 800a46a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a46c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	430a      	orrs	r2, r1
 800a474:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68d9      	ldr	r1, [r3, #12]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a484:	400b      	ands	r3, r1
 800a486:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68d9      	ldr	r1, [r3, #12]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a496:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a49c:	041b      	lsls	r3, r3, #16
 800a49e:	431a      	orrs	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	021b      	lsls	r3, r3, #8
 800a4a8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3720      	adds	r7, #32
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	40015804 	.word	0x40015804
 800a4d8:	40015824 	.word	0x40015824
 800a4dc:	40015800 	.word	0x40015800
 800a4e0:	40015c00 	.word	0x40015c00
 800a4e4:	40015c04 	.word	0x40015c04
 800a4e8:	40015c24 	.word	0x40015c24
 800a4ec:	cccccccd 	.word	0xcccccccd
 800a4f0:	ff05c010 	.word	0xff05c010
 800a4f4:	ffff1ff0 	.word	0xffff1ff0
 800a4f8:	fff88000 	.word	0xfff88000

0800a4fc <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e027      	b.n	800a55e <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2202      	movs	r2, #2
 800a512:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2200      	movs	r2, #0
 800a51c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f04f 32ff 	mov.w	r2, #4294967295
 800a526:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 fc99 	bl	800ae60 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	685a      	ldr	r2, [r3, #4]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f042 0208 	orr.w	r2, r2, #8
 800a53c:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f7f7 fcd0 	bl	8001ee4 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b084      	sub	sp, #16
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a56e:	2300      	movs	r3, #0
 800a570:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d101      	bne.n	800a580 <HAL_SAI_Abort+0x1a>
 800a57c:	2302      	movs	r3, #2
 800a57e:	e072      	b.n	800a666 <HAL_SAI_Abort+0x100>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a592:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a596:	d149      	bne.n	800a62c <HAL_SAI_Abort+0xc6>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a5a6:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d01c      	beq.n	800a5ea <HAL_SAI_Abort+0x84>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	2b12      	cmp	r3, #18
 800a5ba:	d116      	bne.n	800a5ea <HAL_SAI_Abort+0x84>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7fb fbbb 	bl	8005d3c <HAL_DMA_Abort>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00e      	beq.n	800a5ea <HAL_SAI_Abort+0x84>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5d2:	2b80      	cmp	r3, #128	; 0x80
 800a5d4:	d009      	beq.n	800a5ea <HAL_SAI_Abort+0x84>
        {
          status = HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d01c      	beq.n	800a62c <HAL_SAI_Abort+0xc6>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	2b22      	cmp	r3, #34	; 0x22
 800a5fc:	d116      	bne.n	800a62c <HAL_SAI_Abort+0xc6>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a602:	4618      	mov	r0, r3
 800a604:	f7fb fb9a 	bl	8005d3c <HAL_DMA_Abort>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00e      	beq.n	800a62c <HAL_SAI_Abort+0xc6>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a614:	2b80      	cmp	r3, #128	; 0x80
 800a616:	d009      	beq.n	800a62c <HAL_SAI_Abort+0xc6>
        {
          status = HAL_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a622:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        }
      }
    }
  }
  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2200      	movs	r2, #0
 800a632:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f04f 32ff 	mov.w	r2, #4294967295
 800a63c:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 fc0e 	bl	800ae60 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f042 0208 	orr.w	r2, r2, #8
 800a652:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800a664:	7bfb      	ldrb	r3, [r7, #15]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
	...

0800a670 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b086      	sub	sp, #24
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	4613      	mov	r3, r2
 800a67c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800a67e:	f7fb f83f 	bl	8005700 <HAL_GetTick>
 800a682:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d002      	beq.n	800a690 <HAL_SAI_Transmit_DMA+0x20>
 800a68a:	88fb      	ldrh	r3, [r7, #6]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d101      	bne.n	800a694 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	e093      	b.n	800a7bc <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	f040 808c 	bne.w	800a7ba <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d101      	bne.n	800a6b0 <HAL_SAI_Transmit_DMA+0x40>
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	e085      	b.n	800a7bc <HAL_SAI_Transmit_DMA+0x14c>
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	88fa      	ldrh	r2, [r7, #6]
 800a6c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	88fa      	ldrh	r2, [r7, #6]
 800a6ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2212      	movs	r2, #18
 800a6da:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6e2:	4a38      	ldr	r2, [pc, #224]	; (800a7c4 <HAL_SAI_Transmit_DMA+0x154>)
 800a6e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6ea:	4a37      	ldr	r2, [pc, #220]	; (800a7c8 <HAL_SAI_Transmit_DMA+0x158>)
 800a6ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6f2:	4a36      	ldr	r2, [pc, #216]	; (800a7cc <HAL_SAI_Transmit_DMA+0x15c>)
 800a6f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a706:	4619      	mov	r1, r3
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	331c      	adds	r3, #28
 800a70e:	461a      	mov	r2, r3
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a716:	f7fb fab1 	bl	8005c7c <HAL_DMA_Start_IT>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d005      	beq.n	800a72c <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	e047      	b.n	800a7bc <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a72c:	2100      	movs	r1, #0
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f000 fb60 	bl	800adf4 <SAI_InterruptFlag>
 800a734:	4601      	mov	r1, r0
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	691a      	ldr	r2, [r3, #16]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	430a      	orrs	r2, r1
 800a742:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a752:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a754:	e015      	b.n	800a782 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800a756:	f7fa ffd3 	bl	8005700 <HAL_GetTick>
 800a75a:	4602      	mov	r2, r0
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	1ad3      	subs	r3, r2, r3
 800a760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a764:	d90d      	bls.n	800a782 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a76c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2200      	movs	r2, #0
 800a77a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a77e:	2303      	movs	r3, #3
 800a780:	e01c      	b.n	800a7bc <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	695b      	ldr	r3, [r3, #20]
 800a788:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d0e2      	beq.n	800a756 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d107      	bne.n	800a7ae <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a7ac:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	e000      	b.n	800a7bc <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800a7ba:	2302      	movs	r3, #2
  }
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3718      	adds	r7, #24
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	0800af31 	.word	0x0800af31
 800a7c8:	0800aed1 	.word	0x0800aed1
 800a7cc:	0800afc9 	.word	0x0800afc9

0800a7d0 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d002      	beq.n	800a7ea <HAL_SAI_Receive_DMA+0x1a>
 800a7e4:	88fb      	ldrh	r3, [r7, #6]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d101      	bne.n	800a7ee <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e074      	b.n	800a8d8 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d16d      	bne.n	800a8d6 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a800:	2b01      	cmp	r3, #1
 800a802:	d101      	bne.n	800a808 <HAL_SAI_Receive_DMA+0x38>
 800a804:	2302      	movs	r3, #2
 800a806:	e067      	b.n	800a8d8 <HAL_SAI_Receive_DMA+0x108>
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	88fa      	ldrh	r2, [r7, #6]
 800a81a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	88fa      	ldrh	r2, [r7, #6]
 800a822:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2222      	movs	r2, #34	; 0x22
 800a832:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a83a:	4a29      	ldr	r2, [pc, #164]	; (800a8e0 <HAL_SAI_Receive_DMA+0x110>)
 800a83c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a842:	4a28      	ldr	r2, [pc, #160]	; (800a8e4 <HAL_SAI_Receive_DMA+0x114>)
 800a844:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a84a:	4a27      	ldr	r2, [pc, #156]	; (800a8e8 <HAL_SAI_Receive_DMA+0x118>)
 800a84c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a852:	2200      	movs	r2, #0
 800a854:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	331c      	adds	r3, #28
 800a860:	4619      	mov	r1, r3
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a866:	461a      	mov	r2, r3
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a86e:	f7fb fa05 	bl	8005c7c <HAL_DMA_Start_IT>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d005      	beq.n	800a884 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	e029      	b.n	800a8d8 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a884:	2100      	movs	r1, #0
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f000 fab4 	bl	800adf4 <SAI_InterruptFlag>
 800a88c:	4601      	mov	r1, r0
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	691a      	ldr	r2, [r3, #16]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	430a      	orrs	r2, r1
 800a89a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a8aa:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d107      	bne.n	800a8ca <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a8c8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	e000      	b.n	800a8d8 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800a8d6:	2302      	movs	r3, #2
  }
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3710      	adds	r7, #16
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	0800afad 	.word	0x0800afad
 800a8e4:	0800af4d 	.word	0x0800af4d
 800a8e8:	0800afc9 	.word	0x0800afc9

0800a8ec <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b086      	sub	sp, #24
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f000 8137 	beq.w	800ab70 <HAL_SAI_IRQHandler+0x284>
  {
    uint32_t itflags = hsai->Instance->SR;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	695b      	ldr	r3, [r3, #20]
 800a908:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	f003 0308 	and.w	r3, r3, #8
 800a920:	2b00      	cmp	r3, #0
 800a922:	d009      	beq.n	800a938 <HAL_SAI_IRQHandler+0x4c>
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	f003 0308 	and.w	r3, r3, #8
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d004      	beq.n	800a938 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	4798      	blx	r3
 800a936:	e11b      	b.n	800ab70 <HAL_SAI_IRQHandler+0x284>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	f003 0301 	and.w	r3, r3, #1
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d01e      	beq.n	800a980 <HAL_SAI_IRQHandler+0x94>
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	f003 0301 	and.w	r3, r3, #1
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d019      	beq.n	800a980 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2201      	movs	r2, #1
 800a952:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	2b22      	cmp	r3, #34	; 0x22
 800a95e:	d101      	bne.n	800a964 <HAL_SAI_IRQHandler+0x78>
 800a960:	2301      	movs	r3, #1
 800a962:	e000      	b.n	800a966 <HAL_SAI_IRQHandler+0x7a>
 800a964:	2302      	movs	r3, #2
 800a966:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	431a      	orrs	r2, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f7f7 fe5b 	bl	8002634 <HAL_SAI_ErrorCallback>
 800a97e:	e0f7      	b.n	800ab70 <HAL_SAI_IRQHandler+0x284>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	f003 0302 	and.w	r3, r3, #2
 800a986:	2b00      	cmp	r3, #0
 800a988:	d011      	beq.n	800a9ae <HAL_SAI_IRQHandler+0xc2>
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	f003 0302 	and.w	r3, r3, #2
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00c      	beq.n	800a9ae <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2202      	movs	r2, #2
 800a99a:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != (SAIcallback)NULL)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f000 80e5 	beq.w	800ab70 <HAL_SAI_IRQHandler+0x284>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9aa:	4798      	blx	r3
      if (hsai->mutecallback != (SAIcallback)NULL)
 800a9ac:	e0e0      	b.n	800ab70 <HAL_SAI_IRQHandler+0x284>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f003 0320 	and.w	r3, r3, #32
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d039      	beq.n	800aa2c <HAL_SAI_IRQHandler+0x140>
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	f003 0320 	and.w	r3, r3, #32
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d034      	beq.n	800aa2c <HAL_SAI_IRQHandler+0x140>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2220      	movs	r2, #32
 800a9c8:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9d0:	f043 0204 	orr.w	r2, r3, #4
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d01c      	beq.n	800aa1e <HAL_SAI_IRQHandler+0x132>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d009      	beq.n	800aa00 <HAL_SAI_IRQHandler+0x114>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9f0:	4a61      	ldr	r2, [pc, #388]	; (800ab78 <HAL_SAI_IRQHandler+0x28c>)
 800a9f2:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7fb fa0f 	bl	8005e1c <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a9fe:	e0b4      	b.n	800ab6a <HAL_SAI_IRQHandler+0x27e>
        }
        else if (hsai->hdmarx != NULL)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f000 80b0 	beq.w	800ab6a <HAL_SAI_IRQHandler+0x27e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa0e:	4a5a      	ldr	r2, [pc, #360]	; (800ab78 <HAL_SAI_IRQHandler+0x28c>)
 800aa10:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7fb fa00 	bl	8005e1c <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800aa1c:	e0a5      	b.n	800ab6a <HAL_SAI_IRQHandler+0x27e>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7ff fda1 	bl	800a566 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f7f7 fe05 	bl	8002634 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800aa2a:	e09e      	b.n	800ab6a <HAL_SAI_IRQHandler+0x27e>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d038      	beq.n	800aaa8 <HAL_SAI_IRQHandler+0x1bc>
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d033      	beq.n	800aaa8 <HAL_SAI_IRQHandler+0x1bc>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2240      	movs	r2, #64	; 0x40
 800aa46:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa4e:	f043 0208 	orr.w	r2, r3, #8
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d01b      	beq.n	800aa9a <HAL_SAI_IRQHandler+0x1ae>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d009      	beq.n	800aa7e <HAL_SAI_IRQHandler+0x192>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa6e:	4a42      	ldr	r2, [pc, #264]	; (800ab78 <HAL_SAI_IRQHandler+0x28c>)
 800aa70:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fb f9d0 	bl	8005e1c <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800aa7c:	e077      	b.n	800ab6e <HAL_SAI_IRQHandler+0x282>
        }
        else if (hsai->hdmarx != NULL)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d073      	beq.n	800ab6e <HAL_SAI_IRQHandler+0x282>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa8a:	4a3b      	ldr	r2, [pc, #236]	; (800ab78 <HAL_SAI_IRQHandler+0x28c>)
 800aa8c:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7fb f9c2 	bl	8005e1c <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800aa98:	e069      	b.n	800ab6e <HAL_SAI_IRQHandler+0x282>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7ff fd63 	bl	800a566 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7f7 fdc7 	bl	8002634 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800aaa6:	e062      	b.n	800ab6e <HAL_SAI_IRQHandler+0x282>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	f003 0304 	and.w	r3, r3, #4
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d041      	beq.n	800ab36 <HAL_SAI_IRQHandler+0x24a>
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	f003 0304 	and.w	r3, r3, #4
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d03c      	beq.n	800ab36 <HAL_SAI_IRQHandler+0x24a>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2204      	movs	r2, #4
 800aac2:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aaca:	f043 0220 	orr.w	r2, r3, #32
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Abort the SAI DMA Streams */
      if (hsai->hdmatx != NULL)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d009      	beq.n	800aaf0 <HAL_SAI_IRQHandler+0x204>
      {
        /* Set the DMA Tx abort callback */
        hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aae0:	4a25      	ldr	r2, [pc, #148]	; (800ab78 <HAL_SAI_IRQHandler+0x28c>)
 800aae2:	651a      	str	r2, [r3, #80]	; 0x50
        /* Abort DMA in IT mode */
        HAL_DMA_Abort_IT(hsai->hdmatx);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7fb f997 	bl	8005e1c <HAL_DMA_Abort_IT>
      if (hsai->hdmatx != NULL)
 800aaee:	e03f      	b.n	800ab70 <HAL_SAI_IRQHandler+0x284>
      }
      else if (hsai->hdmarx != NULL)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d009      	beq.n	800ab0c <HAL_SAI_IRQHandler+0x220>
      {
        /* Set the DMA Rx abort callback */
        hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aafc:	4a1e      	ldr	r2, [pc, #120]	; (800ab78 <HAL_SAI_IRQHandler+0x28c>)
 800aafe:	651a      	str	r2, [r3, #80]	; 0x50
        /* Abort DMA in IT mode */
        HAL_DMA_Abort_IT(hsai->hdmarx);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fb f989 	bl	8005e1c <HAL_DMA_Abort_IT>
      if (hsai->hdmatx != NULL)
 800ab0a:	e031      	b.n	800ab70 <HAL_SAI_IRQHandler+0x284>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2200      	movs	r2, #0
 800ab12:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f04f 32ff 	mov.w	r2, #4294967295
 800ab1c:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7f7 fd80 	bl	8002634 <HAL_SAI_ErrorCallback>
      if (hsai->hdmatx != NULL)
 800ab34:	e01c      	b.n	800ab70 <HAL_SAI_IRQHandler+0x284>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	f003 0310 	and.w	r3, r3, #16
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d017      	beq.n	800ab70 <HAL_SAI_IRQHandler+0x284>
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	f003 0310 	and.w	r3, r3, #16
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d012      	beq.n	800ab70 <HAL_SAI_IRQHandler+0x284>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2210      	movs	r2, #16
 800ab50:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab58:	f043 0210 	orr.w	r2, r3, #16
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f7f7 fd66 	bl	8002634 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800ab68:	e002      	b.n	800ab70 <HAL_SAI_IRQHandler+0x284>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800ab6a:	bf00      	nop
 800ab6c:	e000      	b.n	800ab70 <HAL_SAI_IRQHandler+0x284>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800ab6e:	bf00      	nop
}
 800ab70:	bf00      	nop
 800ab72:	3718      	adds	r7, #24
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	0800b02f 	.word	0x0800b02f

0800ab7c <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ab8a:	b2db      	uxtb	r3, r3
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
 800aba4:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2200      	movs	r2, #0
 800abaa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2200      	movs	r2, #0
 800abb0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d003      	beq.n	800abc2 <SAI_InitI2S+0x2a>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	d103      	bne.n	800abca <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2200      	movs	r2, #0
 800abc6:	63da      	str	r2, [r3, #60]	; 0x3c
 800abc8:	e002      	b.n	800abd0 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2201      	movs	r2, #1
 800abce:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800abd6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abde:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	683a      	ldr	r2, [r7, #0]
 800abea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	f003 0301 	and.w	r3, r3, #1
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d001      	beq.n	800abfa <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 800abf6:	2301      	movs	r3, #1
 800abf8:	e076      	b.n	800ace8 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d107      	bne.n	800ac10 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800ac0c:	651a      	str	r2, [r3, #80]	; 0x50
 800ac0e:	e006      	b.n	800ac1e <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ac16:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Frame definition */
  switch (datasize)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2b03      	cmp	r3, #3
 800ac22:	d84f      	bhi.n	800acc4 <SAI_InitI2S+0x12c>
 800ac24:	a201      	add	r2, pc, #4	; (adr r2, 800ac2c <SAI_InitI2S+0x94>)
 800ac26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac2a:	bf00      	nop
 800ac2c:	0800ac3d 	.word	0x0800ac3d
 800ac30:	0800ac5f 	.word	0x0800ac5f
 800ac34:	0800ac81 	.word	0x0800ac81
 800ac38:	0800aca3 	.word	0x0800aca3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2280      	movs	r2, #128	; 0x80
 800ac40:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	085b      	lsrs	r3, r3, #1
 800ac46:	015a      	lsls	r2, r3, #5
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	085b      	lsrs	r3, r3, #1
 800ac50:	011a      	lsls	r2, r3, #4
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2240      	movs	r2, #64	; 0x40
 800ac5a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800ac5c:	e034      	b.n	800acc8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2280      	movs	r2, #128	; 0x80
 800ac62:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	085b      	lsrs	r3, r3, #1
 800ac68:	019a      	lsls	r2, r3, #6
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	085b      	lsrs	r3, r3, #1
 800ac72:	015a      	lsls	r2, r3, #5
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2280      	movs	r2, #128	; 0x80
 800ac7c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800ac7e:	e023      	b.n	800acc8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	22c0      	movs	r2, #192	; 0xc0
 800ac84:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	085b      	lsrs	r3, r3, #1
 800ac8a:	019a      	lsls	r2, r3, #6
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	085b      	lsrs	r3, r3, #1
 800ac94:	015a      	lsls	r2, r3, #5
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2280      	movs	r2, #128	; 0x80
 800ac9e:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800aca0:	e012      	b.n	800acc8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	22e0      	movs	r2, #224	; 0xe0
 800aca6:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	085b      	lsrs	r3, r3, #1
 800acac:	019a      	lsls	r2, r3, #6
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	085b      	lsrs	r3, r3, #1
 800acb6:	015a      	lsls	r2, r3, #5
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2280      	movs	r2, #128	; 0x80
 800acc0:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800acc2:	e001      	b.n	800acc8 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	e00f      	b.n	800ace8 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	2b02      	cmp	r3, #2
 800accc:	d10b      	bne.n	800ace6 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d102      	bne.n	800acda <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2210      	movs	r2, #16
 800acd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2b02      	cmp	r3, #2
 800acde:	d102      	bne.n	800ace6 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2208      	movs	r2, #8
 800ace4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return HAL_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
 800ad00:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2200      	movs	r2, #0
 800ad06:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d003      	beq.n	800ad1e <SAI_InitPCM+0x2a>
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	d103      	bne.n	800ad26 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2201      	movs	r2, #1
 800ad22:	63da      	str	r2, [r3, #60]	; 0x3c
 800ad24:	e002      	b.n	800ad2c <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ad38:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800ad40:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	683a      	ldr	r2, [r7, #0]
 800ad4c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad54:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	2b04      	cmp	r3, #4
 800ad5a:	d103      	bne.n	800ad64 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	645a      	str	r2, [r3, #68]	; 0x44
 800ad62:	e002      	b.n	800ad6a <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	220d      	movs	r2, #13
 800ad68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  switch (datasize)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2b03      	cmp	r3, #3
 800ad6e:	d837      	bhi.n	800ade0 <SAI_InitPCM+0xec>
 800ad70:	a201      	add	r2, pc, #4	; (adr r2, 800ad78 <SAI_InitPCM+0x84>)
 800ad72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad76:	bf00      	nop
 800ad78:	0800ad89 	.word	0x0800ad89
 800ad7c:	0800ad9f 	.word	0x0800ad9f
 800ad80:	0800adb5 	.word	0x0800adb5
 800ad84:	0800adcb 	.word	0x0800adcb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2280      	movs	r2, #128	; 0x80
 800ad8c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	011a      	lsls	r2, r3, #4
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2240      	movs	r2, #64	; 0x40
 800ad9a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800ad9c:	e022      	b.n	800ade4 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2280      	movs	r2, #128	; 0x80
 800ada2:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	015a      	lsls	r2, r3, #5
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2280      	movs	r2, #128	; 0x80
 800adb0:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800adb2:	e017      	b.n	800ade4 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	22c0      	movs	r2, #192	; 0xc0
 800adb8:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	015a      	lsls	r2, r3, #5
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2280      	movs	r2, #128	; 0x80
 800adc6:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800adc8:	e00c      	b.n	800ade4 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	22e0      	movs	r2, #224	; 0xe0
 800adce:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	015a      	lsls	r2, r3, #5
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2280      	movs	r2, #128	; 0x80
 800addc:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800adde:	e001      	b.n	800ade4 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	e000      	b.n	800ade6 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3714      	adds	r7, #20
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop

0800adf4 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800adfe:	2301      	movs	r3, #1
 800ae00:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d103      	bne.n	800ae10 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f043 0308 	orr.w	r3, r3, #8
 800ae0e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae14:	2b08      	cmp	r3, #8
 800ae16:	d10b      	bne.n	800ae30 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ae1c:	2b03      	cmp	r3, #3
 800ae1e:	d003      	beq.n	800ae28 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d103      	bne.n	800ae30 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f043 0310 	orr.w	r3, r3, #16
 800ae2e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	2b03      	cmp	r3, #3
 800ae36:	d003      	beq.n	800ae40 <SAI_InterruptFlag+0x4c>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	d104      	bne.n	800ae4a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ae46:	60fb      	str	r3, [r7, #12]
 800ae48:	e003      	b.n	800ae52 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f043 0304 	orr.w	r3, r3, #4
 800ae50:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ae52:	68fb      	ldr	r3, [r7, #12]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b085      	sub	sp, #20
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800ae68:	4b17      	ldr	r3, [pc, #92]	; (800aec8 <SAI_Disable+0x68>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a17      	ldr	r2, [pc, #92]	; (800aecc <SAI_Disable+0x6c>)
 800ae6e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae72:	0b1b      	lsrs	r3, r3, #12
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ae8a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	1e5a      	subs	r2, r3, #1
 800ae90:	60fa      	str	r2, [r7, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d10a      	bne.n	800aeac <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800aea6:	2303      	movs	r3, #3
 800aea8:	72fb      	strb	r3, [r7, #11]
      break;
 800aeaa:	e006      	b.n	800aeba <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d1e8      	bne.n	800ae8c <SAI_Disable+0x2c>

  return status;
 800aeba:	7afb      	ldrb	r3, [r7, #11]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3714      	adds	r7, #20
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr
 800aec8:	20000040 	.word	0x20000040
 800aecc:	95cbec1b 	.word	0x95cbec1b

0800aed0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aedc:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	69db      	ldr	r3, [r3, #28]
 800aee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aee6:	d01c      	beq.n	800af22 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800aefe:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800af00:	2100      	movs	r1, #0
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	f7ff ff76 	bl	800adf4 <SAI_InterruptFlag>
 800af08:	4603      	mov	r3, r0
 800af0a:	43d9      	mvns	r1, r3
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	691a      	ldr	r2, [r3, #16]
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	400a      	ands	r2, r1
 800af18:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2201      	movs	r2, #1
 800af1e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800af22:	68f8      	ldr	r0, [r7, #12]
 800af24:	f7f7 fb72 	bl	800260c <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800af28:	bf00      	nop
 800af2a:	3710      	adds	r7, #16
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af3c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f7f7 fb6e 	bl	8002620 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800af44:	bf00      	nop
 800af46:	3710      	adds	r7, #16
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af58:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	69db      	ldr	r3, [r3, #28]
 800af5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af62:	d01c      	beq.n	800af9e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800af72:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2200      	movs	r2, #0
 800af78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800af7c:	2100      	movs	r1, #0
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f7ff ff38 	bl	800adf4 <SAI_InterruptFlag>
 800af84:	4603      	mov	r3, r0
 800af86:	43d9      	mvns	r1, r3
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	691a      	ldr	r2, [r3, #16]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	400a      	ands	r2, r1
 800af94:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2201      	movs	r2, #1
 800af9a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f7f7 fda8 	bl	8002af4 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800afa4:	bf00      	nop
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800afba:	68f8      	ldr	r0, [r7, #12]
 800afbc:	f7f7 fda4 	bl	8002b08 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800afc0:	bf00      	nop
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd4:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afec:	2b01      	cmp	r3, #1
 800afee:	d004      	beq.n	800affa <SAI_DMAError+0x32>
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d112      	bne.n	800b020 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b008:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	f7ff ff28 	bl	800ae60 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2201      	movs	r2, #1
 800b014:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f7f7 fb07 	bl	8002634 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800b026:	bf00      	nop
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b084      	sub	sp, #16
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b04a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2200      	movs	r2, #0
 800b052:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f04f 32ff 	mov.w	r2, #4294967295
 800b05c:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b064:	2b20      	cmp	r3, #32
 800b066:	d00a      	beq.n	800b07e <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800b068:	68f8      	ldr	r0, [r7, #12]
 800b06a:	f7ff fef9 	bl	800ae60 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	685a      	ldr	r2, [r3, #4]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f042 0208 	orr.w	r2, r2, #8
 800b07c:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2201      	movs	r2, #1
 800b082:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2200      	movs	r2, #0
 800b08a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f7f7 fad0 	bl	8002634 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800b094:	bf00      	nop
 800b096:	3710      	adds	r7, #16
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d101      	bne.n	800b0b0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e025      	b.n	800b0fc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d106      	bne.n	800b0ca <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f7f5 fbad 	bl	8000824 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2202      	movs	r2, #2
 800b0ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	3304      	adds	r3, #4
 800b0da:	4619      	mov	r1, r3
 800b0dc:	4610      	mov	r0, r2
 800b0de:	f000 fde1 	bl	800bca4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6818      	ldr	r0, [r3, #0]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	6839      	ldr	r1, [r7, #0]
 800b0ee:	f000 fe35 	bl	800bd5c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3708      	adds	r7, #8
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b086      	sub	sp, #24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b116:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b118:	7dfb      	ldrb	r3, [r7, #23]
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	d101      	bne.n	800b122 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b11e:	2302      	movs	r3, #2
 800b120:	e021      	b.n	800b166 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b122:	7dfb      	ldrb	r3, [r7, #23]
 800b124:	2b01      	cmp	r3, #1
 800b126:	d002      	beq.n	800b12e <HAL_SDRAM_SendCommand+0x2a>
 800b128:	7dfb      	ldrb	r3, [r7, #23]
 800b12a:	2b05      	cmp	r3, #5
 800b12c:	d118      	bne.n	800b160 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2202      	movs	r2, #2
 800b132:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	68b9      	ldr	r1, [r7, #8]
 800b13e:	4618      	mov	r0, r3
 800b140:	f000 fe76 	bl	800be30 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d104      	bne.n	800b156 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2205      	movs	r2, #5
 800b150:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b154:	e006      	b.n	800b164 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2201      	movs	r2, #1
 800b15a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b15e:	e001      	b.n	800b164 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b160:	2301      	movs	r3, #1
 800b162:	e000      	b.n	800b166 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3718      	adds	r7, #24
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b082      	sub	sp, #8
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
 800b176:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	2b02      	cmp	r3, #2
 800b182:	d101      	bne.n	800b188 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b184:	2302      	movs	r3, #2
 800b186:	e016      	b.n	800b1b6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	2b01      	cmp	r3, #1
 800b192:	d10f      	bne.n	800b1b4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2202      	movs	r2, #2
 800b198:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	6839      	ldr	r1, [r7, #0]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 fe68 	bl	800be78 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	e000      	b.n	800b1b6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b084      	sub	sp, #16
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d101      	bne.n	800b1d0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e09d      	b.n	800b30c <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d108      	bne.n	800b1ea <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1e0:	d009      	beq.n	800b1f6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	61da      	str	r2, [r3, #28]
 800b1e8:	e005      	b.n	800b1f6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b202:	b2db      	uxtb	r3, r3
 800b204:	2b00      	cmp	r3, #0
 800b206:	d106      	bne.n	800b216 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7f6 ff05 	bl	8002020 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2202      	movs	r2, #2
 800b21a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b22c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b236:	d902      	bls.n	800b23e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b238:	2300      	movs	r3, #0
 800b23a:	60fb      	str	r3, [r7, #12]
 800b23c:	e002      	b.n	800b244 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b23e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b242:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b24c:	d007      	beq.n	800b25e <HAL_SPI_Init+0xa0>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b256:	d002      	beq.n	800b25e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b26e:	431a      	orrs	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	f003 0302 	and.w	r3, r3, #2
 800b278:	431a      	orrs	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	695b      	ldr	r3, [r3, #20]
 800b27e:	f003 0301 	and.w	r3, r3, #1
 800b282:	431a      	orrs	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	699b      	ldr	r3, [r3, #24]
 800b288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b28c:	431a      	orrs	r2, r3
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	69db      	ldr	r3, [r3, #28]
 800b292:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b296:	431a      	orrs	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6a1b      	ldr	r3, [r3, #32]
 800b29c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2a0:	ea42 0103 	orr.w	r1, r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	430a      	orrs	r2, r1
 800b2b2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	699b      	ldr	r3, [r3, #24]
 800b2b8:	0c1b      	lsrs	r3, r3, #16
 800b2ba:	f003 0204 	and.w	r2, r3, #4
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c2:	f003 0310 	and.w	r3, r3, #16
 800b2c6:	431a      	orrs	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2cc:	f003 0308 	and.w	r3, r3, #8
 800b2d0:	431a      	orrs	r2, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b2da:	ea42 0103 	orr.w	r1, r2, r3
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	430a      	orrs	r2, r1
 800b2ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	69da      	ldr	r2, [r3, #28]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b2fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2201      	movs	r2, #1
 800b306:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d101      	bne.n	800b326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	e049      	b.n	800b3ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d106      	bne.n	800b340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f7f8 fdae 	bl	8003e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2202      	movs	r2, #2
 800b344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	3304      	adds	r3, #4
 800b350:	4619      	mov	r1, r3
 800b352:	4610      	mov	r0, r2
 800b354:	f000 fac0 	bl	800b8d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3708      	adds	r7, #8
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
	...

0800b3c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b085      	sub	sp, #20
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d001      	beq.n	800b3dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e054      	b.n	800b486 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2202      	movs	r2, #2
 800b3e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	68da      	ldr	r2, [r3, #12]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f042 0201 	orr.w	r2, r2, #1
 800b3f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a26      	ldr	r2, [pc, #152]	; (800b494 <HAL_TIM_Base_Start_IT+0xd0>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d022      	beq.n	800b444 <HAL_TIM_Base_Start_IT+0x80>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b406:	d01d      	beq.n	800b444 <HAL_TIM_Base_Start_IT+0x80>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a22      	ldr	r2, [pc, #136]	; (800b498 <HAL_TIM_Base_Start_IT+0xd4>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d018      	beq.n	800b444 <HAL_TIM_Base_Start_IT+0x80>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a21      	ldr	r2, [pc, #132]	; (800b49c <HAL_TIM_Base_Start_IT+0xd8>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d013      	beq.n	800b444 <HAL_TIM_Base_Start_IT+0x80>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a1f      	ldr	r2, [pc, #124]	; (800b4a0 <HAL_TIM_Base_Start_IT+0xdc>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d00e      	beq.n	800b444 <HAL_TIM_Base_Start_IT+0x80>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a1e      	ldr	r2, [pc, #120]	; (800b4a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d009      	beq.n	800b444 <HAL_TIM_Base_Start_IT+0x80>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a1c      	ldr	r2, [pc, #112]	; (800b4a8 <HAL_TIM_Base_Start_IT+0xe4>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d004      	beq.n	800b444 <HAL_TIM_Base_Start_IT+0x80>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4a1b      	ldr	r2, [pc, #108]	; (800b4ac <HAL_TIM_Base_Start_IT+0xe8>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d115      	bne.n	800b470 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	689a      	ldr	r2, [r3, #8]
 800b44a:	4b19      	ldr	r3, [pc, #100]	; (800b4b0 <HAL_TIM_Base_Start_IT+0xec>)
 800b44c:	4013      	ands	r3, r2
 800b44e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2b06      	cmp	r3, #6
 800b454:	d015      	beq.n	800b482 <HAL_TIM_Base_Start_IT+0xbe>
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b45c:	d011      	beq.n	800b482 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f042 0201 	orr.w	r2, r2, #1
 800b46c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b46e:	e008      	b.n	800b482 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	681a      	ldr	r2, [r3, #0]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f042 0201 	orr.w	r2, r2, #1
 800b47e:	601a      	str	r2, [r3, #0]
 800b480:	e000      	b.n	800b484 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b482:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3714      	adds	r7, #20
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	40010000 	.word	0x40010000
 800b498:	40000400 	.word	0x40000400
 800b49c:	40000800 	.word	0x40000800
 800b4a0:	40000c00 	.word	0x40000c00
 800b4a4:	40010400 	.word	0x40010400
 800b4a8:	40014000 	.word	0x40014000
 800b4ac:	40001800 	.word	0x40001800
 800b4b0:	00010007 	.word	0x00010007

0800b4b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	f003 0302 	and.w	r3, r3, #2
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	d122      	bne.n	800b510 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	f003 0302 	and.w	r3, r3, #2
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	d11b      	bne.n	800b510 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f06f 0202 	mvn.w	r2, #2
 800b4e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	699b      	ldr	r3, [r3, #24]
 800b4ee:	f003 0303 	and.w	r3, r3, #3
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d003      	beq.n	800b4fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 f9d0 	bl	800b89c <HAL_TIM_IC_CaptureCallback>
 800b4fc:	e005      	b.n	800b50a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 f9c2 	bl	800b888 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 f9d3 	bl	800b8b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2200      	movs	r2, #0
 800b50e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	f003 0304 	and.w	r3, r3, #4
 800b51a:	2b04      	cmp	r3, #4
 800b51c:	d122      	bne.n	800b564 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	f003 0304 	and.w	r3, r3, #4
 800b528:	2b04      	cmp	r3, #4
 800b52a:	d11b      	bne.n	800b564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f06f 0204 	mvn.w	r2, #4
 800b534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2202      	movs	r2, #2
 800b53a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	699b      	ldr	r3, [r3, #24]
 800b542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b546:	2b00      	cmp	r3, #0
 800b548:	d003      	beq.n	800b552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f9a6 	bl	800b89c <HAL_TIM_IC_CaptureCallback>
 800b550:	e005      	b.n	800b55e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 f998 	bl	800b888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f9a9 	bl	800b8b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	f003 0308 	and.w	r3, r3, #8
 800b56e:	2b08      	cmp	r3, #8
 800b570:	d122      	bne.n	800b5b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	f003 0308 	and.w	r3, r3, #8
 800b57c:	2b08      	cmp	r3, #8
 800b57e:	d11b      	bne.n	800b5b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f06f 0208 	mvn.w	r2, #8
 800b588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2204      	movs	r2, #4
 800b58e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	69db      	ldr	r3, [r3, #28]
 800b596:	f003 0303 	and.w	r3, r3, #3
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d003      	beq.n	800b5a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 f97c 	bl	800b89c <HAL_TIM_IC_CaptureCallback>
 800b5a4:	e005      	b.n	800b5b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 f96e 	bl	800b888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 f97f 	bl	800b8b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	f003 0310 	and.w	r3, r3, #16
 800b5c2:	2b10      	cmp	r3, #16
 800b5c4:	d122      	bne.n	800b60c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	f003 0310 	and.w	r3, r3, #16
 800b5d0:	2b10      	cmp	r3, #16
 800b5d2:	d11b      	bne.n	800b60c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f06f 0210 	mvn.w	r2, #16
 800b5dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2208      	movs	r2, #8
 800b5e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	69db      	ldr	r3, [r3, #28]
 800b5ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d003      	beq.n	800b5fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 f952 	bl	800b89c <HAL_TIM_IC_CaptureCallback>
 800b5f8:	e005      	b.n	800b606 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f944 	bl	800b888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 f955 	bl	800b8b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	691b      	ldr	r3, [r3, #16]
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	2b01      	cmp	r3, #1
 800b618:	d10e      	bne.n	800b638 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	f003 0301 	and.w	r3, r3, #1
 800b624:	2b01      	cmp	r3, #1
 800b626:	d107      	bne.n	800b638 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f06f 0201 	mvn.w	r2, #1
 800b630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f7f6 fa1c 	bl	8001a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	691b      	ldr	r3, [r3, #16]
 800b63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b642:	2b80      	cmp	r3, #128	; 0x80
 800b644:	d10e      	bne.n	800b664 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b650:	2b80      	cmp	r3, #128	; 0x80
 800b652:	d107      	bne.n	800b664 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b65c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 fb0c 	bl	800bc7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	691b      	ldr	r3, [r3, #16]
 800b66a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b66e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b672:	d10e      	bne.n	800b692 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b67e:	2b80      	cmp	r3, #128	; 0x80
 800b680:	d107      	bne.n	800b692 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b68a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 faff 	bl	800bc90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	691b      	ldr	r3, [r3, #16]
 800b698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b69c:	2b40      	cmp	r3, #64	; 0x40
 800b69e:	d10e      	bne.n	800b6be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6aa:	2b40      	cmp	r3, #64	; 0x40
 800b6ac:	d107      	bne.n	800b6be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b6b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 f903 	bl	800b8c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	f003 0320 	and.w	r3, r3, #32
 800b6c8:	2b20      	cmp	r3, #32
 800b6ca:	d10e      	bne.n	800b6ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	f003 0320 	and.w	r3, r3, #32
 800b6d6:	2b20      	cmp	r3, #32
 800b6d8:	d107      	bne.n	800b6ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f06f 0220 	mvn.w	r2, #32
 800b6e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f000 fabf 	bl	800bc68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b6ea:	bf00      	nop
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
	...

0800b6f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6fe:	2300      	movs	r3, #0
 800b700:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d101      	bne.n	800b710 <HAL_TIM_ConfigClockSource+0x1c>
 800b70c:	2302      	movs	r3, #2
 800b70e:	e0b4      	b.n	800b87a <HAL_TIM_ConfigClockSource+0x186>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2201      	movs	r2, #1
 800b714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2202      	movs	r2, #2
 800b71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	4b56      	ldr	r3, [pc, #344]	; (800b884 <HAL_TIM_ConfigClockSource+0x190>)
 800b72c:	4013      	ands	r3, r2
 800b72e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	68ba      	ldr	r2, [r7, #8]
 800b73e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b748:	d03e      	beq.n	800b7c8 <HAL_TIM_ConfigClockSource+0xd4>
 800b74a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b74e:	f200 8087 	bhi.w	800b860 <HAL_TIM_ConfigClockSource+0x16c>
 800b752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b756:	f000 8086 	beq.w	800b866 <HAL_TIM_ConfigClockSource+0x172>
 800b75a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b75e:	d87f      	bhi.n	800b860 <HAL_TIM_ConfigClockSource+0x16c>
 800b760:	2b70      	cmp	r3, #112	; 0x70
 800b762:	d01a      	beq.n	800b79a <HAL_TIM_ConfigClockSource+0xa6>
 800b764:	2b70      	cmp	r3, #112	; 0x70
 800b766:	d87b      	bhi.n	800b860 <HAL_TIM_ConfigClockSource+0x16c>
 800b768:	2b60      	cmp	r3, #96	; 0x60
 800b76a:	d050      	beq.n	800b80e <HAL_TIM_ConfigClockSource+0x11a>
 800b76c:	2b60      	cmp	r3, #96	; 0x60
 800b76e:	d877      	bhi.n	800b860 <HAL_TIM_ConfigClockSource+0x16c>
 800b770:	2b50      	cmp	r3, #80	; 0x50
 800b772:	d03c      	beq.n	800b7ee <HAL_TIM_ConfigClockSource+0xfa>
 800b774:	2b50      	cmp	r3, #80	; 0x50
 800b776:	d873      	bhi.n	800b860 <HAL_TIM_ConfigClockSource+0x16c>
 800b778:	2b40      	cmp	r3, #64	; 0x40
 800b77a:	d058      	beq.n	800b82e <HAL_TIM_ConfigClockSource+0x13a>
 800b77c:	2b40      	cmp	r3, #64	; 0x40
 800b77e:	d86f      	bhi.n	800b860 <HAL_TIM_ConfigClockSource+0x16c>
 800b780:	2b30      	cmp	r3, #48	; 0x30
 800b782:	d064      	beq.n	800b84e <HAL_TIM_ConfigClockSource+0x15a>
 800b784:	2b30      	cmp	r3, #48	; 0x30
 800b786:	d86b      	bhi.n	800b860 <HAL_TIM_ConfigClockSource+0x16c>
 800b788:	2b20      	cmp	r3, #32
 800b78a:	d060      	beq.n	800b84e <HAL_TIM_ConfigClockSource+0x15a>
 800b78c:	2b20      	cmp	r3, #32
 800b78e:	d867      	bhi.n	800b860 <HAL_TIM_ConfigClockSource+0x16c>
 800b790:	2b00      	cmp	r3, #0
 800b792:	d05c      	beq.n	800b84e <HAL_TIM_ConfigClockSource+0x15a>
 800b794:	2b10      	cmp	r3, #16
 800b796:	d05a      	beq.n	800b84e <HAL_TIM_ConfigClockSource+0x15a>
 800b798:	e062      	b.n	800b860 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6818      	ldr	r0, [r3, #0]
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	6899      	ldr	r1, [r3, #8]
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	685a      	ldr	r2, [r3, #4]
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	f000 f9af 	bl	800bb0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b7bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	68ba      	ldr	r2, [r7, #8]
 800b7c4:	609a      	str	r2, [r3, #8]
      break;
 800b7c6:	e04f      	b.n	800b868 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6818      	ldr	r0, [r3, #0]
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	6899      	ldr	r1, [r3, #8]
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	685a      	ldr	r2, [r3, #4]
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	f000 f998 	bl	800bb0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	689a      	ldr	r2, [r3, #8]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b7ea:	609a      	str	r2, [r3, #8]
      break;
 800b7ec:	e03c      	b.n	800b868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6818      	ldr	r0, [r3, #0]
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	6859      	ldr	r1, [r3, #4]
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	f000 f90c 	bl	800ba18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2150      	movs	r1, #80	; 0x50
 800b806:	4618      	mov	r0, r3
 800b808:	f000 f965 	bl	800bad6 <TIM_ITRx_SetConfig>
      break;
 800b80c:	e02c      	b.n	800b868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6818      	ldr	r0, [r3, #0]
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	6859      	ldr	r1, [r3, #4]
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	461a      	mov	r2, r3
 800b81c:	f000 f92b 	bl	800ba76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2160      	movs	r1, #96	; 0x60
 800b826:	4618      	mov	r0, r3
 800b828:	f000 f955 	bl	800bad6 <TIM_ITRx_SetConfig>
      break;
 800b82c:	e01c      	b.n	800b868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6818      	ldr	r0, [r3, #0]
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	6859      	ldr	r1, [r3, #4]
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	461a      	mov	r2, r3
 800b83c:	f000 f8ec 	bl	800ba18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2140      	movs	r1, #64	; 0x40
 800b846:	4618      	mov	r0, r3
 800b848:	f000 f945 	bl	800bad6 <TIM_ITRx_SetConfig>
      break;
 800b84c:	e00c      	b.n	800b868 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4619      	mov	r1, r3
 800b858:	4610      	mov	r0, r2
 800b85a:	f000 f93c 	bl	800bad6 <TIM_ITRx_SetConfig>
      break;
 800b85e:	e003      	b.n	800b868 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	73fb      	strb	r3, [r7, #15]
      break;
 800b864:	e000      	b.n	800b868 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b866:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b878:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	fffeff88 	.word	0xfffeff88

0800b888 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b888:	b480      	push	{r7}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b890:	bf00      	nop
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b8a4:	bf00      	nop
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b8b8:	bf00      	nop
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b8cc:	bf00      	nop
 800b8ce:	370c      	adds	r7, #12
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a40      	ldr	r2, [pc, #256]	; (800b9ec <TIM_Base_SetConfig+0x114>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d013      	beq.n	800b918 <TIM_Base_SetConfig+0x40>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8f6:	d00f      	beq.n	800b918 <TIM_Base_SetConfig+0x40>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a3d      	ldr	r2, [pc, #244]	; (800b9f0 <TIM_Base_SetConfig+0x118>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d00b      	beq.n	800b918 <TIM_Base_SetConfig+0x40>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a3c      	ldr	r2, [pc, #240]	; (800b9f4 <TIM_Base_SetConfig+0x11c>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d007      	beq.n	800b918 <TIM_Base_SetConfig+0x40>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a3b      	ldr	r2, [pc, #236]	; (800b9f8 <TIM_Base_SetConfig+0x120>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d003      	beq.n	800b918 <TIM_Base_SetConfig+0x40>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a3a      	ldr	r2, [pc, #232]	; (800b9fc <TIM_Base_SetConfig+0x124>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d108      	bne.n	800b92a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b91e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	4313      	orrs	r3, r2
 800b928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a2f      	ldr	r2, [pc, #188]	; (800b9ec <TIM_Base_SetConfig+0x114>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d02b      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b938:	d027      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a2c      	ldr	r2, [pc, #176]	; (800b9f0 <TIM_Base_SetConfig+0x118>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d023      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a2b      	ldr	r2, [pc, #172]	; (800b9f4 <TIM_Base_SetConfig+0x11c>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d01f      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4a2a      	ldr	r2, [pc, #168]	; (800b9f8 <TIM_Base_SetConfig+0x120>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d01b      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4a29      	ldr	r2, [pc, #164]	; (800b9fc <TIM_Base_SetConfig+0x124>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d017      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4a28      	ldr	r2, [pc, #160]	; (800ba00 <TIM_Base_SetConfig+0x128>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d013      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	4a27      	ldr	r2, [pc, #156]	; (800ba04 <TIM_Base_SetConfig+0x12c>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d00f      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4a26      	ldr	r2, [pc, #152]	; (800ba08 <TIM_Base_SetConfig+0x130>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d00b      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4a25      	ldr	r2, [pc, #148]	; (800ba0c <TIM_Base_SetConfig+0x134>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d007      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4a24      	ldr	r2, [pc, #144]	; (800ba10 <TIM_Base_SetConfig+0x138>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d003      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4a23      	ldr	r2, [pc, #140]	; (800ba14 <TIM_Base_SetConfig+0x13c>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d108      	bne.n	800b99c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	4313      	orrs	r3, r2
 800b99a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	68fa      	ldr	r2, [r7, #12]
 800b9ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	689a      	ldr	r2, [r3, #8]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4a0a      	ldr	r2, [pc, #40]	; (800b9ec <TIM_Base_SetConfig+0x114>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d003      	beq.n	800b9d0 <TIM_Base_SetConfig+0xf8>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4a0c      	ldr	r2, [pc, #48]	; (800b9fc <TIM_Base_SetConfig+0x124>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d103      	bne.n	800b9d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	691a      	ldr	r2, [r3, #16]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	615a      	str	r2, [r3, #20]
}
 800b9de:	bf00      	nop
 800b9e0:	3714      	adds	r7, #20
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	40010000 	.word	0x40010000
 800b9f0:	40000400 	.word	0x40000400
 800b9f4:	40000800 	.word	0x40000800
 800b9f8:	40000c00 	.word	0x40000c00
 800b9fc:	40010400 	.word	0x40010400
 800ba00:	40014000 	.word	0x40014000
 800ba04:	40014400 	.word	0x40014400
 800ba08:	40014800 	.word	0x40014800
 800ba0c:	40001800 	.word	0x40001800
 800ba10:	40001c00 	.word	0x40001c00
 800ba14:	40002000 	.word	0x40002000

0800ba18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b087      	sub	sp, #28
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6a1b      	ldr	r3, [r3, #32]
 800ba28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	6a1b      	ldr	r3, [r3, #32]
 800ba2e:	f023 0201 	bic.w	r2, r3, #1
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	699b      	ldr	r3, [r3, #24]
 800ba3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	011b      	lsls	r3, r3, #4
 800ba48:	693a      	ldr	r2, [r7, #16]
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	f023 030a 	bic.w	r3, r3, #10
 800ba54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ba56:	697a      	ldr	r2, [r7, #20]
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	693a      	ldr	r2, [r7, #16]
 800ba62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	697a      	ldr	r2, [r7, #20]
 800ba68:	621a      	str	r2, [r3, #32]
}
 800ba6a:	bf00      	nop
 800ba6c:	371c      	adds	r7, #28
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba76:	b480      	push	{r7}
 800ba78:	b087      	sub	sp, #28
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	60f8      	str	r0, [r7, #12]
 800ba7e:	60b9      	str	r1, [r7, #8]
 800ba80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6a1b      	ldr	r3, [r3, #32]
 800ba86:	f023 0210 	bic.w	r2, r3, #16
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	699b      	ldr	r3, [r3, #24]
 800ba92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6a1b      	ldr	r3, [r3, #32]
 800ba98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800baa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	031b      	lsls	r3, r3, #12
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	4313      	orrs	r3, r2
 800baaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bab2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	011b      	lsls	r3, r3, #4
 800bab8:	693a      	ldr	r2, [r7, #16]
 800baba:	4313      	orrs	r3, r2
 800babc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	697a      	ldr	r2, [r7, #20]
 800bac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	693a      	ldr	r2, [r7, #16]
 800bac8:	621a      	str	r2, [r3, #32]
}
 800baca:	bf00      	nop
 800bacc:	371c      	adds	r7, #28
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr

0800bad6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bad6:	b480      	push	{r7}
 800bad8:	b085      	sub	sp, #20
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
 800bade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800baee:	683a      	ldr	r2, [r7, #0]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	4313      	orrs	r3, r2
 800baf4:	f043 0307 	orr.w	r3, r3, #7
 800baf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	609a      	str	r2, [r3, #8]
}
 800bb00:	bf00      	nop
 800bb02:	3714      	adds	r7, #20
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b087      	sub	sp, #28
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
 800bb18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	021a      	lsls	r2, r3, #8
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	431a      	orrs	r2, r3
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	4313      	orrs	r3, r2
 800bb34:	697a      	ldr	r2, [r7, #20]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	697a      	ldr	r2, [r7, #20]
 800bb3e:	609a      	str	r2, [r3, #8]
}
 800bb40:	bf00      	nop
 800bb42:	371c      	adds	r7, #28
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d101      	bne.n	800bb64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb60:	2302      	movs	r3, #2
 800bb62:	e06d      	b.n	800bc40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2201      	movs	r2, #1
 800bb68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2202      	movs	r2, #2
 800bb70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4a30      	ldr	r2, [pc, #192]	; (800bc4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d004      	beq.n	800bb98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4a2f      	ldr	r2, [pc, #188]	; (800bc50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d108      	bne.n	800bbaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bb9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	68fa      	ldr	r2, [r7, #12]
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a20      	ldr	r2, [pc, #128]	; (800bc4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d022      	beq.n	800bc14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbd6:	d01d      	beq.n	800bc14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a1d      	ldr	r2, [pc, #116]	; (800bc54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d018      	beq.n	800bc14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a1c      	ldr	r2, [pc, #112]	; (800bc58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d013      	beq.n	800bc14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a1a      	ldr	r2, [pc, #104]	; (800bc5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d00e      	beq.n	800bc14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a15      	ldr	r2, [pc, #84]	; (800bc50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d009      	beq.n	800bc14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a16      	ldr	r2, [pc, #88]	; (800bc60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d004      	beq.n	800bc14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4a15      	ldr	r2, [pc, #84]	; (800bc64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d10c      	bne.n	800bc2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	68ba      	ldr	r2, [r7, #8]
 800bc2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2201      	movs	r2, #1
 800bc32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc3e:	2300      	movs	r3, #0
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3714      	adds	r7, #20
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr
 800bc4c:	40010000 	.word	0x40010000
 800bc50:	40010400 	.word	0x40010400
 800bc54:	40000400 	.word	0x40000400
 800bc58:	40000800 	.word	0x40000800
 800bc5c:	40000c00 	.word	0x40000c00
 800bc60:	40014000 	.word	0x40014000
 800bc64:	40001800 	.word	0x40001800

0800bc68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc70:	bf00      	nop
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc84:	bf00      	nop
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bc98:	bf00      	nop
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d121      	bne.n	800bcfa <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	4b27      	ldr	r3, [pc, #156]	; (800bd58 <FMC_SDRAM_Init+0xb4>)
 800bcbc:	4013      	ands	r3, r2
 800bcbe:	683a      	ldr	r2, [r7, #0]
 800bcc0:	6851      	ldr	r1, [r2, #4]
 800bcc2:	683a      	ldr	r2, [r7, #0]
 800bcc4:	6892      	ldr	r2, [r2, #8]
 800bcc6:	4311      	orrs	r1, r2
 800bcc8:	683a      	ldr	r2, [r7, #0]
 800bcca:	68d2      	ldr	r2, [r2, #12]
 800bccc:	4311      	orrs	r1, r2
 800bcce:	683a      	ldr	r2, [r7, #0]
 800bcd0:	6912      	ldr	r2, [r2, #16]
 800bcd2:	4311      	orrs	r1, r2
 800bcd4:	683a      	ldr	r2, [r7, #0]
 800bcd6:	6952      	ldr	r2, [r2, #20]
 800bcd8:	4311      	orrs	r1, r2
 800bcda:	683a      	ldr	r2, [r7, #0]
 800bcdc:	6992      	ldr	r2, [r2, #24]
 800bcde:	4311      	orrs	r1, r2
 800bce0:	683a      	ldr	r2, [r7, #0]
 800bce2:	69d2      	ldr	r2, [r2, #28]
 800bce4:	4311      	orrs	r1, r2
 800bce6:	683a      	ldr	r2, [r7, #0]
 800bce8:	6a12      	ldr	r2, [r2, #32]
 800bcea:	4311      	orrs	r1, r2
 800bcec:	683a      	ldr	r2, [r7, #0]
 800bcee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bcf0:	430a      	orrs	r2, r1
 800bcf2:	431a      	orrs	r2, r3
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	601a      	str	r2, [r3, #0]
 800bcf8:	e026      	b.n	800bd48 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	69d9      	ldr	r1, [r3, #28]
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	6a1b      	ldr	r3, [r3, #32]
 800bd0a:	4319      	orrs	r1, r3
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd10:	430b      	orrs	r3, r1
 800bd12:	431a      	orrs	r2, r3
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	685a      	ldr	r2, [r3, #4]
 800bd1c:	4b0e      	ldr	r3, [pc, #56]	; (800bd58 <FMC_SDRAM_Init+0xb4>)
 800bd1e:	4013      	ands	r3, r2
 800bd20:	683a      	ldr	r2, [r7, #0]
 800bd22:	6851      	ldr	r1, [r2, #4]
 800bd24:	683a      	ldr	r2, [r7, #0]
 800bd26:	6892      	ldr	r2, [r2, #8]
 800bd28:	4311      	orrs	r1, r2
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	68d2      	ldr	r2, [r2, #12]
 800bd2e:	4311      	orrs	r1, r2
 800bd30:	683a      	ldr	r2, [r7, #0]
 800bd32:	6912      	ldr	r2, [r2, #16]
 800bd34:	4311      	orrs	r1, r2
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	6952      	ldr	r2, [r2, #20]
 800bd3a:	4311      	orrs	r1, r2
 800bd3c:	683a      	ldr	r2, [r7, #0]
 800bd3e:	6992      	ldr	r2, [r2, #24]
 800bd40:	430a      	orrs	r2, r1
 800bd42:	431a      	orrs	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bd48:	2300      	movs	r3, #0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	370c      	adds	r7, #12
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	ffff8000 	.word	0xffff8000

0800bd5c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b085      	sub	sp, #20
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d128      	bne.n	800bdc0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	1e59      	subs	r1, r3, #1
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	3b01      	subs	r3, #1
 800bd82:	011b      	lsls	r3, r3, #4
 800bd84:	4319      	orrs	r1, r3
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	021b      	lsls	r3, r3, #8
 800bd8e:	4319      	orrs	r1, r3
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	3b01      	subs	r3, #1
 800bd96:	031b      	lsls	r3, r3, #12
 800bd98:	4319      	orrs	r1, r3
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	691b      	ldr	r3, [r3, #16]
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	041b      	lsls	r3, r3, #16
 800bda2:	4319      	orrs	r1, r3
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	695b      	ldr	r3, [r3, #20]
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	051b      	lsls	r3, r3, #20
 800bdac:	4319      	orrs	r1, r3
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	699b      	ldr	r3, [r3, #24]
 800bdb2:	3b01      	subs	r3, #1
 800bdb4:	061b      	lsls	r3, r3, #24
 800bdb6:	430b      	orrs	r3, r1
 800bdb8:	431a      	orrs	r2, r3
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	609a      	str	r2, [r3, #8]
 800bdbe:	e02d      	b.n	800be1c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	689a      	ldr	r2, [r3, #8]
 800bdc4:	4b19      	ldr	r3, [pc, #100]	; (800be2c <FMC_SDRAM_Timing_Init+0xd0>)
 800bdc6:	4013      	ands	r3, r2
 800bdc8:	68ba      	ldr	r2, [r7, #8]
 800bdca:	68d2      	ldr	r2, [r2, #12]
 800bdcc:	3a01      	subs	r2, #1
 800bdce:	0311      	lsls	r1, r2, #12
 800bdd0:	68ba      	ldr	r2, [r7, #8]
 800bdd2:	6952      	ldr	r2, [r2, #20]
 800bdd4:	3a01      	subs	r2, #1
 800bdd6:	0512      	lsls	r2, r2, #20
 800bdd8:	430a      	orrs	r2, r1
 800bdda:	431a      	orrs	r2, r3
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	1e59      	subs	r1, r3, #1
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	011b      	lsls	r3, r3, #4
 800bdf6:	4319      	orrs	r1, r3
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	021b      	lsls	r3, r3, #8
 800be00:	4319      	orrs	r1, r3
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	3b01      	subs	r3, #1
 800be08:	041b      	lsls	r3, r3, #16
 800be0a:	4319      	orrs	r1, r3
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	699b      	ldr	r3, [r3, #24]
 800be10:	3b01      	subs	r3, #1
 800be12:	061b      	lsls	r3, r3, #24
 800be14:	430b      	orrs	r3, r1
 800be16:	431a      	orrs	r2, r3
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3714      	adds	r7, #20
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr
 800be2a:	bf00      	nop
 800be2c:	ff0f0fff 	.word	0xff0f0fff

0800be30 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800be30:	b480      	push	{r7}
 800be32:	b085      	sub	sp, #20
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	691a      	ldr	r2, [r3, #16]
 800be40:	4b0c      	ldr	r3, [pc, #48]	; (800be74 <FMC_SDRAM_SendCommand+0x44>)
 800be42:	4013      	ands	r3, r2
 800be44:	68ba      	ldr	r2, [r7, #8]
 800be46:	6811      	ldr	r1, [r2, #0]
 800be48:	68ba      	ldr	r2, [r7, #8]
 800be4a:	6852      	ldr	r2, [r2, #4]
 800be4c:	4311      	orrs	r1, r2
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	6892      	ldr	r2, [r2, #8]
 800be52:	3a01      	subs	r2, #1
 800be54:	0152      	lsls	r2, r2, #5
 800be56:	4311      	orrs	r1, r2
 800be58:	68ba      	ldr	r2, [r7, #8]
 800be5a:	68d2      	ldr	r2, [r2, #12]
 800be5c:	0252      	lsls	r2, r2, #9
 800be5e:	430a      	orrs	r2, r1
 800be60:	431a      	orrs	r2, r3
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3714      	adds	r7, #20
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr
 800be74:	ffc00000 	.word	0xffc00000

0800be78 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	695a      	ldr	r2, [r3, #20]
 800be86:	4b07      	ldr	r3, [pc, #28]	; (800bea4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800be88:	4013      	ands	r3, r2
 800be8a:	683a      	ldr	r2, [r7, #0]
 800be8c:	0052      	lsls	r2, r2, #1
 800be8e:	431a      	orrs	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800be94:	2300      	movs	r3, #0
}
 800be96:	4618      	mov	r0, r3
 800be98:	370c      	adds	r7, #12
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	ffffc001 	.word	0xffffc001

0800bea8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bea8:	b480      	push	{r7}
 800beaa:	b085      	sub	sp, #20
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	68fa      	ldr	r2, [r7, #12]
 800bebc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	689a      	ldr	r2, [r3, #8]
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	683a      	ldr	r2, [r7, #0]
 800becc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	683a      	ldr	r2, [r7, #0]
 800bed2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	1c5a      	adds	r2, r3, #1
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	601a      	str	r2, [r3, #0]
}
 800bee4:	bf00      	nop
 800bee6:	3714      	adds	r7, #20
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	6892      	ldr	r2, [r2, #8]
 800bf06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	6852      	ldr	r2, [r2, #4]
 800bf10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d103      	bne.n	800bf24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	689a      	ldr	r2, [r3, #8]
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	1e5a      	subs	r2, r3, #1
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3714      	adds	r7, #20
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf4e:	4b4f      	ldr	r3, [pc, #316]	; (800c08c <xTaskIncrementTick+0x148>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	f040 808a 	bne.w	800c06c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bf58:	4b4d      	ldr	r3, [pc, #308]	; (800c090 <xTaskIncrementTick+0x14c>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bf60:	4a4b      	ldr	r2, [pc, #300]	; (800c090 <xTaskIncrementTick+0x14c>)
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d122      	bne.n	800bfb2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf6c:	4b49      	ldr	r3, [pc, #292]	; (800c094 <xTaskIncrementTick+0x150>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00c      	beq.n	800bf90 <xTaskIncrementTick+0x4c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bf76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7a:	b672      	cpsid	i
 800bf7c:	f383 8811 	msr	BASEPRI, r3
 800bf80:	f3bf 8f6f 	isb	sy
 800bf84:	f3bf 8f4f 	dsb	sy
 800bf88:	b662      	cpsie	i
 800bf8a:	603b      	str	r3, [r7, #0]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bf8c:	bf00      	nop
 800bf8e:	e7fe      	b.n	800bf8e <xTaskIncrementTick+0x4a>
 800bf90:	4b40      	ldr	r3, [pc, #256]	; (800c094 <xTaskIncrementTick+0x150>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	60fb      	str	r3, [r7, #12]
 800bf96:	4b40      	ldr	r3, [pc, #256]	; (800c098 <xTaskIncrementTick+0x154>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a3e      	ldr	r2, [pc, #248]	; (800c094 <xTaskIncrementTick+0x150>)
 800bf9c:	6013      	str	r3, [r2, #0]
 800bf9e:	4a3e      	ldr	r2, [pc, #248]	; (800c098 <xTaskIncrementTick+0x154>)
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	6013      	str	r3, [r2, #0]
 800bfa4:	4b3d      	ldr	r3, [pc, #244]	; (800c09c <xTaskIncrementTick+0x158>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	4a3c      	ldr	r2, [pc, #240]	; (800c09c <xTaskIncrementTick+0x158>)
 800bfac:	6013      	str	r3, [r2, #0]
 800bfae:	f000 f8e1 	bl	800c174 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bfb2:	4b3b      	ldr	r3, [pc, #236]	; (800c0a0 <xTaskIncrementTick+0x15c>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	693a      	ldr	r2, [r7, #16]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d348      	bcc.n	800c04e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfbc:	4b35      	ldr	r3, [pc, #212]	; (800c094 <xTaskIncrementTick+0x150>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d104      	bne.n	800bfd0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfc6:	4b36      	ldr	r3, [pc, #216]	; (800c0a0 <xTaskIncrementTick+0x15c>)
 800bfc8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfcc:	601a      	str	r2, [r3, #0]
					break;
 800bfce:	e03e      	b.n	800c04e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfd0:	4b30      	ldr	r3, [pc, #192]	; (800c094 <xTaskIncrementTick+0x150>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bfe0:	693a      	ldr	r2, [r7, #16]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d203      	bcs.n	800bff0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bfe8:	4a2d      	ldr	r2, [pc, #180]	; (800c0a0 <xTaskIncrementTick+0x15c>)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bfee:	e02e      	b.n	800c04e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	3304      	adds	r3, #4
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7ff ff7b 	bl	800bef0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d004      	beq.n	800c00c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	3318      	adds	r3, #24
 800c006:	4618      	mov	r0, r3
 800c008:	f7ff ff72 	bl	800bef0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c010:	2201      	movs	r2, #1
 800c012:	409a      	lsls	r2, r3
 800c014:	4b23      	ldr	r3, [pc, #140]	; (800c0a4 <xTaskIncrementTick+0x160>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4313      	orrs	r3, r2
 800c01a:	4a22      	ldr	r2, [pc, #136]	; (800c0a4 <xTaskIncrementTick+0x160>)
 800c01c:	6013      	str	r3, [r2, #0]
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c022:	4613      	mov	r3, r2
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	4413      	add	r3, r2
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	4a1f      	ldr	r2, [pc, #124]	; (800c0a8 <xTaskIncrementTick+0x164>)
 800c02c:	441a      	add	r2, r3
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	3304      	adds	r3, #4
 800c032:	4619      	mov	r1, r3
 800c034:	4610      	mov	r0, r2
 800c036:	f7ff ff37 	bl	800bea8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c03e:	4b1b      	ldr	r3, [pc, #108]	; (800c0ac <xTaskIncrementTick+0x168>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c044:	429a      	cmp	r2, r3
 800c046:	d3b9      	bcc.n	800bfbc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c048:	2301      	movs	r3, #1
 800c04a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c04c:	e7b6      	b.n	800bfbc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c04e:	4b17      	ldr	r3, [pc, #92]	; (800c0ac <xTaskIncrementTick+0x168>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c054:	4914      	ldr	r1, [pc, #80]	; (800c0a8 <xTaskIncrementTick+0x164>)
 800c056:	4613      	mov	r3, r2
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	4413      	add	r3, r2
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	440b      	add	r3, r1
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	2b01      	cmp	r3, #1
 800c064:	d907      	bls.n	800c076 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800c066:	2301      	movs	r3, #1
 800c068:	617b      	str	r3, [r7, #20]
 800c06a:	e004      	b.n	800c076 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c06c:	4b10      	ldr	r3, [pc, #64]	; (800c0b0 <xTaskIncrementTick+0x16c>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	3301      	adds	r3, #1
 800c072:	4a0f      	ldr	r2, [pc, #60]	; (800c0b0 <xTaskIncrementTick+0x16c>)
 800c074:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c076:	4b0f      	ldr	r3, [pc, #60]	; (800c0b4 <xTaskIncrementTick+0x170>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d001      	beq.n	800c082 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800c07e:	2301      	movs	r3, #1
 800c080:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c082:	697b      	ldr	r3, [r7, #20]
}
 800c084:	4618      	mov	r0, r3
 800c086:	3718      	adds	r7, #24
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	20000cdc 	.word	0x20000cdc
 800c090:	20000cc4 	.word	0x20000cc4
 800c094:	20000cbc 	.word	0x20000cbc
 800c098:	20000cc0 	.word	0x20000cc0
 800c09c:	20000cd4 	.word	0x20000cd4
 800c0a0:	20000cd8 	.word	0x20000cd8
 800c0a4:	20000cc8 	.word	0x20000cc8
 800c0a8:	20000c30 	.word	0x20000c30
 800c0ac:	20000c2c 	.word	0x20000c2c
 800c0b0:	20000ccc 	.word	0x20000ccc
 800c0b4:	20000cd0 	.word	0x20000cd0

0800c0b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b087      	sub	sp, #28
 800c0bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c0be:	4b28      	ldr	r3, [pc, #160]	; (800c160 <vTaskSwitchContext+0xa8>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d003      	beq.n	800c0ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c0c6:	4b27      	ldr	r3, [pc, #156]	; (800c164 <vTaskSwitchContext+0xac>)
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c0cc:	e041      	b.n	800c152 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c0ce:	4b25      	ldr	r3, [pc, #148]	; (800c164 <vTaskSwitchContext+0xac>)
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0d4:	4b24      	ldr	r3, [pc, #144]	; (800c168 <vTaskSwitchContext+0xb0>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	fab3 f383 	clz	r3, r3
 800c0e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c0e2:	7afb      	ldrb	r3, [r7, #11]
 800c0e4:	f1c3 031f 	rsb	r3, r3, #31
 800c0e8:	617b      	str	r3, [r7, #20]
 800c0ea:	4920      	ldr	r1, [pc, #128]	; (800c16c <vTaskSwitchContext+0xb4>)
 800c0ec:	697a      	ldr	r2, [r7, #20]
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	4413      	add	r3, r2
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	440b      	add	r3, r1
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d10c      	bne.n	800c118 <vTaskSwitchContext+0x60>
	__asm volatile
 800c0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c102:	b672      	cpsid	i
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	b662      	cpsie	i
 800c112:	607b      	str	r3, [r7, #4]
}
 800c114:	bf00      	nop
 800c116:	e7fe      	b.n	800c116 <vTaskSwitchContext+0x5e>
 800c118:	697a      	ldr	r2, [r7, #20]
 800c11a:	4613      	mov	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	4413      	add	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4a12      	ldr	r2, [pc, #72]	; (800c16c <vTaskSwitchContext+0xb4>)
 800c124:	4413      	add	r3, r2
 800c126:	613b      	str	r3, [r7, #16]
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	685a      	ldr	r2, [r3, #4]
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	605a      	str	r2, [r3, #4]
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	685a      	ldr	r2, [r3, #4]
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	3308      	adds	r3, #8
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d104      	bne.n	800c148 <vTaskSwitchContext+0x90>
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	685a      	ldr	r2, [r3, #4]
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	605a      	str	r2, [r3, #4]
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	4a08      	ldr	r2, [pc, #32]	; (800c170 <vTaskSwitchContext+0xb8>)
 800c150:	6013      	str	r3, [r2, #0]
}
 800c152:	bf00      	nop
 800c154:	371c      	adds	r7, #28
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop
 800c160:	20000cdc 	.word	0x20000cdc
 800c164:	20000cd0 	.word	0x20000cd0
 800c168:	20000cc8 	.word	0x20000cc8
 800c16c:	20000c30 	.word	0x20000c30
 800c170:	20000c2c 	.word	0x20000c2c

0800c174 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c17a:	4b0c      	ldr	r3, [pc, #48]	; (800c1ac <prvResetNextTaskUnblockTime+0x38>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d104      	bne.n	800c18e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c184:	4b0a      	ldr	r3, [pc, #40]	; (800c1b0 <prvResetNextTaskUnblockTime+0x3c>)
 800c186:	f04f 32ff 	mov.w	r2, #4294967295
 800c18a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c18c:	e008      	b.n	800c1a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c18e:	4b07      	ldr	r3, [pc, #28]	; (800c1ac <prvResetNextTaskUnblockTime+0x38>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	4a04      	ldr	r2, [pc, #16]	; (800c1b0 <prvResetNextTaskUnblockTime+0x3c>)
 800c19e:	6013      	str	r3, [r2, #0]
}
 800c1a0:	bf00      	nop
 800c1a2:	370c      	adds	r7, #12
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr
 800c1ac:	20000cbc 	.word	0x20000cbc
 800c1b0:	20000cd8 	.word	0x20000cd8
	...

0800c1c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c1c0:	4b07      	ldr	r3, [pc, #28]	; (800c1e0 <pxCurrentTCBConst2>)
 800c1c2:	6819      	ldr	r1, [r3, #0]
 800c1c4:	6808      	ldr	r0, [r1, #0]
 800c1c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ca:	f380 8809 	msr	PSP, r0
 800c1ce:	f3bf 8f6f 	isb	sy
 800c1d2:	f04f 0000 	mov.w	r0, #0
 800c1d6:	f380 8811 	msr	BASEPRI, r0
 800c1da:	4770      	bx	lr
 800c1dc:	f3af 8000 	nop.w

0800c1e0 <pxCurrentTCBConst2>:
 800c1e0:	20000c2c 	.word	0x20000c2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c1e4:	bf00      	nop
 800c1e6:	bf00      	nop
	...

0800c1f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c1f0:	f3ef 8009 	mrs	r0, PSP
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	4b15      	ldr	r3, [pc, #84]	; (800c250 <pxCurrentTCBConst>)
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	f01e 0f10 	tst.w	lr, #16
 800c200:	bf08      	it	eq
 800c202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c20a:	6010      	str	r0, [r2, #0]
 800c20c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c210:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c214:	b672      	cpsid	i
 800c216:	f380 8811 	msr	BASEPRI, r0
 800c21a:	f3bf 8f4f 	dsb	sy
 800c21e:	f3bf 8f6f 	isb	sy
 800c222:	b662      	cpsie	i
 800c224:	f7ff ff48 	bl	800c0b8 <vTaskSwitchContext>
 800c228:	f04f 0000 	mov.w	r0, #0
 800c22c:	f380 8811 	msr	BASEPRI, r0
 800c230:	bc09      	pop	{r0, r3}
 800c232:	6819      	ldr	r1, [r3, #0]
 800c234:	6808      	ldr	r0, [r1, #0]
 800c236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c23a:	f01e 0f10 	tst.w	lr, #16
 800c23e:	bf08      	it	eq
 800c240:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c244:	f380 8809 	msr	PSP, r0
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop

0800c250 <pxCurrentTCBConst>:
 800c250:	20000c2c 	.word	0x20000c2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c254:	bf00      	nop
 800c256:	bf00      	nop

0800c258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
	__asm volatile
 800c25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c262:	b672      	cpsid	i
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	b662      	cpsie	i
 800c272:	607b      	str	r3, [r7, #4]
}
 800c274:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c276:	f7ff fe65 	bl	800bf44 <xTaskIncrementTick>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d003      	beq.n	800c288 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c280:	4b06      	ldr	r3, [pc, #24]	; (800c29c <SysTick_Handler+0x44>)
 800c282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c286:	601a      	str	r2, [r3, #0]
 800c288:	2300      	movs	r3, #0
 800c28a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c292:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c294:	bf00      	nop
 800c296:	3708      	adds	r7, #8
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	e000ed04 	.word	0xe000ed04

0800c2a0 <__errno>:
 800c2a0:	4b01      	ldr	r3, [pc, #4]	; (800c2a8 <__errno+0x8>)
 800c2a2:	6818      	ldr	r0, [r3, #0]
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop
 800c2a8:	20000080 	.word	0x20000080

0800c2ac <__libc_init_array>:
 800c2ac:	b570      	push	{r4, r5, r6, lr}
 800c2ae:	4d0d      	ldr	r5, [pc, #52]	; (800c2e4 <__libc_init_array+0x38>)
 800c2b0:	4c0d      	ldr	r4, [pc, #52]	; (800c2e8 <__libc_init_array+0x3c>)
 800c2b2:	1b64      	subs	r4, r4, r5
 800c2b4:	10a4      	asrs	r4, r4, #2
 800c2b6:	2600      	movs	r6, #0
 800c2b8:	42a6      	cmp	r6, r4
 800c2ba:	d109      	bne.n	800c2d0 <__libc_init_array+0x24>
 800c2bc:	4d0b      	ldr	r5, [pc, #44]	; (800c2ec <__libc_init_array+0x40>)
 800c2be:	4c0c      	ldr	r4, [pc, #48]	; (800c2f0 <__libc_init_array+0x44>)
 800c2c0:	f000 fc8e 	bl	800cbe0 <_init>
 800c2c4:	1b64      	subs	r4, r4, r5
 800c2c6:	10a4      	asrs	r4, r4, #2
 800c2c8:	2600      	movs	r6, #0
 800c2ca:	42a6      	cmp	r6, r4
 800c2cc:	d105      	bne.n	800c2da <__libc_init_array+0x2e>
 800c2ce:	bd70      	pop	{r4, r5, r6, pc}
 800c2d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2d4:	4798      	blx	r3
 800c2d6:	3601      	adds	r6, #1
 800c2d8:	e7ee      	b.n	800c2b8 <__libc_init_array+0xc>
 800c2da:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2de:	4798      	blx	r3
 800c2e0:	3601      	adds	r6, #1
 800c2e2:	e7f2      	b.n	800c2ca <__libc_init_array+0x1e>
 800c2e4:	0800f5fc 	.word	0x0800f5fc
 800c2e8:	0800f5fc 	.word	0x0800f5fc
 800c2ec:	0800f5fc 	.word	0x0800f5fc
 800c2f0:	0800f600 	.word	0x0800f600

0800c2f4 <memcpy>:
 800c2f4:	440a      	add	r2, r1
 800c2f6:	4291      	cmp	r1, r2
 800c2f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2fc:	d100      	bne.n	800c300 <memcpy+0xc>
 800c2fe:	4770      	bx	lr
 800c300:	b510      	push	{r4, lr}
 800c302:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c30a:	4291      	cmp	r1, r2
 800c30c:	d1f9      	bne.n	800c302 <memcpy+0xe>
 800c30e:	bd10      	pop	{r4, pc}

0800c310 <memset>:
 800c310:	4402      	add	r2, r0
 800c312:	4603      	mov	r3, r0
 800c314:	4293      	cmp	r3, r2
 800c316:	d100      	bne.n	800c31a <memset+0xa>
 800c318:	4770      	bx	lr
 800c31a:	f803 1b01 	strb.w	r1, [r3], #1
 800c31e:	e7f9      	b.n	800c314 <memset+0x4>

0800c320 <siprintf>:
 800c320:	b40e      	push	{r1, r2, r3}
 800c322:	b500      	push	{lr}
 800c324:	b09c      	sub	sp, #112	; 0x70
 800c326:	ab1d      	add	r3, sp, #116	; 0x74
 800c328:	9002      	str	r0, [sp, #8]
 800c32a:	9006      	str	r0, [sp, #24]
 800c32c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c330:	4809      	ldr	r0, [pc, #36]	; (800c358 <siprintf+0x38>)
 800c332:	9107      	str	r1, [sp, #28]
 800c334:	9104      	str	r1, [sp, #16]
 800c336:	4909      	ldr	r1, [pc, #36]	; (800c35c <siprintf+0x3c>)
 800c338:	f853 2b04 	ldr.w	r2, [r3], #4
 800c33c:	9105      	str	r1, [sp, #20]
 800c33e:	6800      	ldr	r0, [r0, #0]
 800c340:	9301      	str	r3, [sp, #4]
 800c342:	a902      	add	r1, sp, #8
 800c344:	f000 f868 	bl	800c418 <_svfiprintf_r>
 800c348:	9b02      	ldr	r3, [sp, #8]
 800c34a:	2200      	movs	r2, #0
 800c34c:	701a      	strb	r2, [r3, #0]
 800c34e:	b01c      	add	sp, #112	; 0x70
 800c350:	f85d eb04 	ldr.w	lr, [sp], #4
 800c354:	b003      	add	sp, #12
 800c356:	4770      	bx	lr
 800c358:	20000080 	.word	0x20000080
 800c35c:	ffff0208 	.word	0xffff0208

0800c360 <__ssputs_r>:
 800c360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c364:	688e      	ldr	r6, [r1, #8]
 800c366:	429e      	cmp	r6, r3
 800c368:	4682      	mov	sl, r0
 800c36a:	460c      	mov	r4, r1
 800c36c:	4690      	mov	r8, r2
 800c36e:	461f      	mov	r7, r3
 800c370:	d838      	bhi.n	800c3e4 <__ssputs_r+0x84>
 800c372:	898a      	ldrh	r2, [r1, #12]
 800c374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c378:	d032      	beq.n	800c3e0 <__ssputs_r+0x80>
 800c37a:	6825      	ldr	r5, [r4, #0]
 800c37c:	6909      	ldr	r1, [r1, #16]
 800c37e:	eba5 0901 	sub.w	r9, r5, r1
 800c382:	6965      	ldr	r5, [r4, #20]
 800c384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c38c:	3301      	adds	r3, #1
 800c38e:	444b      	add	r3, r9
 800c390:	106d      	asrs	r5, r5, #1
 800c392:	429d      	cmp	r5, r3
 800c394:	bf38      	it	cc
 800c396:	461d      	movcc	r5, r3
 800c398:	0553      	lsls	r3, r2, #21
 800c39a:	d531      	bpl.n	800c400 <__ssputs_r+0xa0>
 800c39c:	4629      	mov	r1, r5
 800c39e:	f000 fb55 	bl	800ca4c <_malloc_r>
 800c3a2:	4606      	mov	r6, r0
 800c3a4:	b950      	cbnz	r0, 800c3bc <__ssputs_r+0x5c>
 800c3a6:	230c      	movs	r3, #12
 800c3a8:	f8ca 3000 	str.w	r3, [sl]
 800c3ac:	89a3      	ldrh	r3, [r4, #12]
 800c3ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3b2:	81a3      	strh	r3, [r4, #12]
 800c3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3bc:	6921      	ldr	r1, [r4, #16]
 800c3be:	464a      	mov	r2, r9
 800c3c0:	f7ff ff98 	bl	800c2f4 <memcpy>
 800c3c4:	89a3      	ldrh	r3, [r4, #12]
 800c3c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3ce:	81a3      	strh	r3, [r4, #12]
 800c3d0:	6126      	str	r6, [r4, #16]
 800c3d2:	6165      	str	r5, [r4, #20]
 800c3d4:	444e      	add	r6, r9
 800c3d6:	eba5 0509 	sub.w	r5, r5, r9
 800c3da:	6026      	str	r6, [r4, #0]
 800c3dc:	60a5      	str	r5, [r4, #8]
 800c3de:	463e      	mov	r6, r7
 800c3e0:	42be      	cmp	r6, r7
 800c3e2:	d900      	bls.n	800c3e6 <__ssputs_r+0x86>
 800c3e4:	463e      	mov	r6, r7
 800c3e6:	6820      	ldr	r0, [r4, #0]
 800c3e8:	4632      	mov	r2, r6
 800c3ea:	4641      	mov	r1, r8
 800c3ec:	f000 faa8 	bl	800c940 <memmove>
 800c3f0:	68a3      	ldr	r3, [r4, #8]
 800c3f2:	1b9b      	subs	r3, r3, r6
 800c3f4:	60a3      	str	r3, [r4, #8]
 800c3f6:	6823      	ldr	r3, [r4, #0]
 800c3f8:	4433      	add	r3, r6
 800c3fa:	6023      	str	r3, [r4, #0]
 800c3fc:	2000      	movs	r0, #0
 800c3fe:	e7db      	b.n	800c3b8 <__ssputs_r+0x58>
 800c400:	462a      	mov	r2, r5
 800c402:	f000 fb97 	bl	800cb34 <_realloc_r>
 800c406:	4606      	mov	r6, r0
 800c408:	2800      	cmp	r0, #0
 800c40a:	d1e1      	bne.n	800c3d0 <__ssputs_r+0x70>
 800c40c:	6921      	ldr	r1, [r4, #16]
 800c40e:	4650      	mov	r0, sl
 800c410:	f000 fab0 	bl	800c974 <_free_r>
 800c414:	e7c7      	b.n	800c3a6 <__ssputs_r+0x46>
	...

0800c418 <_svfiprintf_r>:
 800c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c41c:	4698      	mov	r8, r3
 800c41e:	898b      	ldrh	r3, [r1, #12]
 800c420:	061b      	lsls	r3, r3, #24
 800c422:	b09d      	sub	sp, #116	; 0x74
 800c424:	4607      	mov	r7, r0
 800c426:	460d      	mov	r5, r1
 800c428:	4614      	mov	r4, r2
 800c42a:	d50e      	bpl.n	800c44a <_svfiprintf_r+0x32>
 800c42c:	690b      	ldr	r3, [r1, #16]
 800c42e:	b963      	cbnz	r3, 800c44a <_svfiprintf_r+0x32>
 800c430:	2140      	movs	r1, #64	; 0x40
 800c432:	f000 fb0b 	bl	800ca4c <_malloc_r>
 800c436:	6028      	str	r0, [r5, #0]
 800c438:	6128      	str	r0, [r5, #16]
 800c43a:	b920      	cbnz	r0, 800c446 <_svfiprintf_r+0x2e>
 800c43c:	230c      	movs	r3, #12
 800c43e:	603b      	str	r3, [r7, #0]
 800c440:	f04f 30ff 	mov.w	r0, #4294967295
 800c444:	e0d1      	b.n	800c5ea <_svfiprintf_r+0x1d2>
 800c446:	2340      	movs	r3, #64	; 0x40
 800c448:	616b      	str	r3, [r5, #20]
 800c44a:	2300      	movs	r3, #0
 800c44c:	9309      	str	r3, [sp, #36]	; 0x24
 800c44e:	2320      	movs	r3, #32
 800c450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c454:	f8cd 800c 	str.w	r8, [sp, #12]
 800c458:	2330      	movs	r3, #48	; 0x30
 800c45a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c604 <_svfiprintf_r+0x1ec>
 800c45e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c462:	f04f 0901 	mov.w	r9, #1
 800c466:	4623      	mov	r3, r4
 800c468:	469a      	mov	sl, r3
 800c46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c46e:	b10a      	cbz	r2, 800c474 <_svfiprintf_r+0x5c>
 800c470:	2a25      	cmp	r2, #37	; 0x25
 800c472:	d1f9      	bne.n	800c468 <_svfiprintf_r+0x50>
 800c474:	ebba 0b04 	subs.w	fp, sl, r4
 800c478:	d00b      	beq.n	800c492 <_svfiprintf_r+0x7a>
 800c47a:	465b      	mov	r3, fp
 800c47c:	4622      	mov	r2, r4
 800c47e:	4629      	mov	r1, r5
 800c480:	4638      	mov	r0, r7
 800c482:	f7ff ff6d 	bl	800c360 <__ssputs_r>
 800c486:	3001      	adds	r0, #1
 800c488:	f000 80aa 	beq.w	800c5e0 <_svfiprintf_r+0x1c8>
 800c48c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c48e:	445a      	add	r2, fp
 800c490:	9209      	str	r2, [sp, #36]	; 0x24
 800c492:	f89a 3000 	ldrb.w	r3, [sl]
 800c496:	2b00      	cmp	r3, #0
 800c498:	f000 80a2 	beq.w	800c5e0 <_svfiprintf_r+0x1c8>
 800c49c:	2300      	movs	r3, #0
 800c49e:	f04f 32ff 	mov.w	r2, #4294967295
 800c4a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4a6:	f10a 0a01 	add.w	sl, sl, #1
 800c4aa:	9304      	str	r3, [sp, #16]
 800c4ac:	9307      	str	r3, [sp, #28]
 800c4ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4b2:	931a      	str	r3, [sp, #104]	; 0x68
 800c4b4:	4654      	mov	r4, sl
 800c4b6:	2205      	movs	r2, #5
 800c4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4bc:	4851      	ldr	r0, [pc, #324]	; (800c604 <_svfiprintf_r+0x1ec>)
 800c4be:	f7f3 fea7 	bl	8000210 <memchr>
 800c4c2:	9a04      	ldr	r2, [sp, #16]
 800c4c4:	b9d8      	cbnz	r0, 800c4fe <_svfiprintf_r+0xe6>
 800c4c6:	06d0      	lsls	r0, r2, #27
 800c4c8:	bf44      	itt	mi
 800c4ca:	2320      	movmi	r3, #32
 800c4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4d0:	0711      	lsls	r1, r2, #28
 800c4d2:	bf44      	itt	mi
 800c4d4:	232b      	movmi	r3, #43	; 0x2b
 800c4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4da:	f89a 3000 	ldrb.w	r3, [sl]
 800c4de:	2b2a      	cmp	r3, #42	; 0x2a
 800c4e0:	d015      	beq.n	800c50e <_svfiprintf_r+0xf6>
 800c4e2:	9a07      	ldr	r2, [sp, #28]
 800c4e4:	4654      	mov	r4, sl
 800c4e6:	2000      	movs	r0, #0
 800c4e8:	f04f 0c0a 	mov.w	ip, #10
 800c4ec:	4621      	mov	r1, r4
 800c4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4f2:	3b30      	subs	r3, #48	; 0x30
 800c4f4:	2b09      	cmp	r3, #9
 800c4f6:	d94e      	bls.n	800c596 <_svfiprintf_r+0x17e>
 800c4f8:	b1b0      	cbz	r0, 800c528 <_svfiprintf_r+0x110>
 800c4fa:	9207      	str	r2, [sp, #28]
 800c4fc:	e014      	b.n	800c528 <_svfiprintf_r+0x110>
 800c4fe:	eba0 0308 	sub.w	r3, r0, r8
 800c502:	fa09 f303 	lsl.w	r3, r9, r3
 800c506:	4313      	orrs	r3, r2
 800c508:	9304      	str	r3, [sp, #16]
 800c50a:	46a2      	mov	sl, r4
 800c50c:	e7d2      	b.n	800c4b4 <_svfiprintf_r+0x9c>
 800c50e:	9b03      	ldr	r3, [sp, #12]
 800c510:	1d19      	adds	r1, r3, #4
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	9103      	str	r1, [sp, #12]
 800c516:	2b00      	cmp	r3, #0
 800c518:	bfbb      	ittet	lt
 800c51a:	425b      	neglt	r3, r3
 800c51c:	f042 0202 	orrlt.w	r2, r2, #2
 800c520:	9307      	strge	r3, [sp, #28]
 800c522:	9307      	strlt	r3, [sp, #28]
 800c524:	bfb8      	it	lt
 800c526:	9204      	strlt	r2, [sp, #16]
 800c528:	7823      	ldrb	r3, [r4, #0]
 800c52a:	2b2e      	cmp	r3, #46	; 0x2e
 800c52c:	d10c      	bne.n	800c548 <_svfiprintf_r+0x130>
 800c52e:	7863      	ldrb	r3, [r4, #1]
 800c530:	2b2a      	cmp	r3, #42	; 0x2a
 800c532:	d135      	bne.n	800c5a0 <_svfiprintf_r+0x188>
 800c534:	9b03      	ldr	r3, [sp, #12]
 800c536:	1d1a      	adds	r2, r3, #4
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	9203      	str	r2, [sp, #12]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	bfb8      	it	lt
 800c540:	f04f 33ff 	movlt.w	r3, #4294967295
 800c544:	3402      	adds	r4, #2
 800c546:	9305      	str	r3, [sp, #20]
 800c548:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c614 <_svfiprintf_r+0x1fc>
 800c54c:	7821      	ldrb	r1, [r4, #0]
 800c54e:	2203      	movs	r2, #3
 800c550:	4650      	mov	r0, sl
 800c552:	f7f3 fe5d 	bl	8000210 <memchr>
 800c556:	b140      	cbz	r0, 800c56a <_svfiprintf_r+0x152>
 800c558:	2340      	movs	r3, #64	; 0x40
 800c55a:	eba0 000a 	sub.w	r0, r0, sl
 800c55e:	fa03 f000 	lsl.w	r0, r3, r0
 800c562:	9b04      	ldr	r3, [sp, #16]
 800c564:	4303      	orrs	r3, r0
 800c566:	3401      	adds	r4, #1
 800c568:	9304      	str	r3, [sp, #16]
 800c56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c56e:	4826      	ldr	r0, [pc, #152]	; (800c608 <_svfiprintf_r+0x1f0>)
 800c570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c574:	2206      	movs	r2, #6
 800c576:	f7f3 fe4b 	bl	8000210 <memchr>
 800c57a:	2800      	cmp	r0, #0
 800c57c:	d038      	beq.n	800c5f0 <_svfiprintf_r+0x1d8>
 800c57e:	4b23      	ldr	r3, [pc, #140]	; (800c60c <_svfiprintf_r+0x1f4>)
 800c580:	bb1b      	cbnz	r3, 800c5ca <_svfiprintf_r+0x1b2>
 800c582:	9b03      	ldr	r3, [sp, #12]
 800c584:	3307      	adds	r3, #7
 800c586:	f023 0307 	bic.w	r3, r3, #7
 800c58a:	3308      	adds	r3, #8
 800c58c:	9303      	str	r3, [sp, #12]
 800c58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c590:	4433      	add	r3, r6
 800c592:	9309      	str	r3, [sp, #36]	; 0x24
 800c594:	e767      	b.n	800c466 <_svfiprintf_r+0x4e>
 800c596:	fb0c 3202 	mla	r2, ip, r2, r3
 800c59a:	460c      	mov	r4, r1
 800c59c:	2001      	movs	r0, #1
 800c59e:	e7a5      	b.n	800c4ec <_svfiprintf_r+0xd4>
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	3401      	adds	r4, #1
 800c5a4:	9305      	str	r3, [sp, #20]
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	f04f 0c0a 	mov.w	ip, #10
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5b2:	3a30      	subs	r2, #48	; 0x30
 800c5b4:	2a09      	cmp	r2, #9
 800c5b6:	d903      	bls.n	800c5c0 <_svfiprintf_r+0x1a8>
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d0c5      	beq.n	800c548 <_svfiprintf_r+0x130>
 800c5bc:	9105      	str	r1, [sp, #20]
 800c5be:	e7c3      	b.n	800c548 <_svfiprintf_r+0x130>
 800c5c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e7f0      	b.n	800c5ac <_svfiprintf_r+0x194>
 800c5ca:	ab03      	add	r3, sp, #12
 800c5cc:	9300      	str	r3, [sp, #0]
 800c5ce:	462a      	mov	r2, r5
 800c5d0:	4b0f      	ldr	r3, [pc, #60]	; (800c610 <_svfiprintf_r+0x1f8>)
 800c5d2:	a904      	add	r1, sp, #16
 800c5d4:	4638      	mov	r0, r7
 800c5d6:	f3af 8000 	nop.w
 800c5da:	1c42      	adds	r2, r0, #1
 800c5dc:	4606      	mov	r6, r0
 800c5de:	d1d6      	bne.n	800c58e <_svfiprintf_r+0x176>
 800c5e0:	89ab      	ldrh	r3, [r5, #12]
 800c5e2:	065b      	lsls	r3, r3, #25
 800c5e4:	f53f af2c 	bmi.w	800c440 <_svfiprintf_r+0x28>
 800c5e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5ea:	b01d      	add	sp, #116	; 0x74
 800c5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f0:	ab03      	add	r3, sp, #12
 800c5f2:	9300      	str	r3, [sp, #0]
 800c5f4:	462a      	mov	r2, r5
 800c5f6:	4b06      	ldr	r3, [pc, #24]	; (800c610 <_svfiprintf_r+0x1f8>)
 800c5f8:	a904      	add	r1, sp, #16
 800c5fa:	4638      	mov	r0, r7
 800c5fc:	f000 f87a 	bl	800c6f4 <_printf_i>
 800c600:	e7eb      	b.n	800c5da <_svfiprintf_r+0x1c2>
 800c602:	bf00      	nop
 800c604:	0800f5c0 	.word	0x0800f5c0
 800c608:	0800f5ca 	.word	0x0800f5ca
 800c60c:	00000000 	.word	0x00000000
 800c610:	0800c361 	.word	0x0800c361
 800c614:	0800f5c6 	.word	0x0800f5c6

0800c618 <_printf_common>:
 800c618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c61c:	4616      	mov	r6, r2
 800c61e:	4699      	mov	r9, r3
 800c620:	688a      	ldr	r2, [r1, #8]
 800c622:	690b      	ldr	r3, [r1, #16]
 800c624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c628:	4293      	cmp	r3, r2
 800c62a:	bfb8      	it	lt
 800c62c:	4613      	movlt	r3, r2
 800c62e:	6033      	str	r3, [r6, #0]
 800c630:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c634:	4607      	mov	r7, r0
 800c636:	460c      	mov	r4, r1
 800c638:	b10a      	cbz	r2, 800c63e <_printf_common+0x26>
 800c63a:	3301      	adds	r3, #1
 800c63c:	6033      	str	r3, [r6, #0]
 800c63e:	6823      	ldr	r3, [r4, #0]
 800c640:	0699      	lsls	r1, r3, #26
 800c642:	bf42      	ittt	mi
 800c644:	6833      	ldrmi	r3, [r6, #0]
 800c646:	3302      	addmi	r3, #2
 800c648:	6033      	strmi	r3, [r6, #0]
 800c64a:	6825      	ldr	r5, [r4, #0]
 800c64c:	f015 0506 	ands.w	r5, r5, #6
 800c650:	d106      	bne.n	800c660 <_printf_common+0x48>
 800c652:	f104 0a19 	add.w	sl, r4, #25
 800c656:	68e3      	ldr	r3, [r4, #12]
 800c658:	6832      	ldr	r2, [r6, #0]
 800c65a:	1a9b      	subs	r3, r3, r2
 800c65c:	42ab      	cmp	r3, r5
 800c65e:	dc26      	bgt.n	800c6ae <_printf_common+0x96>
 800c660:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c664:	1e13      	subs	r3, r2, #0
 800c666:	6822      	ldr	r2, [r4, #0]
 800c668:	bf18      	it	ne
 800c66a:	2301      	movne	r3, #1
 800c66c:	0692      	lsls	r2, r2, #26
 800c66e:	d42b      	bmi.n	800c6c8 <_printf_common+0xb0>
 800c670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c674:	4649      	mov	r1, r9
 800c676:	4638      	mov	r0, r7
 800c678:	47c0      	blx	r8
 800c67a:	3001      	adds	r0, #1
 800c67c:	d01e      	beq.n	800c6bc <_printf_common+0xa4>
 800c67e:	6823      	ldr	r3, [r4, #0]
 800c680:	68e5      	ldr	r5, [r4, #12]
 800c682:	6832      	ldr	r2, [r6, #0]
 800c684:	f003 0306 	and.w	r3, r3, #6
 800c688:	2b04      	cmp	r3, #4
 800c68a:	bf08      	it	eq
 800c68c:	1aad      	subeq	r5, r5, r2
 800c68e:	68a3      	ldr	r3, [r4, #8]
 800c690:	6922      	ldr	r2, [r4, #16]
 800c692:	bf0c      	ite	eq
 800c694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c698:	2500      	movne	r5, #0
 800c69a:	4293      	cmp	r3, r2
 800c69c:	bfc4      	itt	gt
 800c69e:	1a9b      	subgt	r3, r3, r2
 800c6a0:	18ed      	addgt	r5, r5, r3
 800c6a2:	2600      	movs	r6, #0
 800c6a4:	341a      	adds	r4, #26
 800c6a6:	42b5      	cmp	r5, r6
 800c6a8:	d11a      	bne.n	800c6e0 <_printf_common+0xc8>
 800c6aa:	2000      	movs	r0, #0
 800c6ac:	e008      	b.n	800c6c0 <_printf_common+0xa8>
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	4652      	mov	r2, sl
 800c6b2:	4649      	mov	r1, r9
 800c6b4:	4638      	mov	r0, r7
 800c6b6:	47c0      	blx	r8
 800c6b8:	3001      	adds	r0, #1
 800c6ba:	d103      	bne.n	800c6c4 <_printf_common+0xac>
 800c6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6c4:	3501      	adds	r5, #1
 800c6c6:	e7c6      	b.n	800c656 <_printf_common+0x3e>
 800c6c8:	18e1      	adds	r1, r4, r3
 800c6ca:	1c5a      	adds	r2, r3, #1
 800c6cc:	2030      	movs	r0, #48	; 0x30
 800c6ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6d2:	4422      	add	r2, r4
 800c6d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6dc:	3302      	adds	r3, #2
 800c6de:	e7c7      	b.n	800c670 <_printf_common+0x58>
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	4622      	mov	r2, r4
 800c6e4:	4649      	mov	r1, r9
 800c6e6:	4638      	mov	r0, r7
 800c6e8:	47c0      	blx	r8
 800c6ea:	3001      	adds	r0, #1
 800c6ec:	d0e6      	beq.n	800c6bc <_printf_common+0xa4>
 800c6ee:	3601      	adds	r6, #1
 800c6f0:	e7d9      	b.n	800c6a6 <_printf_common+0x8e>
	...

0800c6f4 <_printf_i>:
 800c6f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6f8:	7e0f      	ldrb	r7, [r1, #24]
 800c6fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c6fc:	2f78      	cmp	r7, #120	; 0x78
 800c6fe:	4691      	mov	r9, r2
 800c700:	4680      	mov	r8, r0
 800c702:	460c      	mov	r4, r1
 800c704:	469a      	mov	sl, r3
 800c706:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c70a:	d807      	bhi.n	800c71c <_printf_i+0x28>
 800c70c:	2f62      	cmp	r7, #98	; 0x62
 800c70e:	d80a      	bhi.n	800c726 <_printf_i+0x32>
 800c710:	2f00      	cmp	r7, #0
 800c712:	f000 80d8 	beq.w	800c8c6 <_printf_i+0x1d2>
 800c716:	2f58      	cmp	r7, #88	; 0x58
 800c718:	f000 80a3 	beq.w	800c862 <_printf_i+0x16e>
 800c71c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c724:	e03a      	b.n	800c79c <_printf_i+0xa8>
 800c726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c72a:	2b15      	cmp	r3, #21
 800c72c:	d8f6      	bhi.n	800c71c <_printf_i+0x28>
 800c72e:	a101      	add	r1, pc, #4	; (adr r1, 800c734 <_printf_i+0x40>)
 800c730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c734:	0800c78d 	.word	0x0800c78d
 800c738:	0800c7a1 	.word	0x0800c7a1
 800c73c:	0800c71d 	.word	0x0800c71d
 800c740:	0800c71d 	.word	0x0800c71d
 800c744:	0800c71d 	.word	0x0800c71d
 800c748:	0800c71d 	.word	0x0800c71d
 800c74c:	0800c7a1 	.word	0x0800c7a1
 800c750:	0800c71d 	.word	0x0800c71d
 800c754:	0800c71d 	.word	0x0800c71d
 800c758:	0800c71d 	.word	0x0800c71d
 800c75c:	0800c71d 	.word	0x0800c71d
 800c760:	0800c8ad 	.word	0x0800c8ad
 800c764:	0800c7d1 	.word	0x0800c7d1
 800c768:	0800c88f 	.word	0x0800c88f
 800c76c:	0800c71d 	.word	0x0800c71d
 800c770:	0800c71d 	.word	0x0800c71d
 800c774:	0800c8cf 	.word	0x0800c8cf
 800c778:	0800c71d 	.word	0x0800c71d
 800c77c:	0800c7d1 	.word	0x0800c7d1
 800c780:	0800c71d 	.word	0x0800c71d
 800c784:	0800c71d 	.word	0x0800c71d
 800c788:	0800c897 	.word	0x0800c897
 800c78c:	682b      	ldr	r3, [r5, #0]
 800c78e:	1d1a      	adds	r2, r3, #4
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	602a      	str	r2, [r5, #0]
 800c794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c79c:	2301      	movs	r3, #1
 800c79e:	e0a3      	b.n	800c8e8 <_printf_i+0x1f4>
 800c7a0:	6820      	ldr	r0, [r4, #0]
 800c7a2:	6829      	ldr	r1, [r5, #0]
 800c7a4:	0606      	lsls	r6, r0, #24
 800c7a6:	f101 0304 	add.w	r3, r1, #4
 800c7aa:	d50a      	bpl.n	800c7c2 <_printf_i+0xce>
 800c7ac:	680e      	ldr	r6, [r1, #0]
 800c7ae:	602b      	str	r3, [r5, #0]
 800c7b0:	2e00      	cmp	r6, #0
 800c7b2:	da03      	bge.n	800c7bc <_printf_i+0xc8>
 800c7b4:	232d      	movs	r3, #45	; 0x2d
 800c7b6:	4276      	negs	r6, r6
 800c7b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7bc:	485e      	ldr	r0, [pc, #376]	; (800c938 <_printf_i+0x244>)
 800c7be:	230a      	movs	r3, #10
 800c7c0:	e019      	b.n	800c7f6 <_printf_i+0x102>
 800c7c2:	680e      	ldr	r6, [r1, #0]
 800c7c4:	602b      	str	r3, [r5, #0]
 800c7c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c7ca:	bf18      	it	ne
 800c7cc:	b236      	sxthne	r6, r6
 800c7ce:	e7ef      	b.n	800c7b0 <_printf_i+0xbc>
 800c7d0:	682b      	ldr	r3, [r5, #0]
 800c7d2:	6820      	ldr	r0, [r4, #0]
 800c7d4:	1d19      	adds	r1, r3, #4
 800c7d6:	6029      	str	r1, [r5, #0]
 800c7d8:	0601      	lsls	r1, r0, #24
 800c7da:	d501      	bpl.n	800c7e0 <_printf_i+0xec>
 800c7dc:	681e      	ldr	r6, [r3, #0]
 800c7de:	e002      	b.n	800c7e6 <_printf_i+0xf2>
 800c7e0:	0646      	lsls	r6, r0, #25
 800c7e2:	d5fb      	bpl.n	800c7dc <_printf_i+0xe8>
 800c7e4:	881e      	ldrh	r6, [r3, #0]
 800c7e6:	4854      	ldr	r0, [pc, #336]	; (800c938 <_printf_i+0x244>)
 800c7e8:	2f6f      	cmp	r7, #111	; 0x6f
 800c7ea:	bf0c      	ite	eq
 800c7ec:	2308      	moveq	r3, #8
 800c7ee:	230a      	movne	r3, #10
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7f6:	6865      	ldr	r5, [r4, #4]
 800c7f8:	60a5      	str	r5, [r4, #8]
 800c7fa:	2d00      	cmp	r5, #0
 800c7fc:	bfa2      	ittt	ge
 800c7fe:	6821      	ldrge	r1, [r4, #0]
 800c800:	f021 0104 	bicge.w	r1, r1, #4
 800c804:	6021      	strge	r1, [r4, #0]
 800c806:	b90e      	cbnz	r6, 800c80c <_printf_i+0x118>
 800c808:	2d00      	cmp	r5, #0
 800c80a:	d04d      	beq.n	800c8a8 <_printf_i+0x1b4>
 800c80c:	4615      	mov	r5, r2
 800c80e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c812:	fb03 6711 	mls	r7, r3, r1, r6
 800c816:	5dc7      	ldrb	r7, [r0, r7]
 800c818:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c81c:	4637      	mov	r7, r6
 800c81e:	42bb      	cmp	r3, r7
 800c820:	460e      	mov	r6, r1
 800c822:	d9f4      	bls.n	800c80e <_printf_i+0x11a>
 800c824:	2b08      	cmp	r3, #8
 800c826:	d10b      	bne.n	800c840 <_printf_i+0x14c>
 800c828:	6823      	ldr	r3, [r4, #0]
 800c82a:	07de      	lsls	r6, r3, #31
 800c82c:	d508      	bpl.n	800c840 <_printf_i+0x14c>
 800c82e:	6923      	ldr	r3, [r4, #16]
 800c830:	6861      	ldr	r1, [r4, #4]
 800c832:	4299      	cmp	r1, r3
 800c834:	bfde      	ittt	le
 800c836:	2330      	movle	r3, #48	; 0x30
 800c838:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c83c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c840:	1b52      	subs	r2, r2, r5
 800c842:	6122      	str	r2, [r4, #16]
 800c844:	f8cd a000 	str.w	sl, [sp]
 800c848:	464b      	mov	r3, r9
 800c84a:	aa03      	add	r2, sp, #12
 800c84c:	4621      	mov	r1, r4
 800c84e:	4640      	mov	r0, r8
 800c850:	f7ff fee2 	bl	800c618 <_printf_common>
 800c854:	3001      	adds	r0, #1
 800c856:	d14c      	bne.n	800c8f2 <_printf_i+0x1fe>
 800c858:	f04f 30ff 	mov.w	r0, #4294967295
 800c85c:	b004      	add	sp, #16
 800c85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c862:	4835      	ldr	r0, [pc, #212]	; (800c938 <_printf_i+0x244>)
 800c864:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c868:	6829      	ldr	r1, [r5, #0]
 800c86a:	6823      	ldr	r3, [r4, #0]
 800c86c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c870:	6029      	str	r1, [r5, #0]
 800c872:	061d      	lsls	r5, r3, #24
 800c874:	d514      	bpl.n	800c8a0 <_printf_i+0x1ac>
 800c876:	07df      	lsls	r7, r3, #31
 800c878:	bf44      	itt	mi
 800c87a:	f043 0320 	orrmi.w	r3, r3, #32
 800c87e:	6023      	strmi	r3, [r4, #0]
 800c880:	b91e      	cbnz	r6, 800c88a <_printf_i+0x196>
 800c882:	6823      	ldr	r3, [r4, #0]
 800c884:	f023 0320 	bic.w	r3, r3, #32
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	2310      	movs	r3, #16
 800c88c:	e7b0      	b.n	800c7f0 <_printf_i+0xfc>
 800c88e:	6823      	ldr	r3, [r4, #0]
 800c890:	f043 0320 	orr.w	r3, r3, #32
 800c894:	6023      	str	r3, [r4, #0]
 800c896:	2378      	movs	r3, #120	; 0x78
 800c898:	4828      	ldr	r0, [pc, #160]	; (800c93c <_printf_i+0x248>)
 800c89a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c89e:	e7e3      	b.n	800c868 <_printf_i+0x174>
 800c8a0:	0659      	lsls	r1, r3, #25
 800c8a2:	bf48      	it	mi
 800c8a4:	b2b6      	uxthmi	r6, r6
 800c8a6:	e7e6      	b.n	800c876 <_printf_i+0x182>
 800c8a8:	4615      	mov	r5, r2
 800c8aa:	e7bb      	b.n	800c824 <_printf_i+0x130>
 800c8ac:	682b      	ldr	r3, [r5, #0]
 800c8ae:	6826      	ldr	r6, [r4, #0]
 800c8b0:	6961      	ldr	r1, [r4, #20]
 800c8b2:	1d18      	adds	r0, r3, #4
 800c8b4:	6028      	str	r0, [r5, #0]
 800c8b6:	0635      	lsls	r5, r6, #24
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	d501      	bpl.n	800c8c0 <_printf_i+0x1cc>
 800c8bc:	6019      	str	r1, [r3, #0]
 800c8be:	e002      	b.n	800c8c6 <_printf_i+0x1d2>
 800c8c0:	0670      	lsls	r0, r6, #25
 800c8c2:	d5fb      	bpl.n	800c8bc <_printf_i+0x1c8>
 800c8c4:	8019      	strh	r1, [r3, #0]
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	6123      	str	r3, [r4, #16]
 800c8ca:	4615      	mov	r5, r2
 800c8cc:	e7ba      	b.n	800c844 <_printf_i+0x150>
 800c8ce:	682b      	ldr	r3, [r5, #0]
 800c8d0:	1d1a      	adds	r2, r3, #4
 800c8d2:	602a      	str	r2, [r5, #0]
 800c8d4:	681d      	ldr	r5, [r3, #0]
 800c8d6:	6862      	ldr	r2, [r4, #4]
 800c8d8:	2100      	movs	r1, #0
 800c8da:	4628      	mov	r0, r5
 800c8dc:	f7f3 fc98 	bl	8000210 <memchr>
 800c8e0:	b108      	cbz	r0, 800c8e6 <_printf_i+0x1f2>
 800c8e2:	1b40      	subs	r0, r0, r5
 800c8e4:	6060      	str	r0, [r4, #4]
 800c8e6:	6863      	ldr	r3, [r4, #4]
 800c8e8:	6123      	str	r3, [r4, #16]
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8f0:	e7a8      	b.n	800c844 <_printf_i+0x150>
 800c8f2:	6923      	ldr	r3, [r4, #16]
 800c8f4:	462a      	mov	r2, r5
 800c8f6:	4649      	mov	r1, r9
 800c8f8:	4640      	mov	r0, r8
 800c8fa:	47d0      	blx	sl
 800c8fc:	3001      	adds	r0, #1
 800c8fe:	d0ab      	beq.n	800c858 <_printf_i+0x164>
 800c900:	6823      	ldr	r3, [r4, #0]
 800c902:	079b      	lsls	r3, r3, #30
 800c904:	d413      	bmi.n	800c92e <_printf_i+0x23a>
 800c906:	68e0      	ldr	r0, [r4, #12]
 800c908:	9b03      	ldr	r3, [sp, #12]
 800c90a:	4298      	cmp	r0, r3
 800c90c:	bfb8      	it	lt
 800c90e:	4618      	movlt	r0, r3
 800c910:	e7a4      	b.n	800c85c <_printf_i+0x168>
 800c912:	2301      	movs	r3, #1
 800c914:	4632      	mov	r2, r6
 800c916:	4649      	mov	r1, r9
 800c918:	4640      	mov	r0, r8
 800c91a:	47d0      	blx	sl
 800c91c:	3001      	adds	r0, #1
 800c91e:	d09b      	beq.n	800c858 <_printf_i+0x164>
 800c920:	3501      	adds	r5, #1
 800c922:	68e3      	ldr	r3, [r4, #12]
 800c924:	9903      	ldr	r1, [sp, #12]
 800c926:	1a5b      	subs	r3, r3, r1
 800c928:	42ab      	cmp	r3, r5
 800c92a:	dcf2      	bgt.n	800c912 <_printf_i+0x21e>
 800c92c:	e7eb      	b.n	800c906 <_printf_i+0x212>
 800c92e:	2500      	movs	r5, #0
 800c930:	f104 0619 	add.w	r6, r4, #25
 800c934:	e7f5      	b.n	800c922 <_printf_i+0x22e>
 800c936:	bf00      	nop
 800c938:	0800f5d1 	.word	0x0800f5d1
 800c93c:	0800f5e2 	.word	0x0800f5e2

0800c940 <memmove>:
 800c940:	4288      	cmp	r0, r1
 800c942:	b510      	push	{r4, lr}
 800c944:	eb01 0402 	add.w	r4, r1, r2
 800c948:	d902      	bls.n	800c950 <memmove+0x10>
 800c94a:	4284      	cmp	r4, r0
 800c94c:	4623      	mov	r3, r4
 800c94e:	d807      	bhi.n	800c960 <memmove+0x20>
 800c950:	1e43      	subs	r3, r0, #1
 800c952:	42a1      	cmp	r1, r4
 800c954:	d008      	beq.n	800c968 <memmove+0x28>
 800c956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c95a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c95e:	e7f8      	b.n	800c952 <memmove+0x12>
 800c960:	4402      	add	r2, r0
 800c962:	4601      	mov	r1, r0
 800c964:	428a      	cmp	r2, r1
 800c966:	d100      	bne.n	800c96a <memmove+0x2a>
 800c968:	bd10      	pop	{r4, pc}
 800c96a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c96e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c972:	e7f7      	b.n	800c964 <memmove+0x24>

0800c974 <_free_r>:
 800c974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c976:	2900      	cmp	r1, #0
 800c978:	d044      	beq.n	800ca04 <_free_r+0x90>
 800c97a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c97e:	9001      	str	r0, [sp, #4]
 800c980:	2b00      	cmp	r3, #0
 800c982:	f1a1 0404 	sub.w	r4, r1, #4
 800c986:	bfb8      	it	lt
 800c988:	18e4      	addlt	r4, r4, r3
 800c98a:	f000 f913 	bl	800cbb4 <__malloc_lock>
 800c98e:	4a1e      	ldr	r2, [pc, #120]	; (800ca08 <_free_r+0x94>)
 800c990:	9801      	ldr	r0, [sp, #4]
 800c992:	6813      	ldr	r3, [r2, #0]
 800c994:	b933      	cbnz	r3, 800c9a4 <_free_r+0x30>
 800c996:	6063      	str	r3, [r4, #4]
 800c998:	6014      	str	r4, [r2, #0]
 800c99a:	b003      	add	sp, #12
 800c99c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9a0:	f000 b90e 	b.w	800cbc0 <__malloc_unlock>
 800c9a4:	42a3      	cmp	r3, r4
 800c9a6:	d908      	bls.n	800c9ba <_free_r+0x46>
 800c9a8:	6825      	ldr	r5, [r4, #0]
 800c9aa:	1961      	adds	r1, r4, r5
 800c9ac:	428b      	cmp	r3, r1
 800c9ae:	bf01      	itttt	eq
 800c9b0:	6819      	ldreq	r1, [r3, #0]
 800c9b2:	685b      	ldreq	r3, [r3, #4]
 800c9b4:	1949      	addeq	r1, r1, r5
 800c9b6:	6021      	streq	r1, [r4, #0]
 800c9b8:	e7ed      	b.n	800c996 <_free_r+0x22>
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	b10b      	cbz	r3, 800c9c4 <_free_r+0x50>
 800c9c0:	42a3      	cmp	r3, r4
 800c9c2:	d9fa      	bls.n	800c9ba <_free_r+0x46>
 800c9c4:	6811      	ldr	r1, [r2, #0]
 800c9c6:	1855      	adds	r5, r2, r1
 800c9c8:	42a5      	cmp	r5, r4
 800c9ca:	d10b      	bne.n	800c9e4 <_free_r+0x70>
 800c9cc:	6824      	ldr	r4, [r4, #0]
 800c9ce:	4421      	add	r1, r4
 800c9d0:	1854      	adds	r4, r2, r1
 800c9d2:	42a3      	cmp	r3, r4
 800c9d4:	6011      	str	r1, [r2, #0]
 800c9d6:	d1e0      	bne.n	800c99a <_free_r+0x26>
 800c9d8:	681c      	ldr	r4, [r3, #0]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	6053      	str	r3, [r2, #4]
 800c9de:	4421      	add	r1, r4
 800c9e0:	6011      	str	r1, [r2, #0]
 800c9e2:	e7da      	b.n	800c99a <_free_r+0x26>
 800c9e4:	d902      	bls.n	800c9ec <_free_r+0x78>
 800c9e6:	230c      	movs	r3, #12
 800c9e8:	6003      	str	r3, [r0, #0]
 800c9ea:	e7d6      	b.n	800c99a <_free_r+0x26>
 800c9ec:	6825      	ldr	r5, [r4, #0]
 800c9ee:	1961      	adds	r1, r4, r5
 800c9f0:	428b      	cmp	r3, r1
 800c9f2:	bf04      	itt	eq
 800c9f4:	6819      	ldreq	r1, [r3, #0]
 800c9f6:	685b      	ldreq	r3, [r3, #4]
 800c9f8:	6063      	str	r3, [r4, #4]
 800c9fa:	bf04      	itt	eq
 800c9fc:	1949      	addeq	r1, r1, r5
 800c9fe:	6021      	streq	r1, [r4, #0]
 800ca00:	6054      	str	r4, [r2, #4]
 800ca02:	e7ca      	b.n	800c99a <_free_r+0x26>
 800ca04:	b003      	add	sp, #12
 800ca06:	bd30      	pop	{r4, r5, pc}
 800ca08:	20000ce0 	.word	0x20000ce0

0800ca0c <sbrk_aligned>:
 800ca0c:	b570      	push	{r4, r5, r6, lr}
 800ca0e:	4e0e      	ldr	r6, [pc, #56]	; (800ca48 <sbrk_aligned+0x3c>)
 800ca10:	460c      	mov	r4, r1
 800ca12:	6831      	ldr	r1, [r6, #0]
 800ca14:	4605      	mov	r5, r0
 800ca16:	b911      	cbnz	r1, 800ca1e <sbrk_aligned+0x12>
 800ca18:	f000 f8bc 	bl	800cb94 <_sbrk_r>
 800ca1c:	6030      	str	r0, [r6, #0]
 800ca1e:	4621      	mov	r1, r4
 800ca20:	4628      	mov	r0, r5
 800ca22:	f000 f8b7 	bl	800cb94 <_sbrk_r>
 800ca26:	1c43      	adds	r3, r0, #1
 800ca28:	d00a      	beq.n	800ca40 <sbrk_aligned+0x34>
 800ca2a:	1cc4      	adds	r4, r0, #3
 800ca2c:	f024 0403 	bic.w	r4, r4, #3
 800ca30:	42a0      	cmp	r0, r4
 800ca32:	d007      	beq.n	800ca44 <sbrk_aligned+0x38>
 800ca34:	1a21      	subs	r1, r4, r0
 800ca36:	4628      	mov	r0, r5
 800ca38:	f000 f8ac 	bl	800cb94 <_sbrk_r>
 800ca3c:	3001      	adds	r0, #1
 800ca3e:	d101      	bne.n	800ca44 <sbrk_aligned+0x38>
 800ca40:	f04f 34ff 	mov.w	r4, #4294967295
 800ca44:	4620      	mov	r0, r4
 800ca46:	bd70      	pop	{r4, r5, r6, pc}
 800ca48:	20000ce4 	.word	0x20000ce4

0800ca4c <_malloc_r>:
 800ca4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca50:	1ccd      	adds	r5, r1, #3
 800ca52:	f025 0503 	bic.w	r5, r5, #3
 800ca56:	3508      	adds	r5, #8
 800ca58:	2d0c      	cmp	r5, #12
 800ca5a:	bf38      	it	cc
 800ca5c:	250c      	movcc	r5, #12
 800ca5e:	2d00      	cmp	r5, #0
 800ca60:	4607      	mov	r7, r0
 800ca62:	db01      	blt.n	800ca68 <_malloc_r+0x1c>
 800ca64:	42a9      	cmp	r1, r5
 800ca66:	d905      	bls.n	800ca74 <_malloc_r+0x28>
 800ca68:	230c      	movs	r3, #12
 800ca6a:	603b      	str	r3, [r7, #0]
 800ca6c:	2600      	movs	r6, #0
 800ca6e:	4630      	mov	r0, r6
 800ca70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca74:	4e2e      	ldr	r6, [pc, #184]	; (800cb30 <_malloc_r+0xe4>)
 800ca76:	f000 f89d 	bl	800cbb4 <__malloc_lock>
 800ca7a:	6833      	ldr	r3, [r6, #0]
 800ca7c:	461c      	mov	r4, r3
 800ca7e:	bb34      	cbnz	r4, 800cace <_malloc_r+0x82>
 800ca80:	4629      	mov	r1, r5
 800ca82:	4638      	mov	r0, r7
 800ca84:	f7ff ffc2 	bl	800ca0c <sbrk_aligned>
 800ca88:	1c43      	adds	r3, r0, #1
 800ca8a:	4604      	mov	r4, r0
 800ca8c:	d14d      	bne.n	800cb2a <_malloc_r+0xde>
 800ca8e:	6834      	ldr	r4, [r6, #0]
 800ca90:	4626      	mov	r6, r4
 800ca92:	2e00      	cmp	r6, #0
 800ca94:	d140      	bne.n	800cb18 <_malloc_r+0xcc>
 800ca96:	6823      	ldr	r3, [r4, #0]
 800ca98:	4631      	mov	r1, r6
 800ca9a:	4638      	mov	r0, r7
 800ca9c:	eb04 0803 	add.w	r8, r4, r3
 800caa0:	f000 f878 	bl	800cb94 <_sbrk_r>
 800caa4:	4580      	cmp	r8, r0
 800caa6:	d13a      	bne.n	800cb1e <_malloc_r+0xd2>
 800caa8:	6821      	ldr	r1, [r4, #0]
 800caaa:	3503      	adds	r5, #3
 800caac:	1a6d      	subs	r5, r5, r1
 800caae:	f025 0503 	bic.w	r5, r5, #3
 800cab2:	3508      	adds	r5, #8
 800cab4:	2d0c      	cmp	r5, #12
 800cab6:	bf38      	it	cc
 800cab8:	250c      	movcc	r5, #12
 800caba:	4629      	mov	r1, r5
 800cabc:	4638      	mov	r0, r7
 800cabe:	f7ff ffa5 	bl	800ca0c <sbrk_aligned>
 800cac2:	3001      	adds	r0, #1
 800cac4:	d02b      	beq.n	800cb1e <_malloc_r+0xd2>
 800cac6:	6823      	ldr	r3, [r4, #0]
 800cac8:	442b      	add	r3, r5
 800caca:	6023      	str	r3, [r4, #0]
 800cacc:	e00e      	b.n	800caec <_malloc_r+0xa0>
 800cace:	6822      	ldr	r2, [r4, #0]
 800cad0:	1b52      	subs	r2, r2, r5
 800cad2:	d41e      	bmi.n	800cb12 <_malloc_r+0xc6>
 800cad4:	2a0b      	cmp	r2, #11
 800cad6:	d916      	bls.n	800cb06 <_malloc_r+0xba>
 800cad8:	1961      	adds	r1, r4, r5
 800cada:	42a3      	cmp	r3, r4
 800cadc:	6025      	str	r5, [r4, #0]
 800cade:	bf18      	it	ne
 800cae0:	6059      	strne	r1, [r3, #4]
 800cae2:	6863      	ldr	r3, [r4, #4]
 800cae4:	bf08      	it	eq
 800cae6:	6031      	streq	r1, [r6, #0]
 800cae8:	5162      	str	r2, [r4, r5]
 800caea:	604b      	str	r3, [r1, #4]
 800caec:	4638      	mov	r0, r7
 800caee:	f104 060b 	add.w	r6, r4, #11
 800caf2:	f000 f865 	bl	800cbc0 <__malloc_unlock>
 800caf6:	f026 0607 	bic.w	r6, r6, #7
 800cafa:	1d23      	adds	r3, r4, #4
 800cafc:	1af2      	subs	r2, r6, r3
 800cafe:	d0b6      	beq.n	800ca6e <_malloc_r+0x22>
 800cb00:	1b9b      	subs	r3, r3, r6
 800cb02:	50a3      	str	r3, [r4, r2]
 800cb04:	e7b3      	b.n	800ca6e <_malloc_r+0x22>
 800cb06:	6862      	ldr	r2, [r4, #4]
 800cb08:	42a3      	cmp	r3, r4
 800cb0a:	bf0c      	ite	eq
 800cb0c:	6032      	streq	r2, [r6, #0]
 800cb0e:	605a      	strne	r2, [r3, #4]
 800cb10:	e7ec      	b.n	800caec <_malloc_r+0xa0>
 800cb12:	4623      	mov	r3, r4
 800cb14:	6864      	ldr	r4, [r4, #4]
 800cb16:	e7b2      	b.n	800ca7e <_malloc_r+0x32>
 800cb18:	4634      	mov	r4, r6
 800cb1a:	6876      	ldr	r6, [r6, #4]
 800cb1c:	e7b9      	b.n	800ca92 <_malloc_r+0x46>
 800cb1e:	230c      	movs	r3, #12
 800cb20:	603b      	str	r3, [r7, #0]
 800cb22:	4638      	mov	r0, r7
 800cb24:	f000 f84c 	bl	800cbc0 <__malloc_unlock>
 800cb28:	e7a1      	b.n	800ca6e <_malloc_r+0x22>
 800cb2a:	6025      	str	r5, [r4, #0]
 800cb2c:	e7de      	b.n	800caec <_malloc_r+0xa0>
 800cb2e:	bf00      	nop
 800cb30:	20000ce0 	.word	0x20000ce0

0800cb34 <_realloc_r>:
 800cb34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb38:	4680      	mov	r8, r0
 800cb3a:	4614      	mov	r4, r2
 800cb3c:	460e      	mov	r6, r1
 800cb3e:	b921      	cbnz	r1, 800cb4a <_realloc_r+0x16>
 800cb40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb44:	4611      	mov	r1, r2
 800cb46:	f7ff bf81 	b.w	800ca4c <_malloc_r>
 800cb4a:	b92a      	cbnz	r2, 800cb58 <_realloc_r+0x24>
 800cb4c:	f7ff ff12 	bl	800c974 <_free_r>
 800cb50:	4625      	mov	r5, r4
 800cb52:	4628      	mov	r0, r5
 800cb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb58:	f000 f838 	bl	800cbcc <_malloc_usable_size_r>
 800cb5c:	4284      	cmp	r4, r0
 800cb5e:	4607      	mov	r7, r0
 800cb60:	d802      	bhi.n	800cb68 <_realloc_r+0x34>
 800cb62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb66:	d812      	bhi.n	800cb8e <_realloc_r+0x5a>
 800cb68:	4621      	mov	r1, r4
 800cb6a:	4640      	mov	r0, r8
 800cb6c:	f7ff ff6e 	bl	800ca4c <_malloc_r>
 800cb70:	4605      	mov	r5, r0
 800cb72:	2800      	cmp	r0, #0
 800cb74:	d0ed      	beq.n	800cb52 <_realloc_r+0x1e>
 800cb76:	42bc      	cmp	r4, r7
 800cb78:	4622      	mov	r2, r4
 800cb7a:	4631      	mov	r1, r6
 800cb7c:	bf28      	it	cs
 800cb7e:	463a      	movcs	r2, r7
 800cb80:	f7ff fbb8 	bl	800c2f4 <memcpy>
 800cb84:	4631      	mov	r1, r6
 800cb86:	4640      	mov	r0, r8
 800cb88:	f7ff fef4 	bl	800c974 <_free_r>
 800cb8c:	e7e1      	b.n	800cb52 <_realloc_r+0x1e>
 800cb8e:	4635      	mov	r5, r6
 800cb90:	e7df      	b.n	800cb52 <_realloc_r+0x1e>
	...

0800cb94 <_sbrk_r>:
 800cb94:	b538      	push	{r3, r4, r5, lr}
 800cb96:	4d06      	ldr	r5, [pc, #24]	; (800cbb0 <_sbrk_r+0x1c>)
 800cb98:	2300      	movs	r3, #0
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	4608      	mov	r0, r1
 800cb9e:	602b      	str	r3, [r5, #0]
 800cba0:	f7f6 ffa2 	bl	8003ae8 <_sbrk>
 800cba4:	1c43      	adds	r3, r0, #1
 800cba6:	d102      	bne.n	800cbae <_sbrk_r+0x1a>
 800cba8:	682b      	ldr	r3, [r5, #0]
 800cbaa:	b103      	cbz	r3, 800cbae <_sbrk_r+0x1a>
 800cbac:	6023      	str	r3, [r4, #0]
 800cbae:	bd38      	pop	{r3, r4, r5, pc}
 800cbb0:	20000ce8 	.word	0x20000ce8

0800cbb4 <__malloc_lock>:
 800cbb4:	4801      	ldr	r0, [pc, #4]	; (800cbbc <__malloc_lock+0x8>)
 800cbb6:	f000 b811 	b.w	800cbdc <__retarget_lock_acquire_recursive>
 800cbba:	bf00      	nop
 800cbbc:	20000cec 	.word	0x20000cec

0800cbc0 <__malloc_unlock>:
 800cbc0:	4801      	ldr	r0, [pc, #4]	; (800cbc8 <__malloc_unlock+0x8>)
 800cbc2:	f000 b80c 	b.w	800cbde <__retarget_lock_release_recursive>
 800cbc6:	bf00      	nop
 800cbc8:	20000cec 	.word	0x20000cec

0800cbcc <_malloc_usable_size_r>:
 800cbcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbd0:	1f18      	subs	r0, r3, #4
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	bfbc      	itt	lt
 800cbd6:	580b      	ldrlt	r3, [r1, r0]
 800cbd8:	18c0      	addlt	r0, r0, r3
 800cbda:	4770      	bx	lr

0800cbdc <__retarget_lock_acquire_recursive>:
 800cbdc:	4770      	bx	lr

0800cbde <__retarget_lock_release_recursive>:
 800cbde:	4770      	bx	lr

0800cbe0 <_init>:
 800cbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe2:	bf00      	nop
 800cbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbe6:	bc08      	pop	{r3}
 800cbe8:	469e      	mov	lr, r3
 800cbea:	4770      	bx	lr

0800cbec <_fini>:
 800cbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbee:	bf00      	nop
 800cbf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbf2:	bc08      	pop	{r3}
 800cbf4:	469e      	mov	lr, r3
 800cbf6:	4770      	bx	lr
