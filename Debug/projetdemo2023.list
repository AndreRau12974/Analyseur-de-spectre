
projetdemo2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b000  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00041c04  0800b1d0  0800b1d0  0001b1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804cdd4  0804cdd4  000600ac  2**0
                  CONTENTS
  4 .ARM          00000008  0804cdd4  0804cdd4  0005cdd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804cddc  0804cddc  000600ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804cddc  0804cddc  0005cddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804cde0  0804cde0  0005cde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0804cde4  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000988  200000ac  0804ce90  000600ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a34  0804ce90  00060a34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000600ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ad84  00000000  00000000  000600dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b6a  00000000  00000000  0008ae60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021a8  00000000  00000000  000909d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f00  00000000  00000000  00092b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e791  00000000  00000000  00094a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ca96  00000000  00000000  000c3209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e7b3  00000000  00000000  000efc9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001fe452  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fec  00000000  00000000  001fe4a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b1b8 	.word	0x0800b1b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b0 	.word	0x200000b0
 800020c:	0800b1b8 	.word	0x0800b1b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ba:	463b      	mov	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <MX_ADC1_Init+0x98>)
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <MX_ADC1_Init+0x9c>)
 80005ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_ADC1_Init+0x98>)
 80005ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_ADC1_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_ADC1_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_ADC1_Init+0x98>)
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_ADC1_Init+0xa0>)
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_ADC1_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_ADC1_Init+0x98>)
 8000602:	2201      	movs	r2, #1
 8000604:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_ADC1_Init+0x98>)
 8000610:	2201      	movs	r2, #1
 8000612:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_ADC1_Init+0x98>)
 8000616:	f004 f94f 	bl	80048b8 <HAL_ADC_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000620:	f001 fc90 	bl	8001f44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000624:	2300      	movs	r3, #0
 8000626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000628:	2301      	movs	r3, #1
 800062a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_ADC1_Init+0x98>)
 8000636:	f004 fae9 	bl	8004c0c <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000640:	f001 fc80 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000c8 	.word	0x200000c8
 8000650:	40012000 	.word	0x40012000
 8000654:	0f000001 	.word	0x0f000001

08000658 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800066a:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_ADC3_Init+0x98>)
 800066c:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <MX_ADC3_Init+0x9c>)
 800066e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_ADC3_Init+0x98>)
 8000672:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000676:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <MX_ADC3_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_ADC3_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_ADC3_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_ADC3_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_ADC3_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_ADC3_Init+0x98>)
 800069a:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <MX_ADC3_Init+0xa0>)
 800069c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_ADC3_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_ADC3_Init+0x98>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_ADC3_Init+0x98>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_ADC3_Init+0x98>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006b8:	480d      	ldr	r0, [pc, #52]	; (80006f0 <MX_ADC3_Init+0x98>)
 80006ba:	f004 f8fd 	bl	80048b8 <HAL_ADC_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006c4:	f001 fc3e 	bl	8001f44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006c8:	2306      	movs	r3, #6
 80006ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006d4:	463b      	mov	r3, r7
 80006d6:	4619      	mov	r1, r3
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_ADC3_Init+0x98>)
 80006da:	f004 fa97 	bl	8004c0c <HAL_ADC_ConfigChannel>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80006e4:	f001 fc2e 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000110 	.word	0x20000110
 80006f4:	40012200 	.word	0x40012200
 80006f8:	0f000001 	.word	0x0f000001

080006fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a2a      	ldr	r2, [pc, #168]	; (80007c4 <HAL_ADC_MspInit+0xc8>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d124      	bne.n	8000768 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800071e:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000722:	4a29      	ldr	r2, [pc, #164]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 8000724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000728:	6453      	str	r3, [r2, #68]	; 0x44
 800072a:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a23      	ldr	r2, [pc, #140]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800074e:	2301      	movs	r3, #1
 8000750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000752:	2303      	movs	r3, #3
 8000754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4619      	mov	r1, r3
 8000760:	481a      	ldr	r0, [pc, #104]	; (80007cc <HAL_ADC_MspInit+0xd0>)
 8000762:	f005 fbbf 	bl	8005ee4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000766:	e029      	b.n	80007bc <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a18      	ldr	r2, [pc, #96]	; (80007d0 <HAL_ADC_MspInit+0xd4>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d124      	bne.n	80007bc <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 8000778:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800077c:	6453      	str	r3, [r2, #68]	; 0x44
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 8000790:	f043 0320 	orr.w	r3, r3, #32
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <HAL_ADC_MspInit+0xcc>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0320 	and.w	r3, r3, #32
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 80007a2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a8:	2303      	movs	r3, #3
 80007aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4619      	mov	r1, r3
 80007b6:	4807      	ldr	r0, [pc, #28]	; (80007d4 <HAL_ADC_MspInit+0xd8>)
 80007b8:	f005 fb94 	bl	8005ee4 <HAL_GPIO_Init>
}
 80007bc:	bf00      	nop
 80007be:	3730      	adds	r7, #48	; 0x30
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40012000 	.word	0x40012000
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020000 	.word	0x40020000
 80007d0:	40012200 	.word	0x40012200
 80007d4:	40021400 	.word	0x40021400

080007d8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007de:	463b      	mov	r3, r7
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_DAC_Init+0x4c>)
 80007e8:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <MX_DAC_Init+0x50>)
 80007ea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <MX_DAC_Init+0x4c>)
 80007ee:	f004 fd3f 	bl	8005270 <HAL_DAC_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007f8:	f001 fba4 	bl	8001f44 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	; (8000824 <MX_DAC_Init+0x4c>)
 800080c:	f004 fdb6 	bl	800537c <HAL_DAC_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000816:	f001 fb95 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000158 	.word	0x20000158
 8000828:	40007400 	.word	0x40007400

0800082c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a19      	ldr	r2, [pc, #100]	; (80008b0 <HAL_DAC_MspInit+0x84>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d12b      	bne.n	80008a6 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <HAL_DAC_MspInit+0x88>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <HAL_DAC_MspInit+0x88>)
 8000854:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <HAL_DAC_MspInit+0x88>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <HAL_DAC_MspInit+0x88>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <HAL_DAC_MspInit+0x88>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_DAC_MspInit+0x88>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800087e:	2310      	movs	r3, #16
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000882:	2303      	movs	r3, #3
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	4809      	ldr	r0, [pc, #36]	; (80008b8 <HAL_DAC_MspInit+0x8c>)
 8000892:	f005 fb27 	bl	8005ee4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	210f      	movs	r1, #15
 800089a:	2036      	movs	r0, #54	; 0x36
 800089c:	f004 fcbe 	bl	800521c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008a0:	2036      	movs	r0, #54	; 0x36
 80008a2:	f004 fcd7 	bl	8005254 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80008a6:	bf00      	nop
 80008a8:	3728      	adds	r7, #40	; 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40007400 	.word	0x40007400
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020000 	.word	0x40020000

080008bc <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008c2:	4a16      	ldr	r2, [pc, #88]	; (800091c <MX_DMA2D_Init+0x60>)
 80008c4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008f2:	f004 ff5b 	bl	80057ac <HAL_DMA2D_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008fc:	f001 fb22 	bl	8001f44 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000900:	2101      	movs	r1, #1
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_DMA2D_Init+0x5c>)
 8000904:	f005 f9c0 	bl	8005c88 <HAL_DMA2D_ConfigLayer>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800090e:	f001 fb19 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000016c 	.word	0x2000016c
 800091c:	4002b000 	.word	0x4002b000

08000920 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <HAL_DMA2D_MspInit+0x44>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d113      	bne.n	800095a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_DMA2D_MspInit+0x48>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <HAL_DMA2D_MspInit+0x48>)
 8000938:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <HAL_DMA2D_MspInit+0x48>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	205a      	movs	r0, #90	; 0x5a
 8000950:	f004 fc64 	bl	800521c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000954:	205a      	movs	r0, #90	; 0x5a
 8000956:	f004 fc7d 	bl	8005254 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	4002b000 	.word	0x4002b000
 8000968:	40023800 	.word	0x40023800

0800096c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
 8000980:	615a      	str	r2, [r3, #20]
 8000982:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000984:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <MX_FMC_Init+0x98>)
 8000986:	4a20      	ldr	r2, [pc, #128]	; (8000a08 <MX_FMC_Init+0x9c>)
 8000988:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <MX_FMC_Init+0x98>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_FMC_Init+0x98>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000996:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MX_FMC_Init+0x98>)
 8000998:	2204      	movs	r2, #4
 800099a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800099c:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MX_FMC_Init+0x98>)
 800099e:	2210      	movs	r2, #16
 80009a0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_FMC_Init+0x98>)
 80009a4:	2240      	movs	r2, #64	; 0x40
 80009a6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_FMC_Init+0x98>)
 80009aa:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80009ae:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_FMC_Init+0x98>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_FMC_Init+0x98>)
 80009b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009bc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_FMC_Init+0x98>)
 80009c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_FMC_Init+0x98>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009d0:	2307      	movs	r3, #7
 80009d2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009d4:	2304      	movs	r3, #4
 80009d6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80009d8:	2307      	movs	r3, #7
 80009da:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80009dc:	2303      	movs	r3, #3
 80009de:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_FMC_Init+0x98>)
 80009ee:	f008 fbeb 	bl	80091c8 <HAL_SDRAM_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80009f8:	f001 faa4 	bl	8001f44 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009fc:	bf00      	nop
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200001ac 	.word	0x200001ac
 8000a08:	a0000140 	.word	0xa0000140

08000a0c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a20:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <HAL_FMC_MspInit+0x100>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d16d      	bne.n	8000b04 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000a28:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <HAL_FMC_MspInit+0x100>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a2e:	4b38      	ldr	r3, [pc, #224]	; (8000b10 <HAL_FMC_MspInit+0x104>)
 8000a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a32:	4a37      	ldr	r2, [pc, #220]	; (8000b10 <HAL_FMC_MspInit+0x104>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6393      	str	r3, [r2, #56]	; 0x38
 8000a3a:	4b35      	ldr	r3, [pc, #212]	; (8000b10 <HAL_FMC_MspInit+0x104>)
 8000a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000a46:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a4a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	482c      	ldr	r0, [pc, #176]	; (8000b14 <HAL_FMC_MspInit+0x108>)
 8000a62:	f005 fa3f 	bl	8005ee4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000a66:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a6a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a78:	230c      	movs	r3, #12
 8000a7a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4825      	ldr	r0, [pc, #148]	; (8000b18 <HAL_FMC_MspInit+0x10c>)
 8000a82:	f005 fa2f 	bl	8005ee4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a86:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a8a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481e      	ldr	r0, [pc, #120]	; (8000b1c <HAL_FMC_MspInit+0x110>)
 8000aa2:	f005 fa1f 	bl	8005ee4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000aa6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000aaa:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ab8:	230c      	movs	r3, #12
 8000aba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4817      	ldr	r0, [pc, #92]	; (8000b20 <HAL_FMC_MspInit+0x114>)
 8000ac2:	f005 fa0f 	bl	8005ee4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000ac6:	2328      	movs	r3, #40	; 0x28
 8000ac8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	4619      	mov	r1, r3
 8000ade:	4811      	ldr	r0, [pc, #68]	; (8000b24 <HAL_FMC_MspInit+0x118>)
 8000ae0:	f005 fa00 	bl	8005ee4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000af4:	230c      	movs	r3, #12
 8000af6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	4619      	mov	r1, r3
 8000afc:	480a      	ldr	r0, [pc, #40]	; (8000b28 <HAL_FMC_MspInit+0x11c>)
 8000afe:	f005 f9f1 	bl	8005ee4 <HAL_GPIO_Init>
 8000b02:	e000      	b.n	8000b06 <HAL_FMC_MspInit+0xfa>
    return;
 8000b04:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200001e0 	.word	0x200001e0
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40021800 	.word	0x40021800
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	40021400 	.word	0x40021400
 8000b24:	40021c00 	.word	0x40021c00
 8000b28:	40020800 	.word	0x40020800

08000b2c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b34:	f7ff ff6a 	bl	8000a0c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000b4a:	20c8      	movs	r0, #200	; 0xc8
 8000b4c:	f001 fd0a 	bl	8002564 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000b50:	f000 fa7a 	bl	8001048 <ft5336_I2C_InitializeIfRequired>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b084      	sub	sp, #16
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000b84:	2300      	movs	r3, #0
 8000b86:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000b88:	f000 fa5e 	bl	8001048 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]
 8000b90:	e010      	b.n	8000bb4 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	21a8      	movs	r1, #168	; 0xa8
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 fcc5 	bl	8002528 <TS_IO_Read>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000ba2:	7b7b      	ldrb	r3, [r7, #13]
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b51      	cmp	r3, #81	; 0x51
 8000ba8:	d101      	bne.n	8000bae <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000baa:	2301      	movs	r3, #1
 8000bac:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	73fb      	strb	r3, [r7, #15]
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d802      	bhi.n	8000bc0 <ft5336_ReadID+0x4e>
 8000bba:	7bbb      	ldrb	r3, [r7, #14]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0e8      	beq.n	8000b92 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000bc0:	7b7b      	ldrb	r3, [r7, #13]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	b29b      	uxth	r3, r3
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 fa44 	bl	8001068 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000be0:	88fb      	ldrh	r3, [r7, #6]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f932 	bl	8000e4c <ft5336_TS_DisableIT>
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2102      	movs	r1, #2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f001 fc8f 	bl	8002528 <TS_IO_Read>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b05      	cmp	r3, #5
 8000c20:	d901      	bls.n	8000c26 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <ft5336_TS_DetectTouch+0x50>)
 8000c2c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <ft5336_TS_DetectTouch+0x50>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	b2db      	uxtb	r3, r3
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200001e4 	.word	0x200001e4

08000c44 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000c66:	4b6d      	ldr	r3, [pc, #436]	; (8000e1c <ft5336_TS_GetXY+0x1d8>)
 8000c68:	789a      	ldrb	r2, [r3, #2]
 8000c6a:	4b6c      	ldr	r3, [pc, #432]	; (8000e1c <ft5336_TS_GetXY+0x1d8>)
 8000c6c:	785b      	ldrb	r3, [r3, #1]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	f080 80cf 	bcs.w	8000e12 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000c74:	4b69      	ldr	r3, [pc, #420]	; (8000e1c <ft5336_TS_GetXY+0x1d8>)
 8000c76:	789b      	ldrb	r3, [r3, #2]
 8000c78:	2b09      	cmp	r3, #9
 8000c7a:	d871      	bhi.n	8000d60 <ft5336_TS_GetXY+0x11c>
 8000c7c:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <ft5336_TS_GetXY+0x40>)
 8000c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c82:	bf00      	nop
 8000c84:	08000cad 	.word	0x08000cad
 8000c88:	08000cbf 	.word	0x08000cbf
 8000c8c:	08000cd1 	.word	0x08000cd1
 8000c90:	08000ce3 	.word	0x08000ce3
 8000c94:	08000cf5 	.word	0x08000cf5
 8000c98:	08000d07 	.word	0x08000d07
 8000c9c:	08000d19 	.word	0x08000d19
 8000ca0:	08000d2b 	.word	0x08000d2b
 8000ca4:	08000d3d 	.word	0x08000d3d
 8000ca8:	08000d4f 	.word	0x08000d4f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000cac:	2304      	movs	r3, #4
 8000cae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000cb4:	2306      	movs	r3, #6
 8000cb6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000cb8:	2305      	movs	r3, #5
 8000cba:	753b      	strb	r3, [r7, #20]
      break;
 8000cbc:	e051      	b.n	8000d62 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000cbe:	230a      	movs	r3, #10
 8000cc0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000cc2:	2309      	movs	r3, #9
 8000cc4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000cc6:	230c      	movs	r3, #12
 8000cc8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000cca:	230b      	movs	r3, #11
 8000ccc:	753b      	strb	r3, [r7, #20]
      break;
 8000cce:	e048      	b.n	8000d62 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000cd8:	2312      	movs	r3, #18
 8000cda:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000cdc:	2311      	movs	r3, #17
 8000cde:	753b      	strb	r3, [r7, #20]
      break;
 8000ce0:	e03f      	b.n	8000d62 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000ce2:	2316      	movs	r3, #22
 8000ce4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000ce6:	2315      	movs	r3, #21
 8000ce8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000cea:	2318      	movs	r3, #24
 8000cec:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000cee:	2317      	movs	r3, #23
 8000cf0:	753b      	strb	r3, [r7, #20]
      break;
 8000cf2:	e036      	b.n	8000d62 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000cf4:	231c      	movs	r3, #28
 8000cf6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000cf8:	231b      	movs	r3, #27
 8000cfa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000cfc:	231e      	movs	r3, #30
 8000cfe:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000d00:	231d      	movs	r3, #29
 8000d02:	753b      	strb	r3, [r7, #20]
      break;
 8000d04:	e02d      	b.n	8000d62 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000d06:	2322      	movs	r3, #34	; 0x22
 8000d08:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000d0a:	2321      	movs	r3, #33	; 0x21
 8000d0c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000d0e:	2324      	movs	r3, #36	; 0x24
 8000d10:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000d12:	2323      	movs	r3, #35	; 0x23
 8000d14:	753b      	strb	r3, [r7, #20]
      break;
 8000d16:	e024      	b.n	8000d62 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000d18:	2328      	movs	r3, #40	; 0x28
 8000d1a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000d1c:	2327      	movs	r3, #39	; 0x27
 8000d1e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000d20:	232a      	movs	r3, #42	; 0x2a
 8000d22:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000d24:	2329      	movs	r3, #41	; 0x29
 8000d26:	753b      	strb	r3, [r7, #20]
      break;
 8000d28:	e01b      	b.n	8000d62 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000d2a:	232e      	movs	r3, #46	; 0x2e
 8000d2c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000d2e:	232d      	movs	r3, #45	; 0x2d
 8000d30:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000d32:	2330      	movs	r3, #48	; 0x30
 8000d34:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000d36:	232f      	movs	r3, #47	; 0x2f
 8000d38:	753b      	strb	r3, [r7, #20]
      break;
 8000d3a:	e012      	b.n	8000d62 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000d3c:	2334      	movs	r3, #52	; 0x34
 8000d3e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000d40:	2333      	movs	r3, #51	; 0x33
 8000d42:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000d44:	2336      	movs	r3, #54	; 0x36
 8000d46:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000d48:	2335      	movs	r3, #53	; 0x35
 8000d4a:	753b      	strb	r3, [r7, #20]
      break;
 8000d4c:	e009      	b.n	8000d62 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000d4e:	233a      	movs	r3, #58	; 0x3a
 8000d50:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000d52:	2339      	movs	r3, #57	; 0x39
 8000d54:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000d56:	233c      	movs	r3, #60	; 0x3c
 8000d58:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000d5a:	233b      	movs	r3, #59	; 0x3b
 8000d5c:	753b      	strb	r3, [r7, #20]
      break;
 8000d5e:	e000      	b.n	8000d62 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000d60:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000d62:	89fb      	ldrh	r3, [r7, #14]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	7dfa      	ldrb	r2, [r7, #23]
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 fbdc 	bl	8002528 <TS_IO_Read>
 8000d70:	4603      	mov	r3, r0
 8000d72:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000d74:	7cfb      	ldrb	r3, [r7, #19]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <ft5336_TS_GetXY+0x1dc>)
 8000d7c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000d7e:	89fb      	ldrh	r3, [r7, #14]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	7dba      	ldrb	r2, [r7, #22]
 8000d84:	4611      	mov	r1, r2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f001 fbce 	bl	8002528 <TS_IO_Read>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000d90:	7cfb      	ldrb	r3, [r7, #19]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	021b      	lsls	r3, r3, #8
 8000d96:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000d9a:	b21a      	sxth	r2, r3
 8000d9c:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <ft5336_TS_GetXY+0x1dc>)
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	4313      	orrs	r3, r2
 8000da4:	b21b      	sxth	r3, r3
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <ft5336_TS_GetXY+0x1dc>)
 8000daa:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000dac:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <ft5336_TS_GetXY+0x1dc>)
 8000dae:	881a      	ldrh	r2, [r3, #0]
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000db4:	89fb      	ldrh	r3, [r7, #14]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	7d7a      	ldrb	r2, [r7, #21]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f001 fbb3 	bl	8002528 <TS_IO_Read>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000dc6:	7cfb      	ldrb	r3, [r7, #19]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <ft5336_TS_GetXY+0x1dc>)
 8000dce:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000dd0:	89fb      	ldrh	r3, [r7, #14]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	7d3a      	ldrb	r2, [r7, #20]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 fba5 	bl	8002528 <TS_IO_Read>
 8000dde:	4603      	mov	r3, r0
 8000de0:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000de2:	7cfb      	ldrb	r3, [r7, #19]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <ft5336_TS_GetXY+0x1dc>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	4313      	orrs	r3, r2
 8000df6:	b21b      	sxth	r3, r3
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <ft5336_TS_GetXY+0x1dc>)
 8000dfc:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <ft5336_TS_GetXY+0x1dc>)
 8000e00:	881a      	ldrh	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <ft5336_TS_GetXY+0x1d8>)
 8000e08:	789b      	ldrb	r3, [r3, #2]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <ft5336_TS_GetXY+0x1d8>)
 8000e10:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200001e4 	.word	0x200001e4
 8000e20:	200001e8 	.word	0x200001e8

08000e24 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000e32:	2301      	movs	r3, #1
 8000e34:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	7bfa      	ldrb	r2, [r7, #15]
 8000e3c:	21a4      	movs	r1, #164	; 0xa4
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 fb58 	bl	80024f4 <TS_IO_Write>
}
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	7bfa      	ldrb	r2, [r7, #15]
 8000e64:	21a4      	movs	r1, #164	; 0xa4
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 fb44 	bl	80024f4 <TS_IO_Write>
}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b084      	sub	sp, #16
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	6039      	str	r1, [r7, #0]
 8000eac:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 fb35 	bl	8002528 <TS_IO_Read>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	601a      	str	r2, [r3, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000ef4:	4b4d      	ldr	r3, [pc, #308]	; (800102c <ft5336_TS_GetTouchInfo+0x158>)
 8000ef6:	785b      	ldrb	r3, [r3, #1]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	4293      	cmp	r3, r2
 8000efe:	f080 8090 	bcs.w	8001022 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	2b09      	cmp	r3, #9
 8000f06:	d85d      	bhi.n	8000fc4 <ft5336_TS_GetTouchInfo+0xf0>
 8000f08:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <ft5336_TS_GetTouchInfo+0x3c>)
 8000f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0e:	bf00      	nop
 8000f10:	08000f39 	.word	0x08000f39
 8000f14:	08000f47 	.word	0x08000f47
 8000f18:	08000f55 	.word	0x08000f55
 8000f1c:	08000f63 	.word	0x08000f63
 8000f20:	08000f71 	.word	0x08000f71
 8000f24:	08000f7f 	.word	0x08000f7f
 8000f28:	08000f8d 	.word	0x08000f8d
 8000f2c:	08000f9b 	.word	0x08000f9b
 8000f30:	08000fa9 	.word	0x08000fa9
 8000f34:	08000fb7 	.word	0x08000fb7
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000f40:	2308      	movs	r3, #8
 8000f42:	757b      	strb	r3, [r7, #21]
      break;
 8000f44:	e03f      	b.n	8000fc6 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000f46:	2309      	movs	r3, #9
 8000f48:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000f4a:	230d      	movs	r3, #13
 8000f4c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000f4e:	230e      	movs	r3, #14
 8000f50:	757b      	strb	r3, [r7, #21]
      break;
 8000f52:	e038      	b.n	8000fc6 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000f54:	230f      	movs	r3, #15
 8000f56:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000f58:	2313      	movs	r3, #19
 8000f5a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000f5c:	2314      	movs	r3, #20
 8000f5e:	757b      	strb	r3, [r7, #21]
      break;
 8000f60:	e031      	b.n	8000fc6 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8000f62:	2315      	movs	r3, #21
 8000f64:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000f66:	2319      	movs	r3, #25
 8000f68:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000f6a:	231a      	movs	r3, #26
 8000f6c:	757b      	strb	r3, [r7, #21]
      break;
 8000f6e:	e02a      	b.n	8000fc6 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000f70:	231b      	movs	r3, #27
 8000f72:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000f74:	231f      	movs	r3, #31
 8000f76:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000f78:	2320      	movs	r3, #32
 8000f7a:	757b      	strb	r3, [r7, #21]
      break;
 8000f7c:	e023      	b.n	8000fc6 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000f7e:	2321      	movs	r3, #33	; 0x21
 8000f80:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000f82:	2325      	movs	r3, #37	; 0x25
 8000f84:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000f86:	2326      	movs	r3, #38	; 0x26
 8000f88:	757b      	strb	r3, [r7, #21]
      break;
 8000f8a:	e01c      	b.n	8000fc6 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000f8c:	2327      	movs	r3, #39	; 0x27
 8000f8e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000f90:	232b      	movs	r3, #43	; 0x2b
 8000f92:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000f94:	232c      	movs	r3, #44	; 0x2c
 8000f96:	757b      	strb	r3, [r7, #21]
      break;
 8000f98:	e015      	b.n	8000fc6 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000f9a:	232d      	movs	r3, #45	; 0x2d
 8000f9c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000f9e:	2331      	movs	r3, #49	; 0x31
 8000fa0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000fa2:	2332      	movs	r3, #50	; 0x32
 8000fa4:	757b      	strb	r3, [r7, #21]
      break;
 8000fa6:	e00e      	b.n	8000fc6 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000fa8:	2333      	movs	r3, #51	; 0x33
 8000faa:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000fac:	2337      	movs	r3, #55	; 0x37
 8000fae:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000fb0:	2338      	movs	r3, #56	; 0x38
 8000fb2:	757b      	strb	r3, [r7, #21]
      break;
 8000fb4:	e007      	b.n	8000fc6 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000fb6:	2339      	movs	r3, #57	; 0x39
 8000fb8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000fba:	233d      	movs	r3, #61	; 0x3d
 8000fbc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000fbe:	233e      	movs	r3, #62	; 0x3e
 8000fc0:	757b      	strb	r3, [r7, #21]
      break;
 8000fc2:	e000      	b.n	8000fc6 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000fc4:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000fc6:	89fb      	ldrh	r3, [r7, #14]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	7dfa      	ldrb	r2, [r7, #23]
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 faaa 	bl	8002528 <TS_IO_Read>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000fd8:	7d3b      	ldrb	r3, [r7, #20]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	119b      	asrs	r3, r3, #6
 8000fde:	f003 0203 	and.w	r2, r3, #3
 8000fe2:	6a3b      	ldr	r3, [r7, #32]
 8000fe4:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	7dba      	ldrb	r2, [r7, #22]
 8000fec:	4611      	mov	r1, r2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 fa9a 	bl	8002528 <TS_IO_Read>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000ff8:	7d3b      	ldrb	r3, [r7, #20]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8001002:	89fb      	ldrh	r3, [r7, #14]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	7d7a      	ldrb	r2, [r7, #21]
 8001008:	4611      	mov	r1, r2
 800100a:	4618      	mov	r0, r3
 800100c:	f001 fa8c 	bl	8002528 <TS_IO_Read>
 8001010:	4603      	mov	r3, r0
 8001012:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8001014:	7d3b      	ldrb	r3, [r7, #20]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	111b      	asrs	r3, r3, #4
 800101a:	f003 0204 	and.w	r2, r3, #4
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200001e4 	.word	0x200001e4

08001030 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8001036:	781b      	ldrb	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	200001e4 	.word	0x200001e4

08001048 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800104c:	f7ff fff0 	bl	8001030 <ft5336_Get_I2C_InitializedStatus>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d104      	bne.n	8001060 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8001056:	f001 fa43 	bl	80024e0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800105a:	4b02      	ldr	r3, [pc, #8]	; (8001064 <ft5336_I2C_InitializeIfRequired+0x1c>)
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
  }
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200001e4 	.word	0x200001e4

08001068 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b090      	sub	sp, #64	; 0x40
 8001088:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800109a:	4baf      	ldr	r3, [pc, #700]	; (8001358 <MX_GPIO_Init+0x2d4>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4aae      	ldr	r2, [pc, #696]	; (8001358 <MX_GPIO_Init+0x2d4>)
 80010a0:	f043 0310 	orr.w	r3, r3, #16
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4bac      	ldr	r3, [pc, #688]	; (8001358 <MX_GPIO_Init+0x2d4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0310 	and.w	r3, r3, #16
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80010b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b2:	4ba9      	ldr	r3, [pc, #676]	; (8001358 <MX_GPIO_Init+0x2d4>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4aa8      	ldr	r2, [pc, #672]	; (8001358 <MX_GPIO_Init+0x2d4>)
 80010b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4ba6      	ldr	r3, [pc, #664]	; (8001358 <MX_GPIO_Init+0x2d4>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	4ba3      	ldr	r3, [pc, #652]	; (8001358 <MX_GPIO_Init+0x2d4>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4aa2      	ldr	r2, [pc, #648]	; (8001358 <MX_GPIO_Init+0x2d4>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4ba0      	ldr	r3, [pc, #640]	; (8001358 <MX_GPIO_Init+0x2d4>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	623b      	str	r3, [r7, #32]
 80010e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e2:	4b9d      	ldr	r3, [pc, #628]	; (8001358 <MX_GPIO_Init+0x2d4>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a9c      	ldr	r2, [pc, #624]	; (8001358 <MX_GPIO_Init+0x2d4>)
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b9a      	ldr	r3, [pc, #616]	; (8001358 <MX_GPIO_Init+0x2d4>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	4b97      	ldr	r3, [pc, #604]	; (8001358 <MX_GPIO_Init+0x2d4>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a96      	ldr	r2, [pc, #600]	; (8001358 <MX_GPIO_Init+0x2d4>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b94      	ldr	r3, [pc, #592]	; (8001358 <MX_GPIO_Init+0x2d4>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b91      	ldr	r3, [pc, #580]	; (8001358 <MX_GPIO_Init+0x2d4>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a90      	ldr	r2, [pc, #576]	; (8001358 <MX_GPIO_Init+0x2d4>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b8e      	ldr	r3, [pc, #568]	; (8001358 <MX_GPIO_Init+0x2d4>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800112a:	4b8b      	ldr	r3, [pc, #556]	; (8001358 <MX_GPIO_Init+0x2d4>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a8a      	ldr	r2, [pc, #552]	; (8001358 <MX_GPIO_Init+0x2d4>)
 8001130:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b88      	ldr	r3, [pc, #544]	; (8001358 <MX_GPIO_Init+0x2d4>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001142:	4b85      	ldr	r3, [pc, #532]	; (8001358 <MX_GPIO_Init+0x2d4>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a84      	ldr	r2, [pc, #528]	; (8001358 <MX_GPIO_Init+0x2d4>)
 8001148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b82      	ldr	r3, [pc, #520]	; (8001358 <MX_GPIO_Init+0x2d4>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800115a:	4b7f      	ldr	r3, [pc, #508]	; (8001358 <MX_GPIO_Init+0x2d4>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a7e      	ldr	r2, [pc, #504]	; (8001358 <MX_GPIO_Init+0x2d4>)
 8001160:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b7c      	ldr	r3, [pc, #496]	; (8001358 <MX_GPIO_Init+0x2d4>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001172:	4b79      	ldr	r3, [pc, #484]	; (8001358 <MX_GPIO_Init+0x2d4>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a78      	ldr	r2, [pc, #480]	; (8001358 <MX_GPIO_Init+0x2d4>)
 8001178:	f043 0320 	orr.w	r3, r3, #32
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b76      	ldr	r3, [pc, #472]	; (8001358 <MX_GPIO_Init+0x2d4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0320 	and.w	r3, r3, #32
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118a:	4b73      	ldr	r3, [pc, #460]	; (8001358 <MX_GPIO_Init+0x2d4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a72      	ldr	r2, [pc, #456]	; (8001358 <MX_GPIO_Init+0x2d4>)
 8001190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b70      	ldr	r3, [pc, #448]	; (8001358 <MX_GPIO_Init+0x2d4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2160      	movs	r1, #96	; 0x60
 80011a6:	486d      	ldr	r0, [pc, #436]	; (800135c <MX_GPIO_Init+0x2d8>)
 80011a8:	f005 f96c 	bl	8006484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2120      	movs	r1, #32
 80011b0:	486b      	ldr	r0, [pc, #428]	; (8001360 <MX_GPIO_Init+0x2dc>)
 80011b2:	f005 f967 	bl	8006484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2108      	movs	r1, #8
 80011ba:	4869      	ldr	r0, [pc, #420]	; (8001360 <MX_GPIO_Init+0x2dc>)
 80011bc:	f005 f962 	bl	8006484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2108      	movs	r1, #8
 80011c4:	4867      	ldr	r0, [pc, #412]	; (8001364 <MX_GPIO_Init+0x2e0>)
 80011c6:	f005 f95d 	bl	8006484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d0:	4865      	ldr	r0, [pc, #404]	; (8001368 <MX_GPIO_Init+0x2e4>)
 80011d2:	f005 f957 	bl	8006484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80011d6:	2200      	movs	r2, #0
 80011d8:	f645 6140 	movw	r1, #24128	; 0x5e40
 80011dc:	4863      	ldr	r0, [pc, #396]	; (800136c <MX_GPIO_Init+0x2e8>)
 80011de:	f005 f951 	bl	8006484 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	21c8      	movs	r1, #200	; 0xc8
 80011e6:	4862      	ldr	r0, [pc, #392]	; (8001370 <MX_GPIO_Init+0x2ec>)
 80011e8:	f005 f94c 	bl	8006484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80011ec:	2308      	movs	r3, #8
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f0:	2300      	movs	r3, #0
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011fc:	4619      	mov	r1, r3
 80011fe:	4857      	ldr	r0, [pc, #348]	; (800135c <MX_GPIO_Init+0x2d8>)
 8001200:	f004 fe70 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001204:	2304      	movs	r3, #4
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001214:	2309      	movs	r3, #9
 8001216:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121c:	4619      	mov	r1, r3
 800121e:	484f      	ldr	r0, [pc, #316]	; (800135c <MX_GPIO_Init+0x2d8>)
 8001220:	f004 fe60 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001224:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001236:	230b      	movs	r3, #11
 8001238:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800123a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800123e:	4619      	mov	r1, r3
 8001240:	484b      	ldr	r0, [pc, #300]	; (8001370 <MX_GPIO_Init+0x2ec>)
 8001242:	f004 fe4f 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001246:	f643 0323 	movw	r3, #14371	; 0x3823
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001258:	230a      	movs	r3, #10
 800125a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001260:	4619      	mov	r1, r3
 8001262:	4844      	ldr	r0, [pc, #272]	; (8001374 <MX_GPIO_Init+0x2f0>)
 8001264:	f004 fe3e 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001278:	2308      	movs	r3, #8
 800127a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001280:	4619      	mov	r1, r3
 8001282:	4837      	ldr	r0, [pc, #220]	; (8001360 <MX_GPIO_Init+0x2dc>)
 8001284:	f004 fe2e 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001288:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800129a:	230c      	movs	r3, #12
 800129c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a2:	4619      	mov	r1, r3
 80012a4:	4834      	ldr	r0, [pc, #208]	; (8001378 <MX_GPIO_Init+0x2f4>)
 80012a6:	f004 fe1d 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 80012aa:	f248 1340 	movw	r3, #33088	; 0x8140
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012bc:	4619      	mov	r1, r3
 80012be:	482f      	ldr	r0, [pc, #188]	; (800137c <MX_GPIO_Init+0x2f8>)
 80012c0:	f004 fe10 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 80012c4:	2360      	movs	r3, #96	; 0x60
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d8:	4619      	mov	r1, r3
 80012da:	4820      	ldr	r0, [pc, #128]	; (800135c <MX_GPIO_Init+0x2d8>)
 80012dc:	f004 fe02 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80012e0:	2340      	movs	r3, #64	; 0x40
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012f0:	230a      	movs	r3, #10
 80012f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f8:	4619      	mov	r1, r3
 80012fa:	481e      	ldr	r0, [pc, #120]	; (8001374 <MX_GPIO_Init+0x2f0>)
 80012fc:	f004 fdf2 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001306:	2300      	movs	r3, #0
 8001308:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001312:	4619      	mov	r1, r3
 8001314:	481a      	ldr	r0, [pc, #104]	; (8001380 <MX_GPIO_Init+0x2fc>)
 8001316:	f004 fde5 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800131a:	2340      	movs	r3, #64	; 0x40
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800131e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800132c:	4619      	mov	r1, r3
 800132e:	480c      	ldr	r0, [pc, #48]	; (8001360 <MX_GPIO_Init+0x2dc>)
 8001330:	f004 fdd8 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8001334:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001342:	2303      	movs	r3, #3
 8001344:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001346:	230a      	movs	r3, #10
 8001348:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800134e:	4619      	mov	r1, r3
 8001350:	480a      	ldr	r0, [pc, #40]	; (800137c <MX_GPIO_Init+0x2f8>)
 8001352:	f004 fdc7 	bl	8005ee4 <HAL_GPIO_Init>
 8001356:	e015      	b.n	8001384 <MX_GPIO_Init+0x300>
 8001358:	40023800 	.word	0x40023800
 800135c:	40021000 	.word	0x40021000
 8001360:	40020c00 	.word	0x40020c00
 8001364:	40022800 	.word	0x40022800
 8001368:	40022000 	.word	0x40022000
 800136c:	40021c00 	.word	0x40021c00
 8001370:	40021800 	.word	0x40021800
 8001374:	40020400 	.word	0x40020400
 8001378:	40020800 	.word	0x40020800
 800137c:	40020000 	.word	0x40020000
 8001380:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001384:	23f0      	movs	r3, #240	; 0xf0
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001394:	230a      	movs	r3, #10
 8001396:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001398:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800139c:	4619      	mov	r1, r3
 800139e:	4891      	ldr	r0, [pc, #580]	; (80015e4 <MX_GPIO_Init+0x560>)
 80013a0:	f004 fda0 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80013a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80013b6:	230a      	movs	r3, #10
 80013b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013be:	4619      	mov	r1, r3
 80013c0:	4889      	ldr	r0, [pc, #548]	; (80015e8 <MX_GPIO_Init+0x564>)
 80013c2:	f004 fd8f 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 80013c6:	2328      	movs	r3, #40	; 0x28
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013da:	4619      	mov	r1, r3
 80013dc:	4883      	ldr	r0, [pc, #524]	; (80015ec <MX_GPIO_Init+0x568>)
 80013de:	f004 fd81 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80013e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e8:	2300      	movs	r3, #0
 80013ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f4:	4619      	mov	r1, r3
 80013f6:	487e      	ldr	r0, [pc, #504]	; (80015f0 <MX_GPIO_Init+0x56c>)
 80013f8:	f004 fd74 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80013fc:	2308      	movs	r3, #8
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001410:	4619      	mov	r1, r3
 8001412:	4878      	ldr	r0, [pc, #480]	; (80015f4 <MX_GPIO_Init+0x570>)
 8001414:	f004 fd66 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8001418:	f44f 7301 	mov.w	r3, #516	; 0x204
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141e:	2300      	movs	r3, #0
 8001420:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001426:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800142a:	4619      	mov	r1, r3
 800142c:	486e      	ldr	r0, [pc, #440]	; (80015e8 <MX_GPIO_Init+0x564>)
 800142e:	f004 fd59 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001432:	2310      	movs	r3, #16
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001436:	2300      	movs	r3, #0
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001442:	4619      	mov	r1, r3
 8001444:	4869      	ldr	r0, [pc, #420]	; (80015ec <MX_GPIO_Init+0x568>)
 8001446:	f004 fd4d 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800144a:	2304      	movs	r3, #4
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001456:	2303      	movs	r3, #3
 8001458:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800145a:	230c      	movs	r3, #12
 800145c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001462:	4619      	mov	r1, r3
 8001464:	4861      	ldr	r0, [pc, #388]	; (80015ec <MX_GPIO_Init+0x568>)
 8001466:	f004 fd3d 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 800146a:	f24a 0304 	movw	r3, #40964	; 0xa004
 800146e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001470:	2300      	movs	r3, #0
 8001472:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800147c:	4619      	mov	r1, r3
 800147e:	485e      	ldr	r0, [pc, #376]	; (80015f8 <MX_GPIO_Init+0x574>)
 8001480:	f004 fd30 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800149a:	4619      	mov	r1, r3
 800149c:	4851      	ldr	r0, [pc, #324]	; (80015e4 <MX_GPIO_Init+0x560>)
 800149e:	f004 fd21 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80014a2:	f645 6340 	movw	r3, #24128	; 0x5e40
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b8:	4619      	mov	r1, r3
 80014ba:	484f      	ldr	r0, [pc, #316]	; (80015f8 <MX_GPIO_Init+0x574>)
 80014bc:	f004 fd12 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80014c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014c6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d4:	4619      	mov	r1, r3
 80014d6:	4843      	ldr	r0, [pc, #268]	; (80015e4 <MX_GPIO_Init+0x560>)
 80014d8:	f004 fd04 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80014dc:	2310      	movs	r3, #16
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80014ec:	230a      	movs	r3, #10
 80014ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f4:	4619      	mov	r1, r3
 80014f6:	4840      	ldr	r0, [pc, #256]	; (80015f8 <MX_GPIO_Init+0x574>)
 80014f8:	f004 fcf4 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80014fc:	23c8      	movs	r3, #200	; 0xc8
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001510:	4619      	mov	r1, r3
 8001512:	4835      	ldr	r0, [pc, #212]	; (80015e8 <MX_GPIO_Init+0x564>)
 8001514:	f004 fce6 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001518:	2305      	movs	r3, #5
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001528:	230a      	movs	r3, #10
 800152a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001530:	4619      	mov	r1, r3
 8001532:	482f      	ldr	r0, [pc, #188]	; (80015f0 <MX_GPIO_Init+0x56c>)
 8001534:	f004 fcd6 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001538:	2332      	movs	r3, #50	; 0x32
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001548:	230b      	movs	r3, #11
 800154a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001550:	4619      	mov	r1, r3
 8001552:	4827      	ldr	r0, [pc, #156]	; (80015f0 <MX_GPIO_Init+0x56c>)
 8001554:	f004 fcc6 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001558:	2304      	movs	r3, #4
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001568:	2309      	movs	r3, #9
 800156a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001570:	4619      	mov	r1, r3
 8001572:	4822      	ldr	r0, [pc, #136]	; (80015fc <MX_GPIO_Init+0x578>)
 8001574:	f004 fcb6 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001578:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800158a:	2309      	movs	r3, #9
 800158c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001592:	4619      	mov	r1, r3
 8001594:	4815      	ldr	r0, [pc, #84]	; (80015ec <MX_GPIO_Init+0x568>)
 8001596:	f004 fca5 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800159a:	2386      	movs	r3, #134	; 0x86
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015aa:	230b      	movs	r3, #11
 80015ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b2:	4619      	mov	r1, r3
 80015b4:	4812      	ldr	r0, [pc, #72]	; (8001600 <MX_GPIO_Init+0x57c>)
 80015b6:	f004 fc95 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80015ba:	2328      	movs	r3, #40	; 0x28
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80015ca:	230a      	movs	r3, #10
 80015cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d2:	4619      	mov	r1, r3
 80015d4:	480a      	ldr	r0, [pc, #40]	; (8001600 <MX_GPIO_Init+0x57c>)
 80015d6:	f004 fc85 	bl	8005ee4 <HAL_GPIO_Init>

}
 80015da:	bf00      	nop
 80015dc:	3740      	adds	r7, #64	; 0x40
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40022000 	.word	0x40022000
 80015e8:	40021800 	.word	0x40021800
 80015ec:	40020c00 	.word	0x40020c00
 80015f0:	40020800 	.word	0x40020800
 80015f4:	40022800 	.word	0x40022800
 80015f8:	40021c00 	.word	0x40021c00
 80015fc:	40020400 	.word	0x40020400
 8001600:	40020000 	.word	0x40020000

08001604 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <MX_I2C1_Init+0x74>)
 800160a:	4a1c      	ldr	r2, [pc, #112]	; (800167c <MX_I2C1_Init+0x78>)
 800160c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <MX_I2C1_Init+0x74>)
 8001610:	4a1b      	ldr	r2, [pc, #108]	; (8001680 <MX_I2C1_Init+0x7c>)
 8001612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <MX_I2C1_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_I2C1_Init+0x74>)
 800161c:	2201      	movs	r2, #1
 800161e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <MX_I2C1_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_I2C1_Init+0x74>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <MX_I2C1_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_I2C1_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_I2C1_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <MX_I2C1_Init+0x74>)
 8001640:	f004 ff3a 	bl	80064b8 <HAL_I2C_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800164a:	f000 fc7b 	bl	8001f44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800164e:	2100      	movs	r1, #0
 8001650:	4809      	ldr	r0, [pc, #36]	; (8001678 <MX_I2C1_Init+0x74>)
 8001652:	f005 fcc7 	bl	8006fe4 <HAL_I2CEx_ConfigAnalogFilter>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800165c:	f000 fc72 	bl	8001f44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001660:	2100      	movs	r1, #0
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_I2C1_Init+0x74>)
 8001664:	f005 fd09 	bl	800707a <HAL_I2CEx_ConfigDigitalFilter>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800166e:	f000 fc69 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200001ec 	.word	0x200001ec
 800167c:	40005400 	.word	0x40005400
 8001680:	00c0eaff 	.word	0x00c0eaff

08001684 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <MX_I2C3_Init+0x74>)
 800168a:	4a1c      	ldr	r2, [pc, #112]	; (80016fc <MX_I2C3_Init+0x78>)
 800168c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_I2C3_Init+0x74>)
 8001690:	4a1b      	ldr	r2, [pc, #108]	; (8001700 <MX_I2C3_Init+0x7c>)
 8001692:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <MX_I2C3_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_I2C3_Init+0x74>)
 800169c:	2201      	movs	r2, #1
 800169e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a0:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <MX_I2C3_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_I2C3_Init+0x74>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_I2C3_Init+0x74>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_I2C3_Init+0x74>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_I2C3_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80016be:	480e      	ldr	r0, [pc, #56]	; (80016f8 <MX_I2C3_Init+0x74>)
 80016c0:	f004 fefa 	bl	80064b8 <HAL_I2C_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80016ca:	f000 fc3b 	bl	8001f44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ce:	2100      	movs	r1, #0
 80016d0:	4809      	ldr	r0, [pc, #36]	; (80016f8 <MX_I2C3_Init+0x74>)
 80016d2:	f005 fc87 	bl	8006fe4 <HAL_I2CEx_ConfigAnalogFilter>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80016dc:	f000 fc32 	bl	8001f44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_I2C3_Init+0x74>)
 80016e4:	f005 fcc9 	bl	800707a <HAL_I2CEx_ConfigDigitalFilter>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80016ee:	f000 fc29 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000240 	.word	0x20000240
 80016fc:	40005c00 	.word	0x40005c00
 8001700:	00c0eaff 	.word	0x00c0eaff

08001704 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b0ac      	sub	sp, #176	; 0xb0
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800171c:	f107 0318 	add.w	r3, r7, #24
 8001720:	2284      	movs	r2, #132	; 0x84
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f009 f8d1 	bl	800a8cc <memset>
  if(i2cHandle->Instance==I2C1)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a44      	ldr	r2, [pc, #272]	; (8001840 <HAL_I2C_MspInit+0x13c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d13d      	bne.n	80017b0 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001734:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001738:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800173a:	2300      	movs	r3, #0
 800173c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800173e:	f107 0318 	add.w	r3, r7, #24
 8001742:	4618      	mov	r0, r3
 8001744:	f006 fd7a 	bl	800823c <HAL_RCCEx_PeriphCLKConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800174e:	f000 fbf9 	bl	8001f44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <HAL_I2C_MspInit+0x140>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a3b      	ldr	r2, [pc, #236]	; (8001844 <HAL_I2C_MspInit+0x140>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b39      	ldr	r3, [pc, #228]	; (8001844 <HAL_I2C_MspInit+0x140>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800176a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800176e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001772:	2312      	movs	r3, #18
 8001774:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177e:	2303      	movs	r3, #3
 8001780:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001784:	2304      	movs	r3, #4
 8001786:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800178e:	4619      	mov	r1, r3
 8001790:	482d      	ldr	r0, [pc, #180]	; (8001848 <HAL_I2C_MspInit+0x144>)
 8001792:	f004 fba7 	bl	8005ee4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001796:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <HAL_I2C_MspInit+0x140>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a2a      	ldr	r2, [pc, #168]	; (8001844 <HAL_I2C_MspInit+0x140>)
 800179c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b28      	ldr	r3, [pc, #160]	; (8001844 <HAL_I2C_MspInit+0x140>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80017ae:	e042      	b.n	8001836 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a25      	ldr	r2, [pc, #148]	; (800184c <HAL_I2C_MspInit+0x148>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d13d      	bne.n	8001836 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80017ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017be:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017c6:	f107 0318 	add.w	r3, r7, #24
 80017ca:	4618      	mov	r0, r3
 80017cc:	f006 fd36 	bl	800823c <HAL_RCCEx_PeriphCLKConfig>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80017d6:	f000 fbb5 	bl	8001f44 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <HAL_I2C_MspInit+0x140>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a19      	ldr	r2, [pc, #100]	; (8001844 <HAL_I2C_MspInit+0x140>)
 80017e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_I2C_MspInit+0x140>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80017f2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017fa:	2312      	movs	r3, #18
 80017fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001800:	2301      	movs	r3, #1
 8001802:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800180c:	2304      	movs	r3, #4
 800180e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001812:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001816:	4619      	mov	r1, r3
 8001818:	480d      	ldr	r0, [pc, #52]	; (8001850 <HAL_I2C_MspInit+0x14c>)
 800181a:	f004 fb63 	bl	8005ee4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_I2C_MspInit+0x140>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	4a08      	ldr	r2, [pc, #32]	; (8001844 <HAL_I2C_MspInit+0x140>)
 8001824:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001828:	6413      	str	r3, [r2, #64]	; 0x40
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_I2C_MspInit+0x140>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
}
 8001836:	bf00      	nop
 8001838:	37b0      	adds	r7, #176	; 0xb0
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40005400 	.word	0x40005400
 8001844:	40023800 	.word	0x40023800
 8001848:	40020400 	.word	0x40020400
 800184c:	40005c00 	.word	0x40005c00
 8001850:	40021c00 	.word	0x40021c00

08001854 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a15      	ldr	r2, [pc, #84]	; (80018b8 <HAL_I2C_MspDeInit+0x64>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d110      	bne.n	8001888 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_I2C_MspDeInit+0x68>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a14      	ldr	r2, [pc, #80]	; (80018bc <HAL_I2C_MspDeInit+0x68>)
 800186c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001870:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001872:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001876:	4812      	ldr	r0, [pc, #72]	; (80018c0 <HAL_I2C_MspDeInit+0x6c>)
 8001878:	f004 fce0 	bl	800623c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800187c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001880:	480f      	ldr	r0, [pc, #60]	; (80018c0 <HAL_I2C_MspDeInit+0x6c>)
 8001882:	f004 fcdb 	bl	800623c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8001886:	e013      	b.n	80018b0 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <HAL_I2C_MspDeInit+0x70>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d10e      	bne.n	80018b0 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_I2C_MspDeInit+0x68>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <HAL_I2C_MspDeInit+0x68>)
 8001898:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800189e:	2180      	movs	r1, #128	; 0x80
 80018a0:	4809      	ldr	r0, [pc, #36]	; (80018c8 <HAL_I2C_MspDeInit+0x74>)
 80018a2:	f004 fccb 	bl	800623c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80018a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018aa:	4807      	ldr	r0, [pc, #28]	; (80018c8 <HAL_I2C_MspDeInit+0x74>)
 80018ac:	f004 fcc6 	bl	800623c <HAL_GPIO_DeInit>
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40005400 	.word	0x40005400
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020400 	.word	0x40020400
 80018c4:	40005c00 	.word	0x40005c00
 80018c8:	40021c00 	.word	0x40021c00

080018cc <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08e      	sub	sp, #56	; 0x38
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	2234      	movs	r2, #52	; 0x34
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f008 fff7 	bl	800a8cc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80018de:	4b3a      	ldr	r3, [pc, #232]	; (80019c8 <MX_LTDC_Init+0xfc>)
 80018e0:	4a3a      	ldr	r2, [pc, #232]	; (80019cc <MX_LTDC_Init+0x100>)
 80018e2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80018e4:	4b38      	ldr	r3, [pc, #224]	; (80019c8 <MX_LTDC_Init+0xfc>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80018ea:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <MX_LTDC_Init+0xfc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80018f0:	4b35      	ldr	r3, [pc, #212]	; (80019c8 <MX_LTDC_Init+0xfc>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80018f6:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <MX_LTDC_Init+0xfc>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80018fc:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <MX_LTDC_Init+0xfc>)
 80018fe:	2228      	movs	r2, #40	; 0x28
 8001900:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001902:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <MX_LTDC_Init+0xfc>)
 8001904:	2209      	movs	r2, #9
 8001906:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001908:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <MX_LTDC_Init+0xfc>)
 800190a:	2235      	movs	r2, #53	; 0x35
 800190c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800190e:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <MX_LTDC_Init+0xfc>)
 8001910:	220b      	movs	r2, #11
 8001912:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001914:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <MX_LTDC_Init+0xfc>)
 8001916:	f240 2215 	movw	r2, #533	; 0x215
 800191a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800191c:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <MX_LTDC_Init+0xfc>)
 800191e:	f240 121b 	movw	r2, #283	; 0x11b
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <MX_LTDC_Init+0xfc>)
 8001926:	f240 2235 	movw	r2, #565	; 0x235
 800192a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800192c:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <MX_LTDC_Init+0xfc>)
 800192e:	f240 121d 	movw	r2, #285	; 0x11d
 8001932:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <MX_LTDC_Init+0xfc>)
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800193c:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <MX_LTDC_Init+0xfc>)
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001944:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <MX_LTDC_Init+0xfc>)
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800194c:	481e      	ldr	r0, [pc, #120]	; (80019c8 <MX_LTDC_Init+0xfc>)
 800194e:	f005 fbe1 	bl	8007114 <HAL_LTDC_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001958:	f000 faf4 	bl	8001f44 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001960:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001964:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800196a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800196e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001970:	2302      	movs	r3, #2
 8001972:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001974:	23ff      	movs	r3, #255	; 0xff
 8001976:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800197c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001980:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001982:	2307      	movs	r3, #7
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001986:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800198c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001992:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	2200      	movs	r2, #0
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_LTDC_Init+0xfc>)
 80019b2:	f005 fd41 	bl	8007438 <HAL_LTDC_ConfigLayer>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80019bc:	f000 fac2 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	3738      	adds	r7, #56	; 0x38
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000294 	.word	0x20000294
 80019cc:	40016800 	.word	0x40016800

080019d0 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b0ae      	sub	sp, #184	; 0xb8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e8:	f107 0320 	add.w	r3, r7, #32
 80019ec:	2284      	movs	r2, #132	; 0x84
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f008 ff6b 	bl	800a8cc <memset>
  if(ltdcHandle->Instance==LTDC)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a6f      	ldr	r2, [pc, #444]	; (8001bb8 <HAL_LTDC_MspInit+0x1e8>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	f040 80d6 	bne.w	8001bae <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a02:	2308      	movs	r3, #8
 8001a04:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001a06:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001a0c:	2305      	movs	r3, #5
 8001a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001a10:	2302      	movs	r3, #2
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001a14:	2303      	movs	r3, #3
 8001a16:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001a1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a20:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a22:	f107 0320 	add.w	r3, r7, #32
 8001a26:	4618      	mov	r0, r3
 8001a28:	f006 fc08 	bl	800823c <HAL_RCCEx_PeriphCLKConfig>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8001a32:	f000 fa87 	bl	8001f44 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a36:	4b61      	ldr	r3, [pc, #388]	; (8001bbc <HAL_LTDC_MspInit+0x1ec>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a60      	ldr	r2, [pc, #384]	; (8001bbc <HAL_LTDC_MspInit+0x1ec>)
 8001a3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b5e      	ldr	r3, [pc, #376]	; (8001bbc <HAL_LTDC_MspInit+0x1ec>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a4e:	4b5b      	ldr	r3, [pc, #364]	; (8001bbc <HAL_LTDC_MspInit+0x1ec>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a5a      	ldr	r2, [pc, #360]	; (8001bbc <HAL_LTDC_MspInit+0x1ec>)
 8001a54:	f043 0310 	orr.w	r3, r3, #16
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b58      	ldr	r3, [pc, #352]	; (8001bbc <HAL_LTDC_MspInit+0x1ec>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	61bb      	str	r3, [r7, #24]
 8001a64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a66:	4b55      	ldr	r3, [pc, #340]	; (8001bbc <HAL_LTDC_MspInit+0x1ec>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a54      	ldr	r2, [pc, #336]	; (8001bbc <HAL_LTDC_MspInit+0x1ec>)
 8001a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b52      	ldr	r3, [pc, #328]	; (8001bbc <HAL_LTDC_MspInit+0x1ec>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001a7e:	4b4f      	ldr	r3, [pc, #316]	; (8001bbc <HAL_LTDC_MspInit+0x1ec>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a4e      	ldr	r2, [pc, #312]	; (8001bbc <HAL_LTDC_MspInit+0x1ec>)
 8001a84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b4c      	ldr	r3, [pc, #304]	; (8001bbc <HAL_LTDC_MspInit+0x1ec>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a96:	4b49      	ldr	r3, [pc, #292]	; (8001bbc <HAL_LTDC_MspInit+0x1ec>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a48      	ldr	r2, [pc, #288]	; (8001bbc <HAL_LTDC_MspInit+0x1ec>)
 8001a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b46      	ldr	r3, [pc, #280]	; (8001bbc <HAL_LTDC_MspInit+0x1ec>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001aae:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <HAL_LTDC_MspInit+0x1ec>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a42      	ldr	r2, [pc, #264]	; (8001bbc <HAL_LTDC_MspInit+0x1ec>)
 8001ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b40      	ldr	r3, [pc, #256]	; (8001bbc <HAL_LTDC_MspInit+0x1ec>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001ac6:	2310      	movs	r3, #16
 8001ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ade:	230e      	movs	r3, #14
 8001ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4835      	ldr	r0, [pc, #212]	; (8001bc0 <HAL_LTDC_MspInit+0x1f0>)
 8001aec:	f004 f9fa 	bl	8005ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001af0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001af4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b0a:	230e      	movs	r3, #14
 8001b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001b10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b14:	4619      	mov	r1, r3
 8001b16:	482b      	ldr	r0, [pc, #172]	; (8001bc4 <HAL_LTDC_MspInit+0x1f4>)
 8001b18:	f004 f9e4 	bl	8005ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001b1c:	23f7      	movs	r3, #247	; 0xf7
 8001b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b34:	230e      	movs	r3, #14
 8001b36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001b3a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4821      	ldr	r0, [pc, #132]	; (8001bc8 <HAL_LTDC_MspInit+0x1f8>)
 8001b42:	f004 f9cf 	bl	8005ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b60:	2309      	movs	r3, #9
 8001b62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001b66:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4817      	ldr	r0, [pc, #92]	; (8001bcc <HAL_LTDC_MspInit+0x1fc>)
 8001b6e:	f004 f9b9 	bl	8005ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001b72:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b8c:	230e      	movs	r3, #14
 8001b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b92:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b96:	4619      	mov	r1, r3
 8001b98:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <HAL_LTDC_MspInit+0x200>)
 8001b9a:	f004 f9a3 	bl	8005ee4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	2058      	movs	r0, #88	; 0x58
 8001ba4:	f003 fb3a 	bl	800521c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001ba8:	2058      	movs	r0, #88	; 0x58
 8001baa:	f003 fb53 	bl	8005254 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001bae:	bf00      	nop
 8001bb0:	37b8      	adds	r7, #184	; 0xb8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40016800 	.word	0x40016800
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40022400 	.word	0x40022400
 8001bc8:	40022800 	.word	0x40022800
 8001bcc:	40021800 	.word	0x40021800
 8001bd0:	40022000 	.word	0x40022000

08001bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b099      	sub	sp, #100	; 0x64
 8001bd8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char text[50]={};
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	f107 0318 	add.w	r3, r7, #24
 8001be2:	222e      	movs	r2, #46	; 0x2e
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f008 fe70 	bl	800a8cc <memset>
	static TS_StateTypeDef  TS_State;
	uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c00:	f002 fe09 	bl	8004816 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c04:	f000 f91a 	bl	8001e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c08:	f7ff fa3c 	bl	8001084 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001c0c:	f7fe fd24 	bl	8000658 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8001c10:	f7fe fe54 	bl	80008bc <MX_DMA2D_Init>
  MX_FMC_Init();
 8001c14:	f7fe feaa 	bl	800096c <MX_FMC_Init>
  MX_I2C1_Init();
 8001c18:	f7ff fcf4 	bl	8001604 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001c1c:	f7ff fd32 	bl	8001684 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001c20:	f7ff fe54 	bl	80018cc <MX_LTDC_Init>
  MX_RTC_Init();
 8001c24:	f000 f994 	bl	8001f50 <MX_RTC_Init>
  MX_SPI2_Init();
 8001c28:	f000 fa64 	bl	80020f4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001c2c:	f002 fa06 	bl	800403c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c30:	f002 fa58 	bl	80040e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c34:	f002 faa4 	bl	8004180 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001c38:	f002 faf0 	bl	800421c <MX_TIM5_Init>
  MX_TIM8_Init();
 8001c3c:	f002 fb3c 	bl	80042b8 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001c40:	f002 fc50 	bl	80044e4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001c44:	f002 fc7e 	bl	8004544 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001c48:	f7fe fcb4 	bl	80005b4 <MX_ADC1_Init>
  MX_DAC_Init();
 8001c4c:	f7fe fdc4 	bl	80007d8 <MX_DAC_Init>
  MX_UART7_Init();
 8001c50:	f002 fc18 	bl	8004484 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8001c54:	f000 fc92 	bl	800257c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001c58:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f000 fd25 	bl	80026ac <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8001c62:	f000 fcfb 	bl	800265c <BSP_LCD_GetXSize>
 8001c66:	4604      	mov	r4, r0
 8001c68:	f000 fd0c 	bl	8002684 <BSP_LCD_GetYSize>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	fb04 f303 	mul.w	r3, r4, r3
 8001c72:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f000 fd16 	bl	80026ac <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8001c80:	f001 fa14 	bl	80030ac <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 8001c84:	2000      	movs	r0, #0
 8001c86:	f000 fd71 	bl	800276c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_RED);
 8001c8a:	4860      	ldr	r0, [pc, #384]	; (8001e0c <main+0x238>)
 8001c8c:	f000 fde0 	bl	8002850 <BSP_LCD_Clear>
  BSP_LCD_DrawBitmap(0,0,(uint8_t*)HorombeRGB565_bmp);
 8001c90:	4a5f      	ldr	r2, [pc, #380]	; (8001e10 <main+0x23c>)
 8001c92:	2100      	movs	r1, #0
 8001c94:	2000      	movs	r0, #0
 8001c96:	f001 f8b7 	bl	8002e08 <BSP_LCD_DrawBitmap>
  BSP_LCD_SelectLayer(1);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f000 fd66 	bl	800276c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f000 fdd5 	bl	8002850 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font12);
 8001ca6:	485b      	ldr	r0, [pc, #364]	; (8001e14 <main+0x240>)
 8001ca8:	f000 fda2 	bl	80027f0 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001cac:	485a      	ldr	r0, [pc, #360]	; (8001e18 <main+0x244>)
 8001cae:	f000 fd6d 	bl	800278c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f000 fd82 	bl	80027bc <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001cb8:	f000 fcd0 	bl	800265c <BSP_LCD_GetXSize>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	b29c      	uxth	r4, r3
 8001cc0:	f000 fce0 	bl	8002684 <BSP_LCD_GetYSize>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f001 fe00 	bl	80038d0 <BSP_TS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8001cd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd4:	4851      	ldr	r0, [pc, #324]	; (8001e1c <main+0x248>)
 8001cd6:	f004 fbbd 	bl	8006454 <HAL_GPIO_ReadPin>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ce2:	484f      	ldr	r0, [pc, #316]	; (8001e20 <main+0x24c>)
 8001ce4:	f004 fbce 	bl	8006484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
 8001ce8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cec:	484b      	ldr	r0, [pc, #300]	; (8001e1c <main+0x248>)
 8001cee:	f004 fbb1 	bl	8006454 <HAL_GPIO_ReadPin>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	2120      	movs	r1, #32
 8001cf8:	484a      	ldr	r0, [pc, #296]	; (8001e24 <main+0x250>)
 8001cfa:	f004 fbc3 	bl	8006484 <HAL_GPIO_WritePin>
		sprintf(text,"BP1 : %d",HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8001cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d02:	4846      	ldr	r0, [pc, #280]	; (8001e1c <main+0x248>)
 8001d04:	f004 fba6 	bl	8006454 <HAL_GPIO_ReadPin>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4945      	ldr	r1, [pc, #276]	; (8001e28 <main+0x254>)
 8001d12:	4618      	mov	r0, r3
 8001d14:	f008 fde2 	bl	800a8dc <siprintf>
		BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	2005      	movs	r0, #5
 8001d20:	f000 feca 	bl	8002ab8 <BSP_LCD_DisplayStringAtLine>

		sConfig.Channel = ADC_CHANNEL_6;
 8001d24:	2306      	movs	r3, #6
 8001d26:	607b      	str	r3, [r7, #4]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	483f      	ldr	r0, [pc, #252]	; (8001e2c <main+0x258>)
 8001d2e:	f002 ff6d 	bl	8004c0c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001d32:	483e      	ldr	r0, [pc, #248]	; (8001e2c <main+0x258>)
 8001d34:	f002 fe04 	bl	8004940 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8001d38:	bf00      	nop
 8001d3a:	2164      	movs	r1, #100	; 0x64
 8001d3c:	483b      	ldr	r0, [pc, #236]	; (8001e2c <main+0x258>)
 8001d3e:	f002 fecd 	bl	8004adc <HAL_ADC_PollForConversion>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f8      	bne.n	8001d3a <main+0x166>
		potr = HAL_ADC_GetValue(&hadc3);
 8001d48:	4838      	ldr	r0, [pc, #224]	; (8001e2c <main+0x258>)
 8001d4a:	f002 ff52 	bl	8004bf2 <HAL_ADC_GetValue>
 8001d4e:	6578      	str	r0, [r7, #84]	; 0x54

		sConfig.Channel = ADC_CHANNEL_7;
 8001d50:	2307      	movs	r3, #7
 8001d52:	607b      	str	r3, [r7, #4]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	4619      	mov	r1, r3
 8001d58:	4834      	ldr	r0, [pc, #208]	; (8001e2c <main+0x258>)
 8001d5a:	f002 ff57 	bl	8004c0c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001d5e:	4833      	ldr	r0, [pc, #204]	; (8001e2c <main+0x258>)
 8001d60:	f002 fdee 	bl	8004940 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8001d64:	bf00      	nop
 8001d66:	2164      	movs	r1, #100	; 0x64
 8001d68:	4830      	ldr	r0, [pc, #192]	; (8001e2c <main+0x258>)
 8001d6a:	f002 feb7 	bl	8004adc <HAL_ADC_PollForConversion>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f8      	bne.n	8001d66 <main+0x192>
		potl = HAL_ADC_GetValue(&hadc3);
 8001d74:	482d      	ldr	r0, [pc, #180]	; (8001e2c <main+0x258>)
 8001d76:	f002 ff3c 	bl	8004bf2 <HAL_ADC_GetValue>
 8001d7a:	6538      	str	r0, [r7, #80]	; 0x50

		sConfig.Channel = ADC_CHANNEL_8;
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	607b      	str	r3, [r7, #4]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	4619      	mov	r1, r3
 8001d84:	4829      	ldr	r0, [pc, #164]	; (8001e2c <main+0x258>)
 8001d86:	f002 ff41 	bl	8004c0c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001d8a:	4828      	ldr	r0, [pc, #160]	; (8001e2c <main+0x258>)
 8001d8c:	f002 fdd8 	bl	8004940 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8001d90:	bf00      	nop
 8001d92:	2164      	movs	r1, #100	; 0x64
 8001d94:	4825      	ldr	r0, [pc, #148]	; (8001e2c <main+0x258>)
 8001d96:	f002 fea1 	bl	8004adc <HAL_ADC_PollForConversion>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f8      	bne.n	8001d92 <main+0x1be>
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8001da0:	4822      	ldr	r0, [pc, #136]	; (8001e2c <main+0x258>)
 8001da2:	f002 ff26 	bl	8004bf2 <HAL_ADC_GetValue>
 8001da6:	64f8      	str	r0, [r7, #76]	; 0x4c

		HAL_ADC_Start(&hadc1);
 8001da8:	4821      	ldr	r0, [pc, #132]	; (8001e30 <main+0x25c>)
 8001daa:	f002 fdc9 	bl	8004940 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8001dae:	bf00      	nop
 8001db0:	2164      	movs	r1, #100	; 0x64
 8001db2:	481f      	ldr	r0, [pc, #124]	; (8001e30 <main+0x25c>)
 8001db4:	f002 fe92 	bl	8004adc <HAL_ADC_PollForConversion>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f8      	bne.n	8001db0 <main+0x1dc>
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8001dbe:	481c      	ldr	r0, [pc, #112]	; (8001e30 <main+0x25c>)
 8001dc0:	f002 ff17 	bl	8004bf2 <HAL_ADC_GetValue>
 8001dc4:	64b8      	str	r0, [r7, #72]	; 0x48

		sprintf(text,"POTL : %4u POTR : %4u joy_v : %4u joy_h : %4u",(uint)potl,(uint)potr,(uint)joystick_v,(uint)joystick_h);
 8001dc6:	f107 0014 	add.w	r0, r7, #20
 8001dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001dd6:	4917      	ldr	r1, [pc, #92]	; (8001e34 <main+0x260>)
 8001dd8:	f008 fd80 	bl	800a8dc <siprintf>
		BSP_LCD_DisplayStringAtLine(9,(uint8_t*) text);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	2009      	movs	r0, #9
 8001de4:	f000 fe68 	bl	8002ab8 <BSP_LCD_DisplayStringAtLine>

		BSP_TS_GetState(&TS_State);
 8001de8:	4813      	ldr	r0, [pc, #76]	; (8001e38 <main+0x264>)
 8001dea:	f001 fdb1 	bl	8003950 <BSP_TS_GetState>
		if(TS_State.touchDetected){
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <main+0x264>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f43f af6c 	beq.w	8001cd0 <main+0xfc>
		  BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],4);
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <main+0x264>)
 8001dfa:	885b      	ldrh	r3, [r3, #2]
 8001dfc:	4a0e      	ldr	r2, [pc, #56]	; (8001e38 <main+0x264>)
 8001dfe:	8991      	ldrh	r1, [r2, #12]
 8001e00:	2204      	movs	r2, #4
 8001e02:	4618      	mov	r0, r3
 8001e04:	f001 f8b2 	bl	8002f6c <BSP_LCD_FillCircle>
	  	HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8001e08:	e762      	b.n	8001cd0 <main+0xfc>
 8001e0a:	bf00      	nop
 8001e0c:	ffff0000 	.word	0xffff0000
 8001e10:	0800b20c 	.word	0x0800b20c
 8001e14:	20000030 	.word	0x20000030
 8001e18:	ff0000ff 	.word	0xff0000ff
 8001e1c:	40020000 	.word	0x40020000
 8001e20:	40021c00 	.word	0x40021c00
 8001e24:	40021000 	.word	0x40021000
 8001e28:	0800b1d0 	.word	0x0800b1d0
 8001e2c:	20000110 	.word	0x20000110
 8001e30:	200000c8 	.word	0x200000c8
 8001e34:	0800b1dc 	.word	0x0800b1dc
 8001e38:	2000033c 	.word	0x2000033c

08001e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b094      	sub	sp, #80	; 0x50
 8001e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e42:	f107 0320 	add.w	r3, r7, #32
 8001e46:	2230      	movs	r2, #48	; 0x30
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f008 fd3e 	bl	800a8cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e60:	f005 fcd0 	bl	8007804 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e64:	4b2c      	ldr	r3, [pc, #176]	; (8001f18 <SystemClock_Config+0xdc>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	4a2b      	ldr	r2, [pc, #172]	; (8001f18 <SystemClock_Config+0xdc>)
 8001e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e70:	4b29      	ldr	r3, [pc, #164]	; (8001f18 <SystemClock_Config+0xdc>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <SystemClock_Config+0xe0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a26      	ldr	r2, [pc, #152]	; (8001f1c <SystemClock_Config+0xe0>)
 8001e82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <SystemClock_Config+0xe0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001e94:	2309      	movs	r3, #9
 8001e96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ea6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001eac:	2319      	movs	r3, #25
 8001eae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001eb0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001eb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001eba:	2309      	movs	r3, #9
 8001ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ebe:	f107 0320 	add.w	r3, r7, #32
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f005 fcfe 	bl	80078c4 <HAL_RCC_OscConfig>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001ece:	f000 f839 	bl	8001f44 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ed2:	f005 fca7 	bl	8007824 <HAL_PWREx_EnableOverDrive>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001edc:	f000 f832 	bl	8001f44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ee0:	230f      	movs	r3, #15
 8001ee2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001eec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ef0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	2106      	movs	r1, #6
 8001efe:	4618      	mov	r0, r3
 8001f00:	f005 ff84 	bl	8007e0c <HAL_RCC_ClockConfig>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001f0a:	f000 f81b 	bl	8001f44 <Error_Handler>
  }
}
 8001f0e:	bf00      	nop
 8001f10:	3750      	adds	r7, #80	; 0x50
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40007000 	.word	0x40007000

08001f20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d101      	bne.n	8001f36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f32:	f002 fc7d 	bl	8004830 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40001000 	.word	0x40001000

08001f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f48:	b672      	cpsid	i
}
 8001f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <Error_Handler+0x8>
	...

08001f50 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b090      	sub	sp, #64	; 0x40
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f66:	2300      	movs	r3, #0
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	2228      	movs	r2, #40	; 0x28
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f008 fcab 	bl	800a8cc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f76:	4b46      	ldr	r3, [pc, #280]	; (8002090 <MX_RTC_Init+0x140>)
 8001f78:	4a46      	ldr	r2, [pc, #280]	; (8002094 <MX_RTC_Init+0x144>)
 8001f7a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f7c:	4b44      	ldr	r3, [pc, #272]	; (8002090 <MX_RTC_Init+0x140>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f82:	4b43      	ldr	r3, [pc, #268]	; (8002090 <MX_RTC_Init+0x140>)
 8001f84:	227f      	movs	r2, #127	; 0x7f
 8001f86:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001f88:	4b41      	ldr	r3, [pc, #260]	; (8002090 <MX_RTC_Init+0x140>)
 8001f8a:	22ff      	movs	r2, #255	; 0xff
 8001f8c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f8e:	4b40      	ldr	r3, [pc, #256]	; (8002090 <MX_RTC_Init+0x140>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f94:	4b3e      	ldr	r3, [pc, #248]	; (8002090 <MX_RTC_Init+0x140>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f9a:	4b3d      	ldr	r3, [pc, #244]	; (8002090 <MX_RTC_Init+0x140>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001fa0:	483b      	ldr	r0, [pc, #236]	; (8002090 <MX_RTC_Init+0x140>)
 8001fa2:	f006 fd3b 	bl	8008a1c <HAL_RTC_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001fac:	f7ff ffca 	bl	8001f44 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	482f      	ldr	r0, [pc, #188]	; (8002090 <MX_RTC_Init+0x140>)
 8001fd4:	f006 fda6 	bl	8008b24 <HAL_RTC_SetTime>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001fde:	f7ff ffb1 	bl	8001f44 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ffe:	2201      	movs	r2, #1
 8002000:	4619      	mov	r1, r3
 8002002:	4823      	ldr	r0, [pc, #140]	; (8002090 <MX_RTC_Init+0x140>)
 8002004:	f006 fe28 	bl	8008c58 <HAL_RTC_SetDate>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800200e:	f7ff ff99 	bl	8001f44 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002012:	2300      	movs	r3, #0
 8002014:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002016:	2300      	movs	r3, #0
 8002018:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800201a:	2300      	movs	r3, #0
 800201c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002036:	2301      	movs	r3, #1
 8002038:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800203c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002042:	463b      	mov	r3, r7
 8002044:	2201      	movs	r2, #1
 8002046:	4619      	mov	r1, r3
 8002048:	4811      	ldr	r0, [pc, #68]	; (8002090 <MX_RTC_Init+0x140>)
 800204a:	f006 fe89 	bl	8008d60 <HAL_RTC_SetAlarm>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002054:	f7ff ff76 	bl	8001f44 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800205e:	463b      	mov	r3, r7
 8002060:	2201      	movs	r2, #1
 8002062:	4619      	mov	r1, r3
 8002064:	480a      	ldr	r0, [pc, #40]	; (8002090 <MX_RTC_Init+0x140>)
 8002066:	f006 fe7b 	bl	8008d60 <HAL_RTC_SetAlarm>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002070:	f7ff ff68 	bl	8001f44 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002074:	2202      	movs	r2, #2
 8002076:	2100      	movs	r1, #0
 8002078:	4805      	ldr	r0, [pc, #20]	; (8002090 <MX_RTC_Init+0x140>)
 800207a:	f007 f83d 	bl	80090f8 <HAL_RTCEx_SetTimeStamp>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002084:	f7ff ff5e 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002088:	bf00      	nop
 800208a:	3740      	adds	r7, #64	; 0x40
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000368 	.word	0x20000368
 8002094:	40002800 	.word	0x40002800

08002098 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b0a4      	sub	sp, #144	; 0x90
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	2284      	movs	r2, #132	; 0x84
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f008 fc0f 	bl	800a8cc <memset>
  if(rtcHandle->Instance==RTC)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <HAL_RTC_MspInit+0x54>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d114      	bne.n	80020e2 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020b8:	2320      	movs	r3, #32
 80020ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80020bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	4618      	mov	r0, r3
 80020c8:	f006 f8b8 	bl	800823c <HAL_RCCEx_PeriphCLKConfig>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80020d2:	f7ff ff37 	bl	8001f44 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_RTC_MspInit+0x58>)
 80020d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <HAL_RTC_MspInit+0x58>)
 80020dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80020e2:	bf00      	nop
 80020e4:	3790      	adds	r7, #144	; 0x90
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40002800 	.word	0x40002800
 80020f0:	40023800 	.word	0x40023800

080020f4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <MX_SPI2_Init+0x74>)
 80020fa:	4a1c      	ldr	r2, [pc, #112]	; (800216c <MX_SPI2_Init+0x78>)
 80020fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020fe:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <MX_SPI2_Init+0x74>)
 8002100:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002104:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <MX_SPI2_Init+0x74>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <MX_SPI2_Init+0x74>)
 800210e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002112:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <MX_SPI2_Init+0x74>)
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800211a:	4b13      	ldr	r3, [pc, #76]	; (8002168 <MX_SPI2_Init+0x74>)
 800211c:	2200      	movs	r2, #0
 800211e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <MX_SPI2_Init+0x74>)
 8002122:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002126:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <MX_SPI2_Init+0x74>)
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <MX_SPI2_Init+0x74>)
 8002130:	2200      	movs	r2, #0
 8002132:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <MX_SPI2_Init+0x74>)
 8002136:	2200      	movs	r2, #0
 8002138:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <MX_SPI2_Init+0x74>)
 800213c:	2200      	movs	r2, #0
 800213e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <MX_SPI2_Init+0x74>)
 8002142:	2207      	movs	r2, #7
 8002144:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <MX_SPI2_Init+0x74>)
 8002148:	2200      	movs	r2, #0
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <MX_SPI2_Init+0x74>)
 800214e:	2208      	movs	r2, #8
 8002150:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002152:	4805      	ldr	r0, [pc, #20]	; (8002168 <MX_SPI2_Init+0x74>)
 8002154:	f007 f8c9 	bl	80092ea <HAL_SPI_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800215e:	f7ff fef1 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000388 	.word	0x20000388
 800216c:	40003800 	.word	0x40003800

08002170 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a25      	ldr	r2, [pc, #148]	; (8002224 <HAL_SPI_MspInit+0xb4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d144      	bne.n	800221c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002192:	4b25      	ldr	r3, [pc, #148]	; (8002228 <HAL_SPI_MspInit+0xb8>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a24      	ldr	r2, [pc, #144]	; (8002228 <HAL_SPI_MspInit+0xb8>)
 8002198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b22      	ldr	r3, [pc, #136]	; (8002228 <HAL_SPI_MspInit+0xb8>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80021aa:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <HAL_SPI_MspInit+0xb8>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a1e      	ldr	r2, [pc, #120]	; (8002228 <HAL_SPI_MspInit+0xb8>)
 80021b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <HAL_SPI_MspInit+0xb8>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_SPI_MspInit+0xb8>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a18      	ldr	r2, [pc, #96]	; (8002228 <HAL_SPI_MspInit+0xb8>)
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <HAL_SPI_MspInit+0xb8>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80021da:	2303      	movs	r3, #3
 80021dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021ea:	2305      	movs	r3, #5
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	480d      	ldr	r0, [pc, #52]	; (800222c <HAL_SPI_MspInit+0xbc>)
 80021f6:	f003 fe75 	bl	8005ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80021fa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80021fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800220c:	2305      	movs	r3, #5
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4619      	mov	r1, r3
 8002216:	4806      	ldr	r0, [pc, #24]	; (8002230 <HAL_SPI_MspInit+0xc0>)
 8002218:	f003 fe64 	bl	8005ee4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800221c:	bf00      	nop
 800221e:	3728      	adds	r7, #40	; 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40003800 	.word	0x40003800
 8002228:	40023800 	.word	0x40023800
 800222c:	40022000 	.word	0x40022000
 8002230:	40020400 	.word	0x40020400

08002234 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08c      	sub	sp, #48	; 0x30
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a51      	ldr	r2, [pc, #324]	; (8002384 <I2Cx_MspInit+0x150>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d14d      	bne.n	80022e0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002244:	4b50      	ldr	r3, [pc, #320]	; (8002388 <I2Cx_MspInit+0x154>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	4a4f      	ldr	r2, [pc, #316]	; (8002388 <I2Cx_MspInit+0x154>)
 800224a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800224e:	6313      	str	r3, [r2, #48]	; 0x30
 8002250:	4b4d      	ldr	r3, [pc, #308]	; (8002388 <I2Cx_MspInit+0x154>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002258:	61bb      	str	r3, [r7, #24]
 800225a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002260:	2312      	movs	r3, #18
 8002262:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002268:	2302      	movs	r3, #2
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800226c:	2304      	movs	r3, #4
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002270:	f107 031c 	add.w	r3, r7, #28
 8002274:	4619      	mov	r1, r3
 8002276:	4845      	ldr	r0, [pc, #276]	; (800238c <I2Cx_MspInit+0x158>)
 8002278:	f003 fe34 	bl	8005ee4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800227c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002282:	f107 031c 	add.w	r3, r7, #28
 8002286:	4619      	mov	r1, r3
 8002288:	4840      	ldr	r0, [pc, #256]	; (800238c <I2Cx_MspInit+0x158>)
 800228a:	f003 fe2b 	bl	8005ee4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800228e:	4b3e      	ldr	r3, [pc, #248]	; (8002388 <I2Cx_MspInit+0x154>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a3d      	ldr	r2, [pc, #244]	; (8002388 <I2Cx_MspInit+0x154>)
 8002294:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
 800229a:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <I2Cx_MspInit+0x154>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80022a6:	4b38      	ldr	r3, [pc, #224]	; (8002388 <I2Cx_MspInit+0x154>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	4a37      	ldr	r2, [pc, #220]	; (8002388 <I2Cx_MspInit+0x154>)
 80022ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022b0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80022b2:	4b35      	ldr	r3, [pc, #212]	; (8002388 <I2Cx_MspInit+0x154>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4a34      	ldr	r2, [pc, #208]	; (8002388 <I2Cx_MspInit+0x154>)
 80022b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022bc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	210f      	movs	r1, #15
 80022c2:	2048      	movs	r0, #72	; 0x48
 80022c4:	f002 ffaa 	bl	800521c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80022c8:	2048      	movs	r0, #72	; 0x48
 80022ca:	f002 ffc3 	bl	8005254 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	210f      	movs	r1, #15
 80022d2:	2049      	movs	r0, #73	; 0x49
 80022d4:	f002 ffa2 	bl	800521c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80022d8:	2049      	movs	r0, #73	; 0x49
 80022da:	f002 ffbb 	bl	8005254 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80022de:	e04d      	b.n	800237c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80022e0:	4b29      	ldr	r3, [pc, #164]	; (8002388 <I2Cx_MspInit+0x154>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	4a28      	ldr	r2, [pc, #160]	; (8002388 <I2Cx_MspInit+0x154>)
 80022e6:	f043 0302 	orr.w	r3, r3, #2
 80022ea:	6313      	str	r3, [r2, #48]	; 0x30
 80022ec:	4b26      	ldr	r3, [pc, #152]	; (8002388 <I2Cx_MspInit+0x154>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80022f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022fc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80022fe:	2312      	movs	r3, #18
 8002300:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002306:	2302      	movs	r3, #2
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800230a:	2304      	movs	r3, #4
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800230e:	f107 031c 	add.w	r3, r7, #28
 8002312:	4619      	mov	r1, r3
 8002314:	481e      	ldr	r0, [pc, #120]	; (8002390 <I2Cx_MspInit+0x15c>)
 8002316:	f003 fde5 	bl	8005ee4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800231a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800231e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002320:	f107 031c 	add.w	r3, r7, #28
 8002324:	4619      	mov	r1, r3
 8002326:	481a      	ldr	r0, [pc, #104]	; (8002390 <I2Cx_MspInit+0x15c>)
 8002328:	f003 fddc 	bl	8005ee4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800232c:	4b16      	ldr	r3, [pc, #88]	; (8002388 <I2Cx_MspInit+0x154>)
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	4a15      	ldr	r2, [pc, #84]	; (8002388 <I2Cx_MspInit+0x154>)
 8002332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002336:	6413      	str	r3, [r2, #64]	; 0x40
 8002338:	4b13      	ldr	r3, [pc, #76]	; (8002388 <I2Cx_MspInit+0x154>)
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002344:	4b10      	ldr	r3, [pc, #64]	; (8002388 <I2Cx_MspInit+0x154>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4a0f      	ldr	r2, [pc, #60]	; (8002388 <I2Cx_MspInit+0x154>)
 800234a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800234e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002350:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <I2Cx_MspInit+0x154>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4a0c      	ldr	r2, [pc, #48]	; (8002388 <I2Cx_MspInit+0x154>)
 8002356:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800235a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800235c:	2200      	movs	r2, #0
 800235e:	210f      	movs	r1, #15
 8002360:	201f      	movs	r0, #31
 8002362:	f002 ff5b 	bl	800521c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002366:	201f      	movs	r0, #31
 8002368:	f002 ff74 	bl	8005254 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	210f      	movs	r1, #15
 8002370:	2020      	movs	r0, #32
 8002372:	f002 ff53 	bl	800521c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002376:	2020      	movs	r0, #32
 8002378:	f002 ff6c 	bl	8005254 <HAL_NVIC_EnableIRQ>
}
 800237c:	bf00      	nop
 800237e:	3730      	adds	r7, #48	; 0x30
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	200003ec 	.word	0x200003ec
 8002388:	40023800 	.word	0x40023800
 800238c:	40021c00 	.word	0x40021c00
 8002390:	40020400 	.word	0x40020400

08002394 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f004 fb79 	bl	8006a94 <HAL_I2C_GetState>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d125      	bne.n	80023f4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a14      	ldr	r2, [pc, #80]	; (80023fc <I2Cx_Init+0x68>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d103      	bne.n	80023b8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a13      	ldr	r2, [pc, #76]	; (8002400 <I2Cx_Init+0x6c>)
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	e002      	b.n	80023be <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a12      	ldr	r2, [pc, #72]	; (8002404 <I2Cx_Init+0x70>)
 80023bc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a11      	ldr	r2, [pc, #68]	; (8002408 <I2Cx_Init+0x74>)
 80023c2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff23 	bl	8002234 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f004 f862 	bl	80064b8 <HAL_I2C_Init>
  }
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	200003ec 	.word	0x200003ec
 8002400:	40005c00 	.word	0x40005c00
 8002404:	40005400 	.word	0x40005400
 8002408:	40912732 	.word	0x40912732

0800240c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	; 0x28
 8002410:	af04      	add	r7, sp, #16
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	4608      	mov	r0, r1
 8002416:	4611      	mov	r1, r2
 8002418:	461a      	mov	r2, r3
 800241a:	4603      	mov	r3, r0
 800241c:	72fb      	strb	r3, [r7, #11]
 800241e:	460b      	mov	r3, r1
 8002420:	813b      	strh	r3, [r7, #8]
 8002422:	4613      	mov	r3, r2
 8002424:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800242a:	7afb      	ldrb	r3, [r7, #11]
 800242c:	b299      	uxth	r1, r3
 800242e:	88f8      	ldrh	r0, [r7, #6]
 8002430:	893a      	ldrh	r2, [r7, #8]
 8002432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002436:	9302      	str	r3, [sp, #8]
 8002438:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	4603      	mov	r3, r0
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f004 fa0c 	bl	8006860 <HAL_I2C_Mem_Read>
 8002448:	4603      	mov	r3, r0
 800244a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d004      	beq.n	800245c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002452:	7afb      	ldrb	r3, [r7, #11]
 8002454:	4619      	mov	r1, r3
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f832 	bl	80024c0 <I2Cx_Error>
  }
  return status;    
 800245c:	7dfb      	ldrb	r3, [r7, #23]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b08a      	sub	sp, #40	; 0x28
 800246a:	af04      	add	r7, sp, #16
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	4608      	mov	r0, r1
 8002470:	4611      	mov	r1, r2
 8002472:	461a      	mov	r2, r3
 8002474:	4603      	mov	r3, r0
 8002476:	72fb      	strb	r3, [r7, #11]
 8002478:	460b      	mov	r3, r1
 800247a:	813b      	strh	r3, [r7, #8]
 800247c:	4613      	mov	r3, r2
 800247e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002484:	7afb      	ldrb	r3, [r7, #11]
 8002486:	b299      	uxth	r1, r3
 8002488:	88f8      	ldrh	r0, [r7, #6]
 800248a:	893a      	ldrh	r2, [r7, #8]
 800248c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002490:	9302      	str	r3, [sp, #8]
 8002492:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	4603      	mov	r3, r0
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f004 f8cb 	bl	8006638 <HAL_I2C_Mem_Write>
 80024a2:	4603      	mov	r3, r0
 80024a4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80024a6:	7dfb      	ldrb	r3, [r7, #23]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d004      	beq.n	80024b6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80024ac:	7afb      	ldrb	r3, [r7, #11]
 80024ae:	4619      	mov	r1, r3
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f805 	bl	80024c0 <I2Cx_Error>
  }
  return status;
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f004 f883 	bl	80065d8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff ff5e 	bl	8002394 <I2Cx_Init>
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <TS_IO_Init+0x10>)
 80024e6:	f7ff ff55 	bl	8002394 <I2Cx_Init>
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200003ec 	.word	0x200003ec

080024f4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
 80024fe:	460b      	mov	r3, r1
 8002500:	71bb      	strb	r3, [r7, #6]
 8002502:	4613      	mov	r3, r2
 8002504:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002506:	79bb      	ldrb	r3, [r7, #6]
 8002508:	b29a      	uxth	r2, r3
 800250a:	79f9      	ldrb	r1, [r7, #7]
 800250c:	2301      	movs	r3, #1
 800250e:	9301      	str	r3, [sp, #4]
 8002510:	1d7b      	adds	r3, r7, #5
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2301      	movs	r3, #1
 8002516:	4803      	ldr	r0, [pc, #12]	; (8002524 <TS_IO_Write+0x30>)
 8002518:	f7ff ffa5 	bl	8002466 <I2Cx_WriteMultiple>
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	200003ec 	.word	0x200003ec

08002528 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af02      	add	r7, sp, #8
 800252e:	4603      	mov	r3, r0
 8002530:	460a      	mov	r2, r1
 8002532:	71fb      	strb	r3, [r7, #7]
 8002534:	4613      	mov	r3, r2
 8002536:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800253c:	79bb      	ldrb	r3, [r7, #6]
 800253e:	b29a      	uxth	r2, r3
 8002540:	79f9      	ldrb	r1, [r7, #7]
 8002542:	2301      	movs	r3, #1
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	f107 030f 	add.w	r3, r7, #15
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2301      	movs	r3, #1
 800254e:	4804      	ldr	r0, [pc, #16]	; (8002560 <TS_IO_Read+0x38>)
 8002550:	f7ff ff5c 	bl	800240c <I2Cx_ReadMultiple>

  return read_value;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	200003ec 	.word	0x200003ec

08002564 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f002 f97f 	bl	8004870 <HAL_Delay>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002580:	4b31      	ldr	r3, [pc, #196]	; (8002648 <BSP_LCD_Init+0xcc>)
 8002582:	2228      	movs	r2, #40	; 0x28
 8002584:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002586:	4b30      	ldr	r3, [pc, #192]	; (8002648 <BSP_LCD_Init+0xcc>)
 8002588:	2209      	movs	r2, #9
 800258a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800258c:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <BSP_LCD_Init+0xcc>)
 800258e:	2235      	movs	r2, #53	; 0x35
 8002590:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <BSP_LCD_Init+0xcc>)
 8002594:	220b      	movs	r2, #11
 8002596:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002598:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <BSP_LCD_Init+0xcc>)
 800259a:	f240 121b 	movw	r2, #283	; 0x11b
 800259e:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80025a0:	4b29      	ldr	r3, [pc, #164]	; (8002648 <BSP_LCD_Init+0xcc>)
 80025a2:	f240 2215 	movw	r2, #533	; 0x215
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80025a8:	4b27      	ldr	r3, [pc, #156]	; (8002648 <BSP_LCD_Init+0xcc>)
 80025aa:	f240 121d 	movw	r2, #285	; 0x11d
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80025b0:	4b25      	ldr	r3, [pc, #148]	; (8002648 <BSP_LCD_Init+0xcc>)
 80025b2:	f240 2235 	movw	r2, #565	; 0x235
 80025b6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80025b8:	2100      	movs	r1, #0
 80025ba:	4823      	ldr	r0, [pc, #140]	; (8002648 <BSP_LCD_Init+0xcc>)
 80025bc:	f000 fe6e 	bl	800329c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80025c0:	4b21      	ldr	r3, [pc, #132]	; (8002648 <BSP_LCD_Init+0xcc>)
 80025c2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80025c6:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80025c8:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <BSP_LCD_Init+0xcc>)
 80025ca:	f44f 7288 	mov.w	r2, #272	; 0x110
 80025ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <BSP_LCD_Init+0xcc>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <BSP_LCD_Init+0xcc>)
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <BSP_LCD_Init+0xcc>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80025e8:	4b17      	ldr	r3, [pc, #92]	; (8002648 <BSP_LCD_Init+0xcc>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <BSP_LCD_Init+0xcc>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80025f4:	4b14      	ldr	r3, [pc, #80]	; (8002648 <BSP_LCD_Init+0xcc>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80025fa:	4b13      	ldr	r3, [pc, #76]	; (8002648 <BSP_LCD_Init+0xcc>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <BSP_LCD_Init+0xcc>)
 8002602:	4a12      	ldr	r2, [pc, #72]	; (800264c <BSP_LCD_Init+0xd0>)
 8002604:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002606:	4810      	ldr	r0, [pc, #64]	; (8002648 <BSP_LCD_Init+0xcc>)
 8002608:	f004 ff54 	bl	80074b4 <HAL_LTDC_GetState>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d103      	bne.n	800261a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002612:	2100      	movs	r1, #0
 8002614:	480c      	ldr	r0, [pc, #48]	; (8002648 <BSP_LCD_Init+0xcc>)
 8002616:	f000 fd67 	bl	80030e8 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800261a:	480b      	ldr	r0, [pc, #44]	; (8002648 <BSP_LCD_Init+0xcc>)
 800261c:	f004 fd7a 	bl	8007114 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002620:	2201      	movs	r2, #1
 8002622:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002626:	480a      	ldr	r0, [pc, #40]	; (8002650 <BSP_LCD_Init+0xd4>)
 8002628:	f003 ff2c 	bl	8006484 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800262c:	2201      	movs	r2, #1
 800262e:	2108      	movs	r1, #8
 8002630:	4808      	ldr	r0, [pc, #32]	; (8002654 <BSP_LCD_Init+0xd8>)
 8002632:	f003 ff27 	bl	8006484 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002636:	f000 ff95 	bl	8003564 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800263a:	4807      	ldr	r0, [pc, #28]	; (8002658 <BSP_LCD_Init+0xdc>)
 800263c:	f000 f8d8 	bl	80027f0 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000440 	.word	0x20000440
 800264c:	40016800 	.word	0x40016800
 8002650:	40022000 	.word	0x40022000
 8002654:	40022800 	.word	0x40022800
 8002658:	20000028 	.word	0x20000028

0800265c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <BSP_LCD_GetXSize+0x20>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a06      	ldr	r2, [pc, #24]	; (8002680 <BSP_LCD_GetXSize+0x24>)
 8002666:	2134      	movs	r1, #52	; 0x34
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	4413      	add	r3, r2
 800266e:	3360      	adds	r3, #96	; 0x60
 8002670:	681b      	ldr	r3, [r3, #0]
}
 8002672:	4618      	mov	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	20000528 	.word	0x20000528
 8002680:	20000440 	.word	0x20000440

08002684 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <BSP_LCD_GetYSize+0x20>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a06      	ldr	r2, [pc, #24]	; (80026a8 <BSP_LCD_GetYSize+0x24>)
 800268e:	2134      	movs	r1, #52	; 0x34
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	3364      	adds	r3, #100	; 0x64
 8002698:	681b      	ldr	r3, [r3, #0]
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	20000528 	.word	0x20000528
 80026a8:	20000440 	.word	0x20000440

080026ac <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b090      	sub	sp, #64	; 0x40
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	6039      	str	r1, [r7, #0]
 80026b6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80026bc:	f7ff ffce 	bl	800265c <BSP_LCD_GetXSize>
 80026c0:	4603      	mov	r3, r0
 80026c2:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80026c8:	f7ff ffdc 	bl	8002684 <BSP_LCD_GetYSize>
 80026cc:	4603      	mov	r3, r0
 80026ce:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80026d8:	23ff      	movs	r3, #255	; 0xff
 80026da:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80026f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80026f8:	2307      	movs	r3, #7
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80026fc:	f7ff ffae 	bl	800265c <BSP_LCD_GetXSize>
 8002700:	4603      	mov	r3, r0
 8002702:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002704:	f7ff ffbe 	bl	8002684 <BSP_LCD_GetYSize>
 8002708:	4603      	mov	r3, r0
 800270a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800270c:	88fa      	ldrh	r2, [r7, #6]
 800270e:	f107 030c 	add.w	r3, r7, #12
 8002712:	4619      	mov	r1, r3
 8002714:	4812      	ldr	r0, [pc, #72]	; (8002760 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002716:	f004 fe8f 	bl	8007438 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800271a:	88fa      	ldrh	r2, [r7, #6]
 800271c:	4911      	ldr	r1, [pc, #68]	; (8002764 <BSP_LCD_LayerDefaultInit+0xb8>)
 800271e:	4613      	mov	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	3304      	adds	r3, #4
 800272a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800272e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002730:	88fa      	ldrh	r2, [r7, #6]
 8002732:	490c      	ldr	r1, [pc, #48]	; (8002764 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002734:	4613      	mov	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	3308      	adds	r3, #8
 8002740:	4a09      	ldr	r2, [pc, #36]	; (8002768 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002742:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002744:	88fa      	ldrh	r2, [r7, #6]
 8002746:	4907      	ldr	r1, [pc, #28]	; (8002764 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002756:	601a      	str	r2, [r3, #0]
}
 8002758:	bf00      	nop
 800275a:	3740      	adds	r7, #64	; 0x40
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000440 	.word	0x20000440
 8002764:	2000052c 	.word	0x2000052c
 8002768:	20000028 	.word	0x20000028

0800276c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002774:	4a04      	ldr	r2, [pc, #16]	; (8002788 <BSP_LCD_SelectLayer+0x1c>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6013      	str	r3, [r2, #0]
} 
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000528 	.word	0x20000528

0800278c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002794:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <BSP_LCD_SetTextColor+0x28>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4907      	ldr	r1, [pc, #28]	; (80027b8 <BSP_LCD_SetTextColor+0x2c>)
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	601a      	str	r2, [r3, #0]
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	20000528 	.word	0x20000528
 80027b8:	2000052c 	.word	0x2000052c

080027bc <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <BSP_LCD_SetBackColor+0x2c>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4908      	ldr	r1, [pc, #32]	; (80027ec <BSP_LCD_SetBackColor+0x30>)
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	3304      	adds	r3, #4
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	601a      	str	r2, [r3, #0]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000528 	.word	0x20000528
 80027ec:	2000052c 	.word	0x2000052c

080027f0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <BSP_LCD_SetFont+0x2c>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4908      	ldr	r1, [pc, #32]	; (8002820 <BSP_LCD_SetFont+0x30>)
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	3308      	adds	r3, #8
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	601a      	str	r2, [r3, #0]
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20000528 	.word	0x20000528
 8002820:	2000052c 	.word	0x2000052c

08002824 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002828:	4b07      	ldr	r3, [pc, #28]	; (8002848 <BSP_LCD_GetFont+0x24>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4907      	ldr	r1, [pc, #28]	; (800284c <BSP_LCD_GetFont+0x28>)
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	3308      	adds	r3, #8
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000528 	.word	0x20000528
 800284c:	2000052c 	.word	0x2000052c

08002850 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002852:	b085      	sub	sp, #20
 8002854:	af02      	add	r7, sp, #8
 8002856:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <BSP_LCD_Clear+0x48>)
 800285a:	681c      	ldr	r4, [r3, #0]
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <BSP_LCD_Clear+0x48>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0e      	ldr	r2, [pc, #56]	; (800289c <BSP_LCD_Clear+0x4c>)
 8002862:	2134      	movs	r1, #52	; 0x34
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	4413      	add	r3, r2
 800286a:	335c      	adds	r3, #92	; 0x5c
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	461e      	mov	r6, r3
 8002870:	f7ff fef4 	bl	800265c <BSP_LCD_GetXSize>
 8002874:	4605      	mov	r5, r0
 8002876:	f7ff ff05 	bl	8002684 <BSP_LCD_GetYSize>
 800287a:	4602      	mov	r2, r0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	9301      	str	r3, [sp, #4]
 8002880:	2300      	movs	r3, #0
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	4613      	mov	r3, r2
 8002886:	462a      	mov	r2, r5
 8002888:	4631      	mov	r1, r6
 800288a:	4620      	mov	r0, r4
 800288c:	f000 fdda 	bl	8003444 <LL_FillBuffer>
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002898:	20000528 	.word	0x20000528
 800289c:	20000440 	.word	0x20000440

080028a0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	80fb      	strh	r3, [r7, #6]
 80028aa:	460b      	mov	r3, r1
 80028ac:	80bb      	strh	r3, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80028b2:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <BSP_LCD_DisplayChar+0x80>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	491b      	ldr	r1, [pc, #108]	; (8002924 <BSP_LCD_DisplayChar+0x84>)
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	3308      	adds	r3, #8
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6819      	ldr	r1, [r3, #0]
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80028ce:	4b14      	ldr	r3, [pc, #80]	; (8002920 <BSP_LCD_DisplayChar+0x80>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4c14      	ldr	r4, [pc, #80]	; (8002924 <BSP_LCD_DisplayChar+0x84>)
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4423      	add	r3, r4
 80028de:	3308      	adds	r3, #8
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80028e4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <BSP_LCD_DisplayChar+0x80>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4c0d      	ldr	r4, [pc, #52]	; (8002924 <BSP_LCD_DisplayChar+0x84>)
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4423      	add	r3, r4
 80028f8:	3308      	adds	r3, #8
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	889b      	ldrh	r3, [r3, #4]
 80028fe:	3307      	adds	r3, #7
 8002900:	2b00      	cmp	r3, #0
 8002902:	da00      	bge.n	8002906 <BSP_LCD_DisplayChar+0x66>
 8002904:	3307      	adds	r3, #7
 8002906:	10db      	asrs	r3, r3, #3
 8002908:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800290c:	18ca      	adds	r2, r1, r3
 800290e:	88b9      	ldrh	r1, [r7, #4]
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fcde 	bl	80032d4 <DrawChar>
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bd90      	pop	{r4, r7, pc}
 8002920:	20000528 	.word	0x20000528
 8002924:	2000052c 	.word	0x2000052c

08002928 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002928:	b5b0      	push	{r4, r5, r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
 800292e:	60ba      	str	r2, [r7, #8]
 8002930:	461a      	mov	r2, r3
 8002932:	4603      	mov	r3, r0
 8002934:	81fb      	strh	r3, [r7, #14]
 8002936:	460b      	mov	r3, r1
 8002938:	81bb      	strh	r3, [r7, #12]
 800293a:	4613      	mov	r3, r2
 800293c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800293e:	2301      	movs	r3, #1
 8002940:	83fb      	strh	r3, [r7, #30]
 8002942:	2300      	movs	r3, #0
 8002944:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002952:	e002      	b.n	800295a <BSP_LCD_DisplayStringAt+0x32>
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	3301      	adds	r3, #1
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	617a      	str	r2, [r7, #20]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f6      	bne.n	8002954 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002966:	f7ff fe79 	bl	800265c <BSP_LCD_GetXSize>
 800296a:	4601      	mov	r1, r0
 800296c:	4b50      	ldr	r3, [pc, #320]	; (8002ab0 <BSP_LCD_DisplayStringAt+0x188>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4850      	ldr	r0, [pc, #320]	; (8002ab4 <BSP_LCD_DisplayStringAt+0x18c>)
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4403      	add	r3, r0
 800297c:	3308      	adds	r3, #8
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	889b      	ldrh	r3, [r3, #4]
 8002982:	fbb1 f3f3 	udiv	r3, r1, r3
 8002986:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	2b03      	cmp	r3, #3
 800298c:	d01c      	beq.n	80029c8 <BSP_LCD_DisplayStringAt+0xa0>
 800298e:	2b03      	cmp	r3, #3
 8002990:	dc33      	bgt.n	80029fa <BSP_LCD_DisplayStringAt+0xd2>
 8002992:	2b01      	cmp	r3, #1
 8002994:	d002      	beq.n	800299c <BSP_LCD_DisplayStringAt+0x74>
 8002996:	2b02      	cmp	r3, #2
 8002998:	d019      	beq.n	80029ce <BSP_LCD_DisplayStringAt+0xa6>
 800299a:	e02e      	b.n	80029fa <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	1ad1      	subs	r1, r2, r3
 80029a2:	4b43      	ldr	r3, [pc, #268]	; (8002ab0 <BSP_LCD_DisplayStringAt+0x188>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4843      	ldr	r0, [pc, #268]	; (8002ab4 <BSP_LCD_DisplayStringAt+0x18c>)
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4403      	add	r3, r0
 80029b2:	3308      	adds	r3, #8
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	889b      	ldrh	r3, [r3, #4]
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	085b      	lsrs	r3, r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	89fb      	ldrh	r3, [r7, #14]
 80029c2:	4413      	add	r3, r2
 80029c4:	83fb      	strh	r3, [r7, #30]
      break;
 80029c6:	e01b      	b.n	8002a00 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80029c8:	89fb      	ldrh	r3, [r7, #14]
 80029ca:	83fb      	strh	r3, [r7, #30]
      break;
 80029cc:	e018      	b.n	8002a00 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	b299      	uxth	r1, r3
 80029d6:	4b36      	ldr	r3, [pc, #216]	; (8002ab0 <BSP_LCD_DisplayStringAt+0x188>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4836      	ldr	r0, [pc, #216]	; (8002ab4 <BSP_LCD_DisplayStringAt+0x18c>)
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4403      	add	r3, r0
 80029e6:	3308      	adds	r3, #8
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	889b      	ldrh	r3, [r3, #4]
 80029ec:	fb11 f303 	smulbb	r3, r1, r3
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	89fb      	ldrh	r3, [r7, #14]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	83fb      	strh	r3, [r7, #30]
      break;
 80029f8:	e002      	b.n	8002a00 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80029fa:	89fb      	ldrh	r3, [r7, #14]
 80029fc:	83fb      	strh	r3, [r7, #30]
      break;
 80029fe:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002a00:	8bfb      	ldrh	r3, [r7, #30]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <BSP_LCD_DisplayStringAt+0xe6>
 8002a06:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	da1d      	bge.n	8002a4a <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002a12:	e01a      	b.n	8002a4a <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	781a      	ldrb	r2, [r3, #0]
 8002a18:	89b9      	ldrh	r1, [r7, #12]
 8002a1a:	8bfb      	ldrh	r3, [r7, #30]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff3f 	bl	80028a0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002a22:	4b23      	ldr	r3, [pc, #140]	; (8002ab0 <BSP_LCD_DisplayStringAt+0x188>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4923      	ldr	r1, [pc, #140]	; (8002ab4 <BSP_LCD_DisplayStringAt+0x18c>)
 8002a28:	4613      	mov	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	3308      	adds	r3, #8
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	889a      	ldrh	r2, [r3, #4]
 8002a38:	8bfb      	ldrh	r3, [r7, #30]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	3301      	adds	r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
    i++;
 8002a44:	8bbb      	ldrh	r3, [r7, #28]
 8002a46:	3301      	adds	r3, #1
 8002a48:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bf14      	ite	ne
 8002a52:	2301      	movne	r3, #1
 8002a54:	2300      	moveq	r3, #0
 8002a56:	b2dc      	uxtb	r4, r3
 8002a58:	f7ff fe00 	bl	800265c <BSP_LCD_GetXSize>
 8002a5c:	8bb9      	ldrh	r1, [r7, #28]
 8002a5e:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <BSP_LCD_DisplayStringAt+0x188>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	4d14      	ldr	r5, [pc, #80]	; (8002ab4 <BSP_LCD_DisplayStringAt+0x18c>)
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	442b      	add	r3, r5
 8002a6e:	3308      	adds	r3, #8
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	889b      	ldrh	r3, [r3, #4]
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	1ac3      	subs	r3, r0, r3
 8002a7a:	b299      	uxth	r1, r3
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <BSP_LCD_DisplayStringAt+0x188>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	480c      	ldr	r0, [pc, #48]	; (8002ab4 <BSP_LCD_DisplayStringAt+0x18c>)
 8002a82:	4613      	mov	r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4403      	add	r3, r0
 8002a8c:	3308      	adds	r3, #8
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	889b      	ldrh	r3, [r3, #4]
 8002a92:	4299      	cmp	r1, r3
 8002a94:	bf2c      	ite	cs
 8002a96:	2301      	movcs	r3, #1
 8002a98:	2300      	movcc	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	4023      	ands	r3, r4
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1b7      	bne.n	8002a14 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	3720      	adds	r7, #32
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bdb0      	pop	{r4, r5, r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000528 	.word	0x20000528
 8002ab4:	2000052c 	.word	0x2000052c

08002ab8 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002ac4:	f7ff feae 	bl	8002824 <BSP_LCD_GetFont>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	88db      	ldrh	r3, [r3, #6]
 8002acc:	88fa      	ldrh	r2, [r7, #6]
 8002ace:	fb12 f303 	smulbb	r3, r2, r3
 8002ad2:	b299      	uxth	r1, r3
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f7ff ff25 	bl	8002928 <BSP_LCD_DisplayStringAt>
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002ae8:	b5b0      	push	{r4, r5, r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	4603      	mov	r3, r0
 8002af0:	80fb      	strh	r3, [r7, #6]
 8002af2:	460b      	mov	r3, r1
 8002af4:	80bb      	strh	r3, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002afe:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <BSP_LCD_DrawHLine+0xb0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a26      	ldr	r2, [pc, #152]	; (8002b9c <BSP_LCD_DrawHLine+0xb4>)
 8002b04:	2134      	movs	r1, #52	; 0x34
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3348      	adds	r3, #72	; 0x48
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d114      	bne.n	8002b3e <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002b14:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <BSP_LCD_DrawHLine+0xb0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a20      	ldr	r2, [pc, #128]	; (8002b9c <BSP_LCD_DrawHLine+0xb4>)
 8002b1a:	2134      	movs	r1, #52	; 0x34
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	335c      	adds	r3, #92	; 0x5c
 8002b24:	681c      	ldr	r4, [r3, #0]
 8002b26:	f7ff fd99 	bl	800265c <BSP_LCD_GetXSize>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	88bb      	ldrh	r3, [r7, #4]
 8002b2e:	fb03 f202 	mul.w	r2, r3, r2
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	4413      	add	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4423      	add	r3, r4
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e013      	b.n	8002b66 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002b3e:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <BSP_LCD_DrawHLine+0xb0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a16      	ldr	r2, [pc, #88]	; (8002b9c <BSP_LCD_DrawHLine+0xb4>)
 8002b44:	2134      	movs	r1, #52	; 0x34
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	335c      	adds	r3, #92	; 0x5c
 8002b4e:	681c      	ldr	r4, [r3, #0]
 8002b50:	f7ff fd84 	bl	800265c <BSP_LCD_GetXSize>
 8002b54:	4602      	mov	r2, r0
 8002b56:	88bb      	ldrh	r3, [r7, #4]
 8002b58:	fb03 f202 	mul.w	r2, r3, r2
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4423      	add	r3, r4
 8002b64:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002b66:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <BSP_LCD_DrawHLine+0xb0>)
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	68f9      	ldr	r1, [r7, #12]
 8002b6c:	887c      	ldrh	r4, [r7, #2]
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <BSP_LCD_DrawHLine+0xb0>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	4d0b      	ldr	r5, [pc, #44]	; (8002ba0 <BSP_LCD_DrawHLine+0xb8>)
 8002b74:	4613      	mov	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	442b      	add	r3, r5
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	9301      	str	r3, [sp, #4]
 8002b82:	2300      	movs	r3, #0
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	2301      	movs	r3, #1
 8002b88:	4622      	mov	r2, r4
 8002b8a:	f000 fc5b 	bl	8003444 <LL_FillBuffer>
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bdb0      	pop	{r4, r5, r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000528 	.word	0x20000528
 8002b9c:	20000440 	.word	0x20000440
 8002ba0:	2000052c 	.word	0x2000052c

08002ba4 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002ba4:	b590      	push	{r4, r7, lr}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	80fb      	strh	r3, [r7, #6]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	80bb      	strh	r3, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002bb6:	887b      	ldrh	r3, [r7, #2]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	f1c3 0303 	rsb	r3, r3, #3
 8002bbe:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002bc4:	887b      	ldrh	r3, [r7, #2]
 8002bc6:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002bc8:	e0c7      	b.n	8002d5a <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	b298      	uxth	r0, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	88ba      	ldrh	r2, [r7, #4]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	b299      	uxth	r1, r3
 8002bde:	4b64      	ldr	r3, [pc, #400]	; (8002d70 <BSP_LCD_DrawCircle+0x1cc>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4c64      	ldr	r4, [pc, #400]	; (8002d74 <BSP_LCD_DrawCircle+0x1d0>)
 8002be4:	4613      	mov	r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4423      	add	r3, r4
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	f000 f8c1 	bl	8002d78 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	88fa      	ldrh	r2, [r7, #6]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	b298      	uxth	r0, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	88ba      	ldrh	r2, [r7, #4]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	b299      	uxth	r1, r3
 8002c0a:	4b59      	ldr	r3, [pc, #356]	; (8002d70 <BSP_LCD_DrawCircle+0x1cc>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	4c59      	ldr	r4, [pc, #356]	; (8002d74 <BSP_LCD_DrawCircle+0x1d0>)
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4423      	add	r3, r4
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	f000 f8ab 	bl	8002d78 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	4413      	add	r3, r2
 8002c2a:	b298      	uxth	r0, r3
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	88ba      	ldrh	r2, [r7, #4]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	b299      	uxth	r1, r3
 8002c36:	4b4e      	ldr	r3, [pc, #312]	; (8002d70 <BSP_LCD_DrawCircle+0x1cc>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	4c4e      	ldr	r4, [pc, #312]	; (8002d74 <BSP_LCD_DrawCircle+0x1d0>)
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4423      	add	r3, r4
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f000 f895 	bl	8002d78 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	88fa      	ldrh	r2, [r7, #6]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	b298      	uxth	r0, r3
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	88ba      	ldrh	r2, [r7, #4]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	b299      	uxth	r1, r3
 8002c62:	4b43      	ldr	r3, [pc, #268]	; (8002d70 <BSP_LCD_DrawCircle+0x1cc>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4c43      	ldr	r4, [pc, #268]	; (8002d74 <BSP_LCD_DrawCircle+0x1d0>)
 8002c68:	4613      	mov	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4423      	add	r3, r4
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	f000 f87f 	bl	8002d78 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	4413      	add	r3, r2
 8002c82:	b298      	uxth	r0, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	88bb      	ldrh	r3, [r7, #4]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	b299      	uxth	r1, r3
 8002c8e:	4b38      	ldr	r3, [pc, #224]	; (8002d70 <BSP_LCD_DrawCircle+0x1cc>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4c38      	ldr	r4, [pc, #224]	; (8002d74 <BSP_LCD_DrawCircle+0x1d0>)
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4423      	add	r3, r4
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f000 f869 	bl	8002d78 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	88fa      	ldrh	r2, [r7, #6]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	b298      	uxth	r0, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	88bb      	ldrh	r3, [r7, #4]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	b299      	uxth	r1, r3
 8002cba:	4b2d      	ldr	r3, [pc, #180]	; (8002d70 <BSP_LCD_DrawCircle+0x1cc>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	4c2d      	ldr	r4, [pc, #180]	; (8002d74 <BSP_LCD_DrawCircle+0x1d0>)
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4423      	add	r3, r4
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	f000 f853 	bl	8002d78 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	4413      	add	r3, r2
 8002cda:	b298      	uxth	r0, r3
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	88bb      	ldrh	r3, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	b299      	uxth	r1, r3
 8002ce6:	4b22      	ldr	r3, [pc, #136]	; (8002d70 <BSP_LCD_DrawCircle+0x1cc>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4c22      	ldr	r4, [pc, #136]	; (8002d74 <BSP_LCD_DrawCircle+0x1d0>)
 8002cec:	4613      	mov	r3, r2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4423      	add	r3, r4
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	f000 f83d 	bl	8002d78 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	88fa      	ldrh	r2, [r7, #6]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	b298      	uxth	r0, r3
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	88bb      	ldrh	r3, [r7, #4]
 8002d0e:	4413      	add	r3, r2
 8002d10:	b299      	uxth	r1, r3
 8002d12:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <BSP_LCD_DrawCircle+0x1cc>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	4c17      	ldr	r4, [pc, #92]	; (8002d74 <BSP_LCD_DrawCircle+0x1d0>)
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4423      	add	r3, r4
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	f000 f827 	bl	8002d78 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	da06      	bge.n	8002d3e <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	009a      	lsls	r2, r3, #2
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	4413      	add	r3, r2
 8002d38:	3306      	adds	r3, #6
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	e00a      	b.n	8002d54 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	009a      	lsls	r2, r3, #2
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	4413      	add	r3, r2
 8002d4a:	330a      	adds	r3, #10
 8002d4c:	617b      	str	r3, [r7, #20]
      current_y--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	3301      	adds	r3, #1
 8002d58:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	f67f af33 	bls.w	8002bca <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002d64:	bf00      	nop
 8002d66:	bf00      	nop
 8002d68:	371c      	adds	r7, #28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd90      	pop	{r4, r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000528 	.word	0x20000528
 8002d74:	2000052c 	.word	0x2000052c

08002d78 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002d78:	b5b0      	push	{r4, r5, r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	603a      	str	r2, [r7, #0]
 8002d82:	80fb      	strh	r3, [r7, #6]
 8002d84:	460b      	mov	r3, r1
 8002d86:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002d88:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <BSP_LCD_DrawPixel+0x88>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a1d      	ldr	r2, [pc, #116]	; (8002e04 <BSP_LCD_DrawPixel+0x8c>)
 8002d8e:	2134      	movs	r1, #52	; 0x34
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	3348      	adds	r3, #72	; 0x48
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d116      	bne.n	8002dcc <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002d9e:	4b18      	ldr	r3, [pc, #96]	; (8002e00 <BSP_LCD_DrawPixel+0x88>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a18      	ldr	r2, [pc, #96]	; (8002e04 <BSP_LCD_DrawPixel+0x8c>)
 8002da4:	2134      	movs	r1, #52	; 0x34
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	335c      	adds	r3, #92	; 0x5c
 8002dae:	681c      	ldr	r4, [r3, #0]
 8002db0:	88bd      	ldrh	r5, [r7, #4]
 8002db2:	f7ff fc53 	bl	800265c <BSP_LCD_GetXSize>
 8002db6:	4603      	mov	r3, r0
 8002db8:	fb03 f205 	mul.w	r2, r3, r5
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	4423      	add	r3, r4
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	b292      	uxth	r2, r2
 8002dc8:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002dca:	e015      	b.n	8002df8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <BSP_LCD_DrawPixel+0x88>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0c      	ldr	r2, [pc, #48]	; (8002e04 <BSP_LCD_DrawPixel+0x8c>)
 8002dd2:	2134      	movs	r1, #52	; 0x34
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	335c      	adds	r3, #92	; 0x5c
 8002ddc:	681c      	ldr	r4, [r3, #0]
 8002dde:	88bd      	ldrh	r5, [r7, #4]
 8002de0:	f7ff fc3c 	bl	800265c <BSP_LCD_GetXSize>
 8002de4:	4603      	mov	r3, r0
 8002de6:	fb03 f205 	mul.w	r2, r3, r5
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4423      	add	r3, r4
 8002df2:	461a      	mov	r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	6013      	str	r3, [r2, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8002e00:	20000528 	.word	0x20000528
 8002e04:	20000440 	.word	0x20000440

08002e08 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b08b      	sub	sp, #44	; 0x2c
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61bb      	str	r3, [r7, #24]
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	330a      	adds	r3, #10
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	330b      	adds	r3, #11
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	441a      	add	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	041b      	lsls	r3, r3, #16
 8002e42:	441a      	add	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	330d      	adds	r3, #13
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	061b      	lsls	r3, r3, #24
 8002e4c:	4413      	add	r3, r2
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3312      	adds	r3, #18
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3313      	adds	r3, #19
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	441a      	add	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3314      	adds	r3, #20
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	041b      	lsls	r3, r3, #16
 8002e6a:	441a      	add	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3315      	adds	r3, #21
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	061b      	lsls	r3, r3, #24
 8002e74:	4413      	add	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3316      	adds	r3, #22
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3317      	adds	r3, #23
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	441a      	add	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3318      	adds	r3, #24
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	041b      	lsls	r3, r3, #16
 8002e92:	441a      	add	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3319      	adds	r3, #25
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	061b      	lsls	r3, r3, #24
 8002e9c:	4413      	add	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	331c      	adds	r3, #28
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	331d      	adds	r3, #29
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	021b      	lsls	r3, r3, #8
 8002eb0:	4413      	add	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002eb4:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <BSP_LCD_DrawBitmap+0x15c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a2b      	ldr	r2, [pc, #172]	; (8002f68 <BSP_LCD_DrawBitmap+0x160>)
 8002eba:	2134      	movs	r1, #52	; 0x34
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	335c      	adds	r3, #92	; 0x5c
 8002ec4:	681c      	ldr	r4, [r3, #0]
 8002ec6:	f7ff fbc9 	bl	800265c <BSP_LCD_GetXSize>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	fb03 f202 	mul.w	r2, r3, r2
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4423      	add	r3, r4
 8002eda:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	3b20      	subs	r3, #32
 8002ee0:	2b07      	cmp	r3, #7
 8002ee2:	d802      	bhi.n	8002eea <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	e008      	b.n	8002efc <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	3b10      	subs	r3, #16
 8002eee:	2b07      	cmp	r3, #7
 8002ef0:	d802      	bhi.n	8002ef8 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	e001      	b.n	8002efc <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	08d2      	lsrs	r2, r2, #3
 8002f0a:	fb03 f202 	mul.w	r2, r3, r2
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	4413      	add	r3, r2
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	4413      	add	r3, r2
 8002f16:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1c:	e018      	b.n	8002f50 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8002f1e:	6a39      	ldr	r1, [r7, #32]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 fad9 	bl	80034dc <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8002f2a:	f7ff fb97 	bl	800265c <BSP_LCD_GetXSize>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	6a3a      	ldr	r2, [r7, #32]
 8002f34:	4413      	add	r3, r2
 8002f36:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	08db      	lsrs	r3, r3, #3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	425b      	negs	r3, r3
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	4413      	add	r3, r2
 8002f48:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d3e2      	bcc.n	8002f1e <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8002f58:	bf00      	nop
 8002f5a:	bf00      	nop
 8002f5c:	372c      	adds	r7, #44	; 0x2c
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd90      	pop	{r4, r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000528 	.word	0x20000528
 8002f68:	20000440 	.word	0x20000440

08002f6c <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	80fb      	strh	r3, [r7, #6]
 8002f76:	460b      	mov	r3, r1
 8002f78:	80bb      	strh	r3, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002f7e:	887b      	ldrh	r3, [r7, #2]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	f1c3 0303 	rsb	r3, r3, #3
 8002f86:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002f8c:	887b      	ldrh	r3, [r7, #2]
 8002f8e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002f90:	4b44      	ldr	r3, [pc, #272]	; (80030a4 <BSP_LCD_FillCircle+0x138>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4944      	ldr	r1, [pc, #272]	; (80030a8 <BSP_LCD_FillCircle+0x13c>)
 8002f96:	4613      	mov	r3, r2
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fbf2 	bl	800278c <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8002fa8:	e061      	b.n	800306e <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d021      	beq.n	8002ff4 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	88fa      	ldrh	r2, [r7, #6]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	b298      	uxth	r0, r3
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	88bb      	ldrh	r3, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	b299      	uxth	r1, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f7ff fd8b 	bl	8002ae8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	88fa      	ldrh	r2, [r7, #6]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	b298      	uxth	r0, r3
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	88ba      	ldrh	r2, [r7, #4]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	b299      	uxth	r1, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f7ff fd7a 	bl	8002ae8 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d021      	beq.n	800303e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	88fa      	ldrh	r2, [r7, #6]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	b298      	uxth	r0, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	b29b      	uxth	r3, r3
 8003008:	88ba      	ldrh	r2, [r7, #4]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	b299      	uxth	r1, r3
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	b29b      	uxth	r3, r3
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	b29b      	uxth	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	f7ff fd66 	bl	8002ae8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	b29b      	uxth	r3, r3
 8003020:	88fa      	ldrh	r2, [r7, #6]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	b298      	uxth	r0, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	b29a      	uxth	r2, r3
 800302a:	88bb      	ldrh	r3, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	b299      	uxth	r1, r3
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	b29b      	uxth	r3, r3
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	b29b      	uxth	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	f7ff fd55 	bl	8002ae8 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b00      	cmp	r3, #0
 8003042:	da06      	bge.n	8003052 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	009a      	lsls	r2, r3, #2
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	4413      	add	r3, r2
 800304c:	3306      	adds	r3, #6
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	e00a      	b.n	8003068 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	009a      	lsls	r2, r3, #2
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	4413      	add	r3, r2
 800305e:	330a      	adds	r3, #10
 8003060:	617b      	str	r3, [r7, #20]
      current_y--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	3b01      	subs	r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	3301      	adds	r3, #1
 800306c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	429a      	cmp	r2, r3
 8003074:	d999      	bls.n	8002faa <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003076:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <BSP_LCD_FillCircle+0x138>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	490b      	ldr	r1, [pc, #44]	; (80030a8 <BSP_LCD_FillCircle+0x13c>)
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fb7f 	bl	800278c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800308e:	887a      	ldrh	r2, [r7, #2]
 8003090:	88b9      	ldrh	r1, [r7, #4]
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fd85 	bl	8002ba4 <BSP_LCD_DrawCircle>
}
 800309a:	bf00      	nop
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000528 	.word	0x20000528
 80030a8:	2000052c 	.word	0x2000052c

080030ac <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80030b0:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <BSP_LCD_DisplayOn+0x30>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <BSP_LCD_DisplayOn+0x30>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80030c0:	2201      	movs	r2, #1
 80030c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030c6:	4806      	ldr	r0, [pc, #24]	; (80030e0 <BSP_LCD_DisplayOn+0x34>)
 80030c8:	f003 f9dc 	bl	8006484 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80030cc:	2201      	movs	r2, #1
 80030ce:	2108      	movs	r1, #8
 80030d0:	4804      	ldr	r0, [pc, #16]	; (80030e4 <BSP_LCD_DisplayOn+0x38>)
 80030d2:	f003 f9d7 	bl	8006484 <HAL_GPIO_WritePin>
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000440 	.word	0x20000440
 80030e0:	40022000 	.word	0x40022000
 80030e4:	40022800 	.word	0x40022800

080030e8 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b090      	sub	sp, #64	; 0x40
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80030f2:	4b64      	ldr	r3, [pc, #400]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	4a63      	ldr	r2, [pc, #396]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 80030f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030fc:	6453      	str	r3, [r2, #68]	; 0x44
 80030fe:	4b61      	ldr	r3, [pc, #388]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003106:	62bb      	str	r3, [r7, #40]	; 0x28
 8003108:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800310a:	4b5e      	ldr	r3, [pc, #376]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	4a5d      	ldr	r2, [pc, #372]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 8003110:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003114:	6313      	str	r3, [r2, #48]	; 0x30
 8003116:	4b5b      	ldr	r3, [pc, #364]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003122:	4b58      	ldr	r3, [pc, #352]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a57      	ldr	r2, [pc, #348]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 8003128:	f043 0310 	orr.w	r3, r3, #16
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b55      	ldr	r3, [pc, #340]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	623b      	str	r3, [r7, #32]
 8003138:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800313a:	4b52      	ldr	r3, [pc, #328]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	4a51      	ldr	r2, [pc, #324]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 8003140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003144:	6313      	str	r3, [r2, #48]	; 0x30
 8003146:	4b4f      	ldr	r3, [pc, #316]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314e:	61fb      	str	r3, [r7, #28]
 8003150:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003152:	4b4c      	ldr	r3, [pc, #304]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	4a4b      	ldr	r2, [pc, #300]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315c:	6313      	str	r3, [r2, #48]	; 0x30
 800315e:	4b49      	ldr	r3, [pc, #292]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003166:	61bb      	str	r3, [r7, #24]
 8003168:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800316a:	4b46      	ldr	r3, [pc, #280]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	4a45      	ldr	r2, [pc, #276]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 8003170:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003174:	6313      	str	r3, [r2, #48]	; 0x30
 8003176:	4b43      	ldr	r3, [pc, #268]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003182:	4b40      	ldr	r3, [pc, #256]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	4a3f      	ldr	r2, [pc, #252]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 8003188:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800318c:	6313      	str	r3, [r2, #48]	; 0x30
 800318e:	4b3d      	ldr	r3, [pc, #244]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800319a:	4b3a      	ldr	r3, [pc, #232]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	4a39      	ldr	r2, [pc, #228]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 80031a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a4:	6313      	str	r3, [r2, #48]	; 0x30
 80031a6:	4b37      	ldr	r3, [pc, #220]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80031b2:	4b34      	ldr	r3, [pc, #208]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a33      	ldr	r2, [pc, #204]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 80031b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b31      	ldr	r3, [pc, #196]	; (8003284 <BSP_LCD_MspInit+0x19c>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80031ca:	2310      	movs	r3, #16
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80031ce:	2302      	movs	r3, #2
 80031d0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80031d6:	2302      	movs	r3, #2
 80031d8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80031da:	230e      	movs	r3, #14
 80031dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80031de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031e2:	4619      	mov	r1, r3
 80031e4:	4828      	ldr	r0, [pc, #160]	; (8003288 <BSP_LCD_MspInit+0x1a0>)
 80031e6:	f002 fe7d 	bl	8005ee4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80031ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80031f0:	2302      	movs	r3, #2
 80031f2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80031f4:	2309      	movs	r3, #9
 80031f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80031f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031fc:	4619      	mov	r1, r3
 80031fe:	4823      	ldr	r0, [pc, #140]	; (800328c <BSP_LCD_MspInit+0x1a4>)
 8003200:	f002 fe70 	bl	8005ee4 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003204:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003208:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800320a:	2302      	movs	r3, #2
 800320c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800320e:	230e      	movs	r3, #14
 8003210:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003216:	4619      	mov	r1, r3
 8003218:	481d      	ldr	r0, [pc, #116]	; (8003290 <BSP_LCD_MspInit+0x1a8>)
 800321a:	f002 fe63 	bl	8005ee4 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800321e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003222:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003224:	2302      	movs	r3, #2
 8003226:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003228:	230e      	movs	r3, #14
 800322a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800322c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003230:	4619      	mov	r1, r3
 8003232:	4818      	ldr	r0, [pc, #96]	; (8003294 <BSP_LCD_MspInit+0x1ac>)
 8003234:	f002 fe56 	bl	8005ee4 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003238:	23f7      	movs	r3, #247	; 0xf7
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800323c:	2302      	movs	r3, #2
 800323e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003240:	230e      	movs	r3, #14
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003248:	4619      	mov	r1, r3
 800324a:	4813      	ldr	r0, [pc, #76]	; (8003298 <BSP_LCD_MspInit+0x1b0>)
 800324c:	f002 fe4a 	bl	8005ee4 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003256:	2301      	movs	r3, #1
 8003258:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800325a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800325e:	4619      	mov	r1, r3
 8003260:	480b      	ldr	r0, [pc, #44]	; (8003290 <BSP_LCD_MspInit+0x1a8>)
 8003262:	f002 fe3f 	bl	8005ee4 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003266:	2308      	movs	r3, #8
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800326a:	2301      	movs	r3, #1
 800326c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800326e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003272:	4619      	mov	r1, r3
 8003274:	4808      	ldr	r0, [pc, #32]	; (8003298 <BSP_LCD_MspInit+0x1b0>)
 8003276:	f002 fe35 	bl	8005ee4 <HAL_GPIO_Init>
}
 800327a:	bf00      	nop
 800327c:	3740      	adds	r7, #64	; 0x40
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800
 8003288:	40021000 	.word	0x40021000
 800328c:	40021800 	.word	0x40021800
 8003290:	40022000 	.word	0x40022000
 8003294:	40022400 	.word	0x40022400
 8003298:	40022800 	.word	0x40022800

0800329c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80032a6:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <BSP_LCD_ClockConfig+0x34>)
 80032a8:	2208      	movs	r2, #8
 80032aa:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80032ac:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <BSP_LCD_ClockConfig+0x34>)
 80032ae:	22c0      	movs	r2, #192	; 0xc0
 80032b0:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80032b2:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <BSP_LCD_ClockConfig+0x34>)
 80032b4:	2205      	movs	r2, #5
 80032b6:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <BSP_LCD_ClockConfig+0x34>)
 80032ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80032be:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80032c0:	4803      	ldr	r0, [pc, #12]	; (80032d0 <BSP_LCD_ClockConfig+0x34>)
 80032c2:	f004 ffbb 	bl	800823c <HAL_RCCEx_PeriphCLKConfig>
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000544 	.word	0x20000544

080032d4 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	603a      	str	r2, [r7, #0]
 80032de:	80fb      	strh	r3, [r7, #6]
 80032e0:	460b      	mov	r3, r1
 80032e2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61fb      	str	r3, [r7, #28]
 80032e8:	2300      	movs	r3, #0
 80032ea:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80032ec:	4b53      	ldr	r3, [pc, #332]	; (800343c <DrawChar+0x168>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4953      	ldr	r1, [pc, #332]	; (8003440 <DrawChar+0x16c>)
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	3308      	adds	r3, #8
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	88db      	ldrh	r3, [r3, #6]
 8003302:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003304:	4b4d      	ldr	r3, [pc, #308]	; (800343c <DrawChar+0x168>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	494d      	ldr	r1, [pc, #308]	; (8003440 <DrawChar+0x16c>)
 800330a:	4613      	mov	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	3308      	adds	r3, #8
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	889b      	ldrh	r3, [r3, #4]
 800331a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800331c:	8a3b      	ldrh	r3, [r7, #16]
 800331e:	3307      	adds	r3, #7
 8003320:	2b00      	cmp	r3, #0
 8003322:	da00      	bge.n	8003326 <DrawChar+0x52>
 8003324:	3307      	adds	r3, #7
 8003326:	10db      	asrs	r3, r3, #3
 8003328:	b2db      	uxtb	r3, r3
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	b2da      	uxtb	r2, r3
 800332e:	8a3b      	ldrh	r3, [r7, #16]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	e076      	b.n	800342a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800333c:	8a3b      	ldrh	r3, [r7, #16]
 800333e:	3307      	adds	r3, #7
 8003340:	2b00      	cmp	r3, #0
 8003342:	da00      	bge.n	8003346 <DrawChar+0x72>
 8003344:	3307      	adds	r3, #7
 8003346:	10db      	asrs	r3, r3, #3
 8003348:	461a      	mov	r2, r3
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	fb02 f303 	mul.w	r3, r2, r3
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	4413      	add	r3, r2
 8003354:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003356:	8a3b      	ldrh	r3, [r7, #16]
 8003358:	3307      	adds	r3, #7
 800335a:	2b00      	cmp	r3, #0
 800335c:	da00      	bge.n	8003360 <DrawChar+0x8c>
 800335e:	3307      	adds	r3, #7
 8003360:	10db      	asrs	r3, r3, #3
 8003362:	2b01      	cmp	r3, #1
 8003364:	d002      	beq.n	800336c <DrawChar+0x98>
 8003366:	2b02      	cmp	r3, #2
 8003368:	d004      	beq.n	8003374 <DrawChar+0xa0>
 800336a:	e00c      	b.n	8003386 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	617b      	str	r3, [r7, #20]
      break;
 8003372:	e016      	b.n	80033a2 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	3201      	adds	r2, #1
 800337e:	7812      	ldrb	r2, [r2, #0]
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]
      break;
 8003384:	e00d      	b.n	80033a2 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	041a      	lsls	r2, r3, #16
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	3301      	adds	r3, #1
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	4313      	orrs	r3, r2
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	3202      	adds	r2, #2
 800339a:	7812      	ldrb	r2, [r2, #0]
 800339c:	4313      	orrs	r3, r2
 800339e:	617b      	str	r3, [r7, #20]
      break;
 80033a0:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
 80033a6:	e036      	b.n	8003416 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80033a8:	8a3a      	ldrh	r2, [r7, #16]
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	1ad2      	subs	r2, r2, r3
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	4413      	add	r3, r2
 80033b2:	3b01      	subs	r3, #1
 80033b4:	2201      	movs	r2, #1
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d012      	beq.n	80033ea <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	4413      	add	r3, r2
 80033cc:	b298      	uxth	r0, r3
 80033ce:	4b1b      	ldr	r3, [pc, #108]	; (800343c <DrawChar+0x168>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	491b      	ldr	r1, [pc, #108]	; (8003440 <DrawChar+0x16c>)
 80033d4:	4613      	mov	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	88bb      	ldrh	r3, [r7, #4]
 80033e2:	4619      	mov	r1, r3
 80033e4:	f7ff fcc8 	bl	8002d78 <BSP_LCD_DrawPixel>
 80033e8:	e012      	b.n	8003410 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	4413      	add	r3, r2
 80033f2:	b298      	uxth	r0, r3
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <DrawChar+0x168>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4911      	ldr	r1, [pc, #68]	; (8003440 <DrawChar+0x16c>)
 80033fa:	4613      	mov	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	3304      	adds	r3, #4
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	88bb      	ldrh	r3, [r7, #4]
 800340a:	4619      	mov	r1, r3
 800340c:	f7ff fcb4 	bl	8002d78 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	3301      	adds	r3, #1
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	8a3b      	ldrh	r3, [r7, #16]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	429a      	cmp	r2, r3
 800341c:	d3c4      	bcc.n	80033a8 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800341e:	88bb      	ldrh	r3, [r7, #4]
 8003420:	3301      	adds	r3, #1
 8003422:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	3301      	adds	r3, #1
 8003428:	61fb      	str	r3, [r7, #28]
 800342a:	8a7b      	ldrh	r3, [r7, #18]
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	429a      	cmp	r2, r3
 8003430:	d384      	bcc.n	800333c <DrawChar+0x68>
  }
}
 8003432:	bf00      	nop
 8003434:	bf00      	nop
 8003436:	3720      	adds	r7, #32
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20000528 	.word	0x20000528
 8003440:	2000052c 	.word	0x2000052c

08003444 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af02      	add	r7, sp, #8
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003452:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <LL_FillBuffer+0x88>)
 8003454:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003458:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800345a:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <LL_FillBuffer+0x8c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1d      	ldr	r2, [pc, #116]	; (80034d4 <LL_FillBuffer+0x90>)
 8003460:	2134      	movs	r1, #52	; 0x34
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	4413      	add	r3, r2
 8003468:	3348      	adds	r3, #72	; 0x48
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d103      	bne.n	8003478 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003470:	4b16      	ldr	r3, [pc, #88]	; (80034cc <LL_FillBuffer+0x88>)
 8003472:	2202      	movs	r2, #2
 8003474:	609a      	str	r2, [r3, #8]
 8003476:	e002      	b.n	800347e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003478:	4b14      	ldr	r3, [pc, #80]	; (80034cc <LL_FillBuffer+0x88>)
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800347e:	4a13      	ldr	r2, [pc, #76]	; (80034cc <LL_FillBuffer+0x88>)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003484:	4b11      	ldr	r3, [pc, #68]	; (80034cc <LL_FillBuffer+0x88>)
 8003486:	4a14      	ldr	r2, [pc, #80]	; (80034d8 <LL_FillBuffer+0x94>)
 8003488:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800348a:	4810      	ldr	r0, [pc, #64]	; (80034cc <LL_FillBuffer+0x88>)
 800348c:	f002 f98e 	bl	80057ac <HAL_DMA2D_Init>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d115      	bne.n	80034c2 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003496:	68f9      	ldr	r1, [r7, #12]
 8003498:	480c      	ldr	r0, [pc, #48]	; (80034cc <LL_FillBuffer+0x88>)
 800349a:	f002 fbf5 	bl	8005c88 <HAL_DMA2D_ConfigLayer>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10e      	bne.n	80034c2 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69f9      	ldr	r1, [r7, #28]
 80034ae:	4807      	ldr	r0, [pc, #28]	; (80034cc <LL_FillBuffer+0x88>)
 80034b0:	f002 f9c6 	bl	8005840 <HAL_DMA2D_Start>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d103      	bne.n	80034c2 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80034ba:	210a      	movs	r1, #10
 80034bc:	4803      	ldr	r0, [pc, #12]	; (80034cc <LL_FillBuffer+0x88>)
 80034be:	f002 f9ea 	bl	8005896 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	200004e8 	.word	0x200004e8
 80034d0:	20000528 	.word	0x20000528
 80034d4:	20000440 	.word	0x20000440
 80034d8:	4002b000 	.word	0x4002b000

080034dc <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80034ea:	4b1c      	ldr	r3, [pc, #112]	; (800355c <LL_ConvertLineToARGB8888+0x80>)
 80034ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80034f0:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80034f2:	4b1a      	ldr	r3, [pc, #104]	; (800355c <LL_ConvertLineToARGB8888+0x80>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 80034f8:	4b18      	ldr	r3, [pc, #96]	; (800355c <LL_ConvertLineToARGB8888+0x80>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80034fe:	4b17      	ldr	r3, [pc, #92]	; (800355c <LL_ConvertLineToARGB8888+0x80>)
 8003500:	2200      	movs	r2, #0
 8003502:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8003504:	4b15      	ldr	r3, [pc, #84]	; (800355c <LL_ConvertLineToARGB8888+0x80>)
 8003506:	22ff      	movs	r2, #255	; 0xff
 8003508:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 800350a:	4a14      	ldr	r2, [pc, #80]	; (800355c <LL_ConvertLineToARGB8888+0x80>)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8003510:	4b12      	ldr	r3, [pc, #72]	; (800355c <LL_ConvertLineToARGB8888+0x80>)
 8003512:	2200      	movs	r2, #0
 8003514:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8003516:	4b11      	ldr	r3, [pc, #68]	; (800355c <LL_ConvertLineToARGB8888+0x80>)
 8003518:	4a11      	ldr	r2, [pc, #68]	; (8003560 <LL_ConvertLineToARGB8888+0x84>)
 800351a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800351c:	480f      	ldr	r0, [pc, #60]	; (800355c <LL_ConvertLineToARGB8888+0x80>)
 800351e:	f002 f945 	bl	80057ac <HAL_DMA2D_Init>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d115      	bne.n	8003554 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8003528:	2101      	movs	r1, #1
 800352a:	480c      	ldr	r0, [pc, #48]	; (800355c <LL_ConvertLineToARGB8888+0x80>)
 800352c:	f002 fbac 	bl	8005c88 <HAL_DMA2D_ConfigLayer>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10e      	bne.n	8003554 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8003536:	68f9      	ldr	r1, [r7, #12]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	2301      	movs	r3, #1
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4806      	ldr	r0, [pc, #24]	; (800355c <LL_ConvertLineToARGB8888+0x80>)
 8003542:	f002 f97d 	bl	8005840 <HAL_DMA2D_Start>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800354c:	210a      	movs	r1, #10
 800354e:	4803      	ldr	r0, [pc, #12]	; (800355c <LL_ConvertLineToARGB8888+0x80>)
 8003550:	f002 f9a1 	bl	8005896 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003554:	bf00      	nop
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	200004e8 	.word	0x200004e8
 8003560:	4002b000 	.word	0x4002b000

08003564 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003568:	4b29      	ldr	r3, [pc, #164]	; (8003610 <BSP_SDRAM_Init+0xac>)
 800356a:	4a2a      	ldr	r2, [pc, #168]	; (8003614 <BSP_SDRAM_Init+0xb0>)
 800356c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800356e:	4b2a      	ldr	r3, [pc, #168]	; (8003618 <BSP_SDRAM_Init+0xb4>)
 8003570:	2202      	movs	r2, #2
 8003572:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003574:	4b28      	ldr	r3, [pc, #160]	; (8003618 <BSP_SDRAM_Init+0xb4>)
 8003576:	2207      	movs	r2, #7
 8003578:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800357a:	4b27      	ldr	r3, [pc, #156]	; (8003618 <BSP_SDRAM_Init+0xb4>)
 800357c:	2204      	movs	r2, #4
 800357e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003580:	4b25      	ldr	r3, [pc, #148]	; (8003618 <BSP_SDRAM_Init+0xb4>)
 8003582:	2207      	movs	r2, #7
 8003584:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003586:	4b24      	ldr	r3, [pc, #144]	; (8003618 <BSP_SDRAM_Init+0xb4>)
 8003588:	2202      	movs	r2, #2
 800358a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800358c:	4b22      	ldr	r3, [pc, #136]	; (8003618 <BSP_SDRAM_Init+0xb4>)
 800358e:	2202      	movs	r2, #2
 8003590:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003592:	4b21      	ldr	r3, [pc, #132]	; (8003618 <BSP_SDRAM_Init+0xb4>)
 8003594:	2202      	movs	r2, #2
 8003596:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003598:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <BSP_SDRAM_Init+0xac>)
 800359a:	2200      	movs	r2, #0
 800359c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800359e:	4b1c      	ldr	r3, [pc, #112]	; (8003610 <BSP_SDRAM_Init+0xac>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80035a4:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <BSP_SDRAM_Init+0xac>)
 80035a6:	2204      	movs	r2, #4
 80035a8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80035aa:	4b19      	ldr	r3, [pc, #100]	; (8003610 <BSP_SDRAM_Init+0xac>)
 80035ac:	2210      	movs	r2, #16
 80035ae:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80035b0:	4b17      	ldr	r3, [pc, #92]	; (8003610 <BSP_SDRAM_Init+0xac>)
 80035b2:	2240      	movs	r2, #64	; 0x40
 80035b4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80035b6:	4b16      	ldr	r3, [pc, #88]	; (8003610 <BSP_SDRAM_Init+0xac>)
 80035b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035bc:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80035be:	4b14      	ldr	r3, [pc, #80]	; (8003610 <BSP_SDRAM_Init+0xac>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80035c4:	4b12      	ldr	r3, [pc, #72]	; (8003610 <BSP_SDRAM_Init+0xac>)
 80035c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ca:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80035cc:	4b10      	ldr	r3, [pc, #64]	; (8003610 <BSP_SDRAM_Init+0xac>)
 80035ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80035d4:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <BSP_SDRAM_Init+0xac>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80035da:	2100      	movs	r1, #0
 80035dc:	480c      	ldr	r0, [pc, #48]	; (8003610 <BSP_SDRAM_Init+0xac>)
 80035de:	f000 f87f 	bl	80036e0 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80035e2:	490d      	ldr	r1, [pc, #52]	; (8003618 <BSP_SDRAM_Init+0xb4>)
 80035e4:	480a      	ldr	r0, [pc, #40]	; (8003610 <BSP_SDRAM_Init+0xac>)
 80035e6:	f005 fdef 	bl	80091c8 <HAL_SDRAM_Init>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80035f0:	4b0a      	ldr	r3, [pc, #40]	; (800361c <BSP_SDRAM_Init+0xb8>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	e002      	b.n	80035fe <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80035f8:	4b08      	ldr	r3, [pc, #32]	; (800361c <BSP_SDRAM_Init+0xb8>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80035fe:	f240 6003 	movw	r0, #1539	; 0x603
 8003602:	f000 f80d 	bl	8003620 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003606:	4b05      	ldr	r3, [pc, #20]	; (800361c <BSP_SDRAM_Init+0xb8>)
 8003608:	781b      	ldrb	r3, [r3, #0]
}
 800360a:	4618      	mov	r0, r3
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	200005c8 	.word	0x200005c8
 8003614:	a0000140 	.word	0xa0000140
 8003618:	200005fc 	.word	0x200005fc
 800361c:	20000038 	.word	0x20000038

08003620 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800362c:	4b2a      	ldr	r3, [pc, #168]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800362e:	2201      	movs	r2, #1
 8003630:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003632:	4b29      	ldr	r3, [pc, #164]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003634:	2210      	movs	r2, #16
 8003636:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003638:	4b27      	ldr	r3, [pc, #156]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800363a:	2201      	movs	r2, #1
 800363c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800363e:	4b26      	ldr	r3, [pc, #152]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003640:	2200      	movs	r2, #0
 8003642:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003644:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003648:	4923      	ldr	r1, [pc, #140]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800364a:	4824      	ldr	r0, [pc, #144]	; (80036dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800364c:	f005 fdf0 	bl	8009230 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003650:	2001      	movs	r0, #1
 8003652:	f001 f90d 	bl	8004870 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003656:	4b20      	ldr	r3, [pc, #128]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003658:	2202      	movs	r2, #2
 800365a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800365c:	4b1e      	ldr	r3, [pc, #120]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800365e:	2210      	movs	r2, #16
 8003660:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003662:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003664:	2201      	movs	r2, #1
 8003666:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003668:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800366a:	2200      	movs	r2, #0
 800366c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800366e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003672:	4919      	ldr	r1, [pc, #100]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003674:	4819      	ldr	r0, [pc, #100]	; (80036dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003676:	f005 fddb 	bl	8009230 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800367a:	4b17      	ldr	r3, [pc, #92]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800367c:	2203      	movs	r2, #3
 800367e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003680:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003682:	2210      	movs	r2, #16
 8003684:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003686:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003688:	2208      	movs	r2, #8
 800368a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800368c:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800368e:	2200      	movs	r2, #0
 8003690:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003696:	4910      	ldr	r1, [pc, #64]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003698:	4810      	ldr	r0, [pc, #64]	; (80036dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800369a:	f005 fdc9 	bl	8009230 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800369e:	f44f 7308 	mov.w	r3, #544	; 0x220
 80036a2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036a6:	2204      	movs	r2, #4
 80036a8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036ac:	2210      	movs	r2, #16
 80036ae:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80036b0:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4a07      	ldr	r2, [pc, #28]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036ba:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80036bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036c0:	4905      	ldr	r1, [pc, #20]	; (80036d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036c2:	4806      	ldr	r0, [pc, #24]	; (80036dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036c4:	f005 fdb4 	bl	8009230 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	4804      	ldr	r0, [pc, #16]	; (80036dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036cc:	f005 fde5 	bl	800929a <HAL_SDRAM_ProgramRefreshRate>
}
 80036d0:	bf00      	nop
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	20000618 	.word	0x20000618
 80036dc:	200005c8 	.word	0x200005c8

080036e0 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b090      	sub	sp, #64	; 0x40
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80036ea:	4b70      	ldr	r3, [pc, #448]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	4a6f      	ldr	r2, [pc, #444]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	6393      	str	r3, [r2, #56]	; 0x38
 80036f6:	4b6d      	ldr	r3, [pc, #436]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003702:	4b6a      	ldr	r3, [pc, #424]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	4a69      	ldr	r2, [pc, #420]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 8003708:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800370c:	6313      	str	r3, [r2, #48]	; 0x30
 800370e:	4b67      	ldr	r3, [pc, #412]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800371a:	4b64      	ldr	r3, [pc, #400]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	4a63      	ldr	r2, [pc, #396]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	6313      	str	r3, [r2, #48]	; 0x30
 8003726:	4b61      	ldr	r3, [pc, #388]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	623b      	str	r3, [r7, #32]
 8003730:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003732:	4b5e      	ldr	r3, [pc, #376]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	4a5d      	ldr	r2, [pc, #372]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 8003738:	f043 0308 	orr.w	r3, r3, #8
 800373c:	6313      	str	r3, [r2, #48]	; 0x30
 800373e:	4b5b      	ldr	r3, [pc, #364]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	61fb      	str	r3, [r7, #28]
 8003748:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800374a:	4b58      	ldr	r3, [pc, #352]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	4a57      	ldr	r2, [pc, #348]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 8003750:	f043 0310 	orr.w	r3, r3, #16
 8003754:	6313      	str	r3, [r2, #48]	; 0x30
 8003756:	4b55      	ldr	r3, [pc, #340]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003762:	4b52      	ldr	r3, [pc, #328]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	4a51      	ldr	r2, [pc, #324]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 8003768:	f043 0320 	orr.w	r3, r3, #32
 800376c:	6313      	str	r3, [r2, #48]	; 0x30
 800376e:	4b4f      	ldr	r3, [pc, #316]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800377a:	4b4c      	ldr	r3, [pc, #304]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	4a4b      	ldr	r2, [pc, #300]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 8003780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003784:	6313      	str	r3, [r2, #48]	; 0x30
 8003786:	4b49      	ldr	r3, [pc, #292]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003792:	4b46      	ldr	r3, [pc, #280]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	4a45      	ldr	r2, [pc, #276]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 8003798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800379c:	6313      	str	r3, [r2, #48]	; 0x30
 800379e:	4b43      	ldr	r3, [pc, #268]	; (80038ac <BSP_SDRAM_MspInit+0x1cc>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80037aa:	2302      	movs	r3, #2
 80037ac:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80037ae:	2301      	movs	r3, #1
 80037b0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80037b2:	2302      	movs	r3, #2
 80037b4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80037b6:	230c      	movs	r3, #12
 80037b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80037ba:	2308      	movs	r3, #8
 80037bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80037be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037c2:	4619      	mov	r1, r3
 80037c4:	483a      	ldr	r0, [pc, #232]	; (80038b0 <BSP_SDRAM_MspInit+0x1d0>)
 80037c6:	f002 fb8d 	bl	8005ee4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80037ca:	f24c 7303 	movw	r3, #50947	; 0xc703
 80037ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80037d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037d4:	4619      	mov	r1, r3
 80037d6:	4837      	ldr	r0, [pc, #220]	; (80038b4 <BSP_SDRAM_MspInit+0x1d4>)
 80037d8:	f002 fb84 	bl	8005ee4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80037dc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80037e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037e6:	4619      	mov	r1, r3
 80037e8:	4833      	ldr	r0, [pc, #204]	; (80038b8 <BSP_SDRAM_MspInit+0x1d8>)
 80037ea:	f002 fb7b 	bl	8005ee4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80037ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80037f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037f8:	4619      	mov	r1, r3
 80037fa:	4830      	ldr	r0, [pc, #192]	; (80038bc <BSP_SDRAM_MspInit+0x1dc>)
 80037fc:	f002 fb72 	bl	8005ee4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003800:	f248 1333 	movw	r3, #33075	; 0x8133
 8003804:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800380a:	4619      	mov	r1, r3
 800380c:	482c      	ldr	r0, [pc, #176]	; (80038c0 <BSP_SDRAM_MspInit+0x1e0>)
 800380e:	f002 fb69 	bl	8005ee4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003812:	2328      	movs	r3, #40	; 0x28
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800381a:	4619      	mov	r1, r3
 800381c:	4829      	ldr	r0, [pc, #164]	; (80038c4 <BSP_SDRAM_MspInit+0x1e4>)
 800381e:	f002 fb61 	bl	8005ee4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003822:	4b29      	ldr	r3, [pc, #164]	; (80038c8 <BSP_SDRAM_MspInit+0x1e8>)
 8003824:	2200      	movs	r2, #0
 8003826:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003828:	4b27      	ldr	r3, [pc, #156]	; (80038c8 <BSP_SDRAM_MspInit+0x1e8>)
 800382a:	2280      	movs	r2, #128	; 0x80
 800382c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800382e:	4b26      	ldr	r3, [pc, #152]	; (80038c8 <BSP_SDRAM_MspInit+0x1e8>)
 8003830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003834:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003836:	4b24      	ldr	r3, [pc, #144]	; (80038c8 <BSP_SDRAM_MspInit+0x1e8>)
 8003838:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800383c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800383e:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <BSP_SDRAM_MspInit+0x1e8>)
 8003840:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003844:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003846:	4b20      	ldr	r3, [pc, #128]	; (80038c8 <BSP_SDRAM_MspInit+0x1e8>)
 8003848:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800384c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800384e:	4b1e      	ldr	r3, [pc, #120]	; (80038c8 <BSP_SDRAM_MspInit+0x1e8>)
 8003850:	2200      	movs	r2, #0
 8003852:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003854:	4b1c      	ldr	r3, [pc, #112]	; (80038c8 <BSP_SDRAM_MspInit+0x1e8>)
 8003856:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800385a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800385c:	4b1a      	ldr	r3, [pc, #104]	; (80038c8 <BSP_SDRAM_MspInit+0x1e8>)
 800385e:	2200      	movs	r2, #0
 8003860:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003862:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <BSP_SDRAM_MspInit+0x1e8>)
 8003864:	2203      	movs	r2, #3
 8003866:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003868:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <BSP_SDRAM_MspInit+0x1e8>)
 800386a:	2200      	movs	r2, #0
 800386c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800386e:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <BSP_SDRAM_MspInit+0x1e8>)
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003874:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <BSP_SDRAM_MspInit+0x1e8>)
 8003876:	4a15      	ldr	r2, [pc, #84]	; (80038cc <BSP_SDRAM_MspInit+0x1ec>)
 8003878:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a12      	ldr	r2, [pc, #72]	; (80038c8 <BSP_SDRAM_MspInit+0x1e8>)
 800387e:	631a      	str	r2, [r3, #48]	; 0x30
 8003880:	4a11      	ldr	r2, [pc, #68]	; (80038c8 <BSP_SDRAM_MspInit+0x1e8>)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003886:	4810      	ldr	r0, [pc, #64]	; (80038c8 <BSP_SDRAM_MspInit+0x1e8>)
 8003888:	f001 fe80 	bl	800558c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800388c:	480e      	ldr	r0, [pc, #56]	; (80038c8 <BSP_SDRAM_MspInit+0x1e8>)
 800388e:	f001 fdcf 	bl	8005430 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003892:	2200      	movs	r2, #0
 8003894:	210f      	movs	r1, #15
 8003896:	2038      	movs	r0, #56	; 0x38
 8003898:	f001 fcc0 	bl	800521c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800389c:	2038      	movs	r0, #56	; 0x38
 800389e:	f001 fcd9 	bl	8005254 <HAL_NVIC_EnableIRQ>
}
 80038a2:	bf00      	nop
 80038a4:	3740      	adds	r7, #64	; 0x40
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40020800 	.word	0x40020800
 80038b4:	40020c00 	.word	0x40020c00
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40021400 	.word	0x40021400
 80038c0:	40021800 	.word	0x40021800
 80038c4:	40021c00 	.word	0x40021c00
 80038c8:	20000628 	.word	0x20000628
 80038cc:	40026410 	.word	0x40026410

080038d0 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	460a      	mov	r2, r1
 80038da:	80fb      	strh	r3, [r7, #6]
 80038dc:	4613      	mov	r3, r2
 80038de:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80038e4:	4a14      	ldr	r2, [pc, #80]	; (8003938 <BSP_TS_Init+0x68>)
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80038ea:	4a14      	ldr	r2, [pc, #80]	; (800393c <BSP_TS_Init+0x6c>)
 80038ec:	88bb      	ldrh	r3, [r7, #4]
 80038ee:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80038f0:	4b13      	ldr	r3, [pc, #76]	; (8003940 <BSP_TS_Init+0x70>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2070      	movs	r0, #112	; 0x70
 80038f6:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80038f8:	4b11      	ldr	r3, [pc, #68]	; (8003940 <BSP_TS_Init+0x70>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2070      	movs	r0, #112	; 0x70
 80038fe:	4798      	blx	r3
 8003900:	4603      	mov	r3, r0
 8003902:	2b51      	cmp	r3, #81	; 0x51
 8003904:	d111      	bne.n	800392a <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003906:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <BSP_TS_Init+0x74>)
 8003908:	4a0d      	ldr	r2, [pc, #52]	; (8003940 <BSP_TS_Init+0x70>)
 800390a:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800390c:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <BSP_TS_Init+0x78>)
 800390e:	2270      	movs	r2, #112	; 0x70
 8003910:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003912:	4b0e      	ldr	r3, [pc, #56]	; (800394c <BSP_TS_Init+0x7c>)
 8003914:	2208      	movs	r2, #8
 8003916:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003918:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <BSP_TS_Init+0x74>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <BSP_TS_Init+0x78>)
 8003920:	7812      	ldrb	r2, [r2, #0]
 8003922:	b292      	uxth	r2, r2
 8003924:	4610      	mov	r0, r2
 8003926:	4798      	blx	r3
 8003928:	e001      	b.n	800392e <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800392a:	2303      	movs	r3, #3
 800392c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800392e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	2000068c 	.word	0x2000068c
 800393c:	2000068e 	.word	0x2000068e
 8003940:	20000000 	.word	0x20000000
 8003944:	20000688 	.word	0x20000688
 8003948:	20000691 	.word	0x20000691
 800394c:	20000690 	.word	0x20000690

08003950 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8003950:	b590      	push	{r4, r7, lr}
 8003952:	b097      	sub	sp, #92	; 0x5c
 8003954:	af02      	add	r7, sp, #8
 8003956:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800396a:	4bb4      	ldr	r3, [pc, #720]	; (8003c3c <BSP_TS_GetState+0x2ec>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	4ab3      	ldr	r2, [pc, #716]	; (8003c40 <BSP_TS_GetState+0x2f0>)
 8003972:	7812      	ldrb	r2, [r2, #0]
 8003974:	b292      	uxth	r2, r2
 8003976:	4610      	mov	r0, r2
 8003978:	4798      	blx	r3
 800397a:	4603      	mov	r3, r0
 800397c:	461a      	mov	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 8196 	beq.w	8003cb8 <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800398c:	2300      	movs	r3, #0
 800398e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003990:	e185      	b.n	8003c9e <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8003992:	4baa      	ldr	r3, [pc, #680]	; (8003c3c <BSP_TS_GetState+0x2ec>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	4aa9      	ldr	r2, [pc, #676]	; (8003c40 <BSP_TS_GetState+0x2f0>)
 800399a:	7812      	ldrb	r2, [r2, #0]
 800399c:	b290      	uxth	r0, r2
 800399e:	f107 0120 	add.w	r1, r7, #32
 80039a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039a4:	0052      	lsls	r2, r2, #1
 80039a6:	188c      	adds	r4, r1, r2
 80039a8:	f107 0114 	add.w	r1, r7, #20
 80039ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039ae:	0052      	lsls	r2, r2, #1
 80039b0:	440a      	add	r2, r1
 80039b2:	4621      	mov	r1, r4
 80039b4:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80039b6:	4ba3      	ldr	r3, [pc, #652]	; (8003c44 <BSP_TS_GetState+0x2f4>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d117      	bne.n	80039ee <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 80039be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	3350      	adds	r3, #80	; 0x50
 80039c4:	443b      	add	r3, r7
 80039c6:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80039ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	3350      	adds	r3, #80	; 0x50
 80039d0:	443b      	add	r3, r7
 80039d2:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 80039d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	3350      	adds	r3, #80	; 0x50
 80039dc:	443b      	add	r3, r7
 80039de:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80039e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	3350      	adds	r3, #80	; 0x50
 80039e8:	443b      	add	r3, r7
 80039ea:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 80039ee:	4b95      	ldr	r3, [pc, #596]	; (8003c44 <BSP_TS_GetState+0x2f4>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00e      	beq.n	8003a18 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 80039fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	3350      	adds	r3, #80	; 0x50
 8003a00:	443b      	add	r3, r7
 8003a02:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8003a06:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	3350      	adds	r3, #80	; 0x50
 8003a12:	443b      	add	r3, r7
 8003a14:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8003a18:	4b8a      	ldr	r3, [pc, #552]	; (8003c44 <BSP_TS_GetState+0x2f4>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00e      	beq.n	8003a42 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8003a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	3350      	adds	r3, #80	; 0x50
 8003a2a:	443b      	add	r3, r7
 8003a2c:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8003a30:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	3350      	adds	r3, #80	; 0x50
 8003a3c:	443b      	add	r3, r7
 8003a3e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8003a42:	4b80      	ldr	r3, [pc, #512]	; (8003c44 <BSP_TS_GetState+0x2f4>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d017      	beq.n	8003a7e <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8003a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	3350      	adds	r3, #80	; 0x50
 8003a54:	443b      	add	r3, r7
 8003a56:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	3350      	adds	r3, #80	; 0x50
 8003a60:	443b      	add	r3, r7
 8003a62:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8003a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	3350      	adds	r3, #80	; 0x50
 8003a6c:	443b      	add	r3, r7
 8003a6e:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	3350      	adds	r3, #80	; 0x50
 8003a78:	443b      	add	r3, r7
 8003a7a:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	3350      	adds	r3, #80	; 0x50
 8003a84:	443b      	add	r3, r7
 8003a86:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4a6e      	ldr	r2, [pc, #440]	; (8003c48 <BSP_TS_GetState+0x2f8>)
 8003a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a94:	4299      	cmp	r1, r3
 8003a96:	d90d      	bls.n	8003ab4 <BSP_TS_GetState+0x164>
 8003a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	3350      	adds	r3, #80	; 0x50
 8003a9e:	443b      	add	r3, r7
 8003aa0:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8003aa4:	4968      	ldr	r1, [pc, #416]	; (8003c48 <BSP_TS_GetState+0x2f8>)
 8003aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	e00c      	b.n	8003ace <BSP_TS_GetState+0x17e>
 8003ab4:	4a64      	ldr	r2, [pc, #400]	; (8003c48 <BSP_TS_GetState+0x2f8>)
 8003ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	3350      	adds	r3, #80	; 0x50
 8003ac4:	443b      	add	r3, r7
 8003ac6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	3350      	adds	r3, #80	; 0x50
 8003ad8:	443b      	add	r3, r7
 8003ada:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4a5a      	ldr	r2, [pc, #360]	; (8003c4c <BSP_TS_GetState+0x2fc>)
 8003ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae8:	4299      	cmp	r1, r3
 8003aea:	d90d      	bls.n	8003b08 <BSP_TS_GetState+0x1b8>
 8003aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	3350      	adds	r3, #80	; 0x50
 8003af2:	443b      	add	r3, r7
 8003af4:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003af8:	4954      	ldr	r1, [pc, #336]	; (8003c4c <BSP_TS_GetState+0x2fc>)
 8003afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003afc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	e00c      	b.n	8003b22 <BSP_TS_GetState+0x1d2>
 8003b08:	4a50      	ldr	r2, [pc, #320]	; (8003c4c <BSP_TS_GetState+0x2fc>)
 8003b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	3350      	adds	r3, #80	; 0x50
 8003b18:	443b      	add	r3, r7
 8003b1a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8003b26:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003b2a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003b2e:	4413      	add	r3, r2
 8003b30:	2b05      	cmp	r3, #5
 8003b32:	dd15      	ble.n	8003b60 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8003b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	3350      	adds	r3, #80	; 0x50
 8003b3a:	443b      	add	r3, r7
 8003b3c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003b40:	4619      	mov	r1, r3
 8003b42:	4a41      	ldr	r2, [pc, #260]	; (8003c48 <BSP_TS_GetState+0x2f8>)
 8003b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8003b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	3350      	adds	r3, #80	; 0x50
 8003b50:	443b      	add	r3, r7
 8003b52:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003b56:	4619      	mov	r1, r3
 8003b58:	4a3c      	ldr	r2, [pc, #240]	; (8003c4c <BSP_TS_GetState+0x2fc>)
 8003b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8003b60:	4b37      	ldr	r3, [pc, #220]	; (8003c40 <BSP_TS_GetState+0x2f0>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b70      	cmp	r3, #112	; 0x70
 8003b66:	d119      	bne.n	8003b9c <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8003b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	3350      	adds	r3, #80	; 0x50
 8003b6e:	443b      	add	r3, r7
 8003b70:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	4413      	add	r3, r2
 8003b7c:	460a      	mov	r2, r1
 8003b7e:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8003b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	3350      	adds	r3, #80	; 0x50
 8003b86:	443b      	add	r3, r7
 8003b88:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b90:	3304      	adds	r3, #4
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	4413      	add	r3, r2
 8003b96:	460a      	mov	r2, r1
 8003b98:	809a      	strh	r2, [r3, #4]
 8003b9a:	e022      	b.n	8003be2 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003b9c:	4b2c      	ldr	r3, [pc, #176]	; (8003c50 <BSP_TS_GetState+0x300>)
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4a29      	ldr	r2, [pc, #164]	; (8003c48 <BSP_TS_GetState+0x2f8>)
 8003ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	0b1b      	lsrs	r3, r3, #12
 8003bb0:	b299      	uxth	r1, r3
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	4413      	add	r3, r2
 8003bba:	460a      	mov	r2, r1
 8003bbc:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8003bbe:	4b25      	ldr	r3, [pc, #148]	; (8003c54 <BSP_TS_GetState+0x304>)
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4a21      	ldr	r2, [pc, #132]	; (8003c4c <BSP_TS_GetState+0x2fc>)
 8003bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	0b1b      	lsrs	r3, r3, #12
 8003bd2:	b299      	uxth	r1, r3
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bd8:	3304      	adds	r3, #4
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	4413      	add	r3, r2
 8003bde:	460a      	mov	r2, r1
 8003be0:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8003be2:	4b17      	ldr	r3, [pc, #92]	; (8003c40 <BSP_TS_GetState+0x2f0>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	b298      	uxth	r0, r3
 8003be8:	f107 010c 	add.w	r1, r7, #12
 8003bec:	f107 0210 	add.w	r2, r7, #16
 8003bf0:	f107 0308 	add.w	r3, r7, #8
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003bfa:	f7fd f96b 	bl	8000ed4 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	b2d9      	uxtb	r1, r3
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c06:	4413      	add	r3, r2
 8003c08:	3316      	adds	r3, #22
 8003c0a:	460a      	mov	r2, r1
 8003c0c:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	b2d9      	uxtb	r1, r3
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c16:	4413      	add	r3, r2
 8003c18:	3320      	adds	r3, #32
 8003c1a:	460a      	mov	r2, r1
 8003c1c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d835      	bhi.n	8003c90 <BSP_TS_GetState+0x340>
 8003c24:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <BSP_TS_GetState+0x2dc>)
 8003c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2a:	bf00      	nop
 8003c2c:	08003c59 	.word	0x08003c59
 8003c30:	08003c67 	.word	0x08003c67
 8003c34:	08003c75 	.word	0x08003c75
 8003c38:	08003c83 	.word	0x08003c83
 8003c3c:	20000688 	.word	0x20000688
 8003c40:	20000691 	.word	0x20000691
 8003c44:	20000690 	.word	0x20000690
 8003c48:	20000694 	.word	0x20000694
 8003c4c:	200006a8 	.word	0x200006a8
 8003c50:	2000068c 	.word	0x2000068c
 8003c54:	2000068e 	.word	0x2000068e
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5c:	4413      	add	r3, r2
 8003c5e:	331b      	adds	r3, #27
 8003c60:	2201      	movs	r2, #1
 8003c62:	701a      	strb	r2, [r3, #0]
          break;
 8003c64:	e018      	b.n	8003c98 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c6a:	4413      	add	r3, r2
 8003c6c:	331b      	adds	r3, #27
 8003c6e:	2202      	movs	r2, #2
 8003c70:	701a      	strb	r2, [r3, #0]
          break;
 8003c72:	e011      	b.n	8003c98 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c78:	4413      	add	r3, r2
 8003c7a:	331b      	adds	r3, #27
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	701a      	strb	r2, [r3, #0]
          break;
 8003c80:	e00a      	b.n	8003c98 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c86:	4413      	add	r3, r2
 8003c88:	331b      	adds	r3, #27
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	701a      	strb	r2, [r3, #0]
          break;
 8003c8e:	e003      	b.n	8003c98 <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8003c96:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8003c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	f4ff ae73 	bcc.w	8003992 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f809 	bl	8003cc4 <BSP_TS_Get_GestureId>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8003cb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3754      	adds	r7, #84	; 0x54
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd90      	pop	{r4, r7, pc}

08003cc4 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8003cd4:	4b3b      	ldr	r3, [pc, #236]	; (8003dc4 <BSP_TS_Get_GestureId+0x100>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	f107 0208 	add.w	r2, r7, #8
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fd f8de 	bl	8000ea2 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b49      	cmp	r3, #73	; 0x49
 8003cea:	d05e      	beq.n	8003daa <BSP_TS_Get_GestureId+0xe6>
 8003cec:	2b49      	cmp	r3, #73	; 0x49
 8003cee:	d860      	bhi.n	8003db2 <BSP_TS_Get_GestureId+0xee>
 8003cf0:	2b1c      	cmp	r3, #28
 8003cf2:	d83f      	bhi.n	8003d74 <BSP_TS_Get_GestureId+0xb0>
 8003cf4:	2b1c      	cmp	r3, #28
 8003cf6:	d85c      	bhi.n	8003db2 <BSP_TS_Get_GestureId+0xee>
 8003cf8:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <BSP_TS_Get_GestureId+0x3c>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d7b 	.word	0x08003d7b
 8003d04:	08003db3 	.word	0x08003db3
 8003d08:	08003db3 	.word	0x08003db3
 8003d0c:	08003db3 	.word	0x08003db3
 8003d10:	08003db3 	.word	0x08003db3
 8003d14:	08003db3 	.word	0x08003db3
 8003d18:	08003db3 	.word	0x08003db3
 8003d1c:	08003db3 	.word	0x08003db3
 8003d20:	08003db3 	.word	0x08003db3
 8003d24:	08003db3 	.word	0x08003db3
 8003d28:	08003db3 	.word	0x08003db3
 8003d2c:	08003db3 	.word	0x08003db3
 8003d30:	08003db3 	.word	0x08003db3
 8003d34:	08003db3 	.word	0x08003db3
 8003d38:	08003db3 	.word	0x08003db3
 8003d3c:	08003db3 	.word	0x08003db3
 8003d40:	08003d83 	.word	0x08003d83
 8003d44:	08003db3 	.word	0x08003db3
 8003d48:	08003db3 	.word	0x08003db3
 8003d4c:	08003db3 	.word	0x08003db3
 8003d50:	08003d8b 	.word	0x08003d8b
 8003d54:	08003db3 	.word	0x08003db3
 8003d58:	08003db3 	.word	0x08003db3
 8003d5c:	08003db3 	.word	0x08003db3
 8003d60:	08003d93 	.word	0x08003d93
 8003d64:	08003db3 	.word	0x08003db3
 8003d68:	08003db3 	.word	0x08003db3
 8003d6c:	08003db3 	.word	0x08003db3
 8003d70:	08003d9b 	.word	0x08003d9b
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d014      	beq.n	8003da2 <BSP_TS_Get_GestureId+0xde>
 8003d78:	e01b      	b.n	8003db2 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003d80:	e01a      	b.n	8003db8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003d88:	e016      	b.n	8003db8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003d90:	e012      	b.n	8003db8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2203      	movs	r2, #3
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003d98:	e00e      	b.n	8003db8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003da0:	e00a      	b.n	8003db8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2205      	movs	r2, #5
 8003da6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003da8:	e006      	b.n	8003db8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2206      	movs	r2, #6
 8003dae:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003db0:	e002      	b.n	8003db8 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
      break;
 8003db6:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000691 	.word	0x20000691

08003dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dce:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <HAL_MspInit+0x44>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4a0e      	ldr	r2, [pc, #56]	; (8003e0c <HAL_MspInit+0x44>)
 8003dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dda:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <HAL_MspInit+0x44>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de2:	607b      	str	r3, [r7, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003de6:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <HAL_MspInit+0x44>)
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	4a08      	ldr	r2, [pc, #32]	; (8003e0c <HAL_MspInit+0x44>)
 8003dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003df0:	6453      	str	r3, [r2, #68]	; 0x44
 8003df2:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <HAL_MspInit+0x44>)
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800

08003e10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08e      	sub	sp, #56	; 0x38
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003e20:	4b33      	ldr	r3, [pc, #204]	; (8003ef0 <HAL_InitTick+0xe0>)
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	4a32      	ldr	r2, [pc, #200]	; (8003ef0 <HAL_InitTick+0xe0>)
 8003e26:	f043 0310 	orr.w	r3, r3, #16
 8003e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2c:	4b30      	ldr	r3, [pc, #192]	; (8003ef0 <HAL_InitTick+0xe0>)
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003e38:	f107 0210 	add.w	r2, r7, #16
 8003e3c:	f107 0314 	add.w	r3, r7, #20
 8003e40:	4611      	mov	r1, r2
 8003e42:	4618      	mov	r0, r3
 8003e44:	f004 f9c8 	bl	80081d8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d103      	bne.n	8003e5a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003e52:	f004 f999 	bl	8008188 <HAL_RCC_GetPCLK1Freq>
 8003e56:	6378      	str	r0, [r7, #52]	; 0x34
 8003e58:	e004      	b.n	8003e64 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003e5a:	f004 f995 	bl	8008188 <HAL_RCC_GetPCLK1Freq>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e66:	4a23      	ldr	r2, [pc, #140]	; (8003ef4 <HAL_InitTick+0xe4>)
 8003e68:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6c:	0c9b      	lsrs	r3, r3, #18
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003e72:	4b21      	ldr	r3, [pc, #132]	; (8003ef8 <HAL_InitTick+0xe8>)
 8003e74:	4a21      	ldr	r2, [pc, #132]	; (8003efc <HAL_InitTick+0xec>)
 8003e76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003e78:	4b1f      	ldr	r3, [pc, #124]	; (8003ef8 <HAL_InitTick+0xe8>)
 8003e7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003e80:	4a1d      	ldr	r2, [pc, #116]	; (8003ef8 <HAL_InitTick+0xe8>)
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003e86:	4b1c      	ldr	r3, [pc, #112]	; (8003ef8 <HAL_InitTick+0xe8>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <HAL_InitTick+0xe8>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e92:	4b19      	ldr	r3, [pc, #100]	; (8003ef8 <HAL_InitTick+0xe8>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003e98:	4817      	ldr	r0, [pc, #92]	; (8003ef8 <HAL_InitTick+0xe8>)
 8003e9a:	f005 fad1 	bl	8009440 <HAL_TIM_Base_Init>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003ea4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d11b      	bne.n	8003ee4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003eac:	4812      	ldr	r0, [pc, #72]	; (8003ef8 <HAL_InitTick+0xe8>)
 8003eae:	f005 fb1f 	bl	80094f0 <HAL_TIM_Base_Start_IT>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003eb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d111      	bne.n	8003ee4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ec0:	2036      	movs	r0, #54	; 0x36
 8003ec2:	f001 f9c7 	bl	8005254 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b0f      	cmp	r3, #15
 8003eca:	d808      	bhi.n	8003ede <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003ecc:	2200      	movs	r2, #0
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	2036      	movs	r0, #54	; 0x36
 8003ed2:	f001 f9a3 	bl	800521c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ed6:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <HAL_InitTick+0xf0>)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	e002      	b.n	8003ee4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003ee4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3738      	adds	r7, #56	; 0x38
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	431bde83 	.word	0x431bde83
 8003ef8:	200006bc 	.word	0x200006bc
 8003efc:	40001000 	.word	0x40001000
 8003f00:	20000040 	.word	0x20000040

08003f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f08:	e7fe      	b.n	8003f08 <NMI_Handler+0x4>

08003f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f0e:	e7fe      	b.n	8003f0e <HardFault_Handler+0x4>

08003f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f14:	e7fe      	b.n	8003f14 <MemManage_Handler+0x4>

08003f16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f16:	b480      	push	{r7}
 8003f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f1a:	e7fe      	b.n	8003f1a <BusFault_Handler+0x4>

08003f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f20:	e7fe      	b.n	8003f20 <UsageFault_Handler+0x4>

08003f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f22:	b480      	push	{r7}
 8003f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f26:	bf00      	nop
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f34:	bf00      	nop
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f42:	bf00      	nop
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f50:	bf00      	nop
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
	...

08003f5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <TIM6_DAC_IRQHandler+0x20>)
 8003f62:	791b      	ldrb	r3, [r3, #4]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8003f6a:	4804      	ldr	r0, [pc, #16]	; (8003f7c <TIM6_DAC_IRQHandler+0x20>)
 8003f6c:	f001 f9a2 	bl	80052b4 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003f70:	4803      	ldr	r0, [pc, #12]	; (8003f80 <TIM6_DAC_IRQHandler+0x24>)
 8003f72:	f005 fb35 	bl	80095e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000158 	.word	0x20000158
 8003f80:	200006bc 	.word	0x200006bc

08003f84 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003f88:	4802      	ldr	r0, [pc, #8]	; (8003f94 <LTDC_IRQHandler+0x10>)
 8003f8a:	f003 f993 	bl	80072b4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003f8e:	bf00      	nop
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000294 	.word	0x20000294

08003f98 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003f9c:	4802      	ldr	r0, [pc, #8]	; (8003fa8 <DMA2D_IRQHandler+0x10>)
 8003f9e:	f001 fd63 	bl	8005a68 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	2000016c 	.word	0x2000016c

08003fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fb4:	4a14      	ldr	r2, [pc, #80]	; (8004008 <_sbrk+0x5c>)
 8003fb6:	4b15      	ldr	r3, [pc, #84]	; (800400c <_sbrk+0x60>)
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fc0:	4b13      	ldr	r3, [pc, #76]	; (8004010 <_sbrk+0x64>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fc8:	4b11      	ldr	r3, [pc, #68]	; (8004010 <_sbrk+0x64>)
 8003fca:	4a12      	ldr	r2, [pc, #72]	; (8004014 <_sbrk+0x68>)
 8003fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fce:	4b10      	ldr	r3, [pc, #64]	; (8004010 <_sbrk+0x64>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d207      	bcs.n	8003fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fdc:	f006 fc4c 	bl	800a878 <__errno>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	220c      	movs	r2, #12
 8003fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fea:	e009      	b.n	8004000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fec:	4b08      	ldr	r3, [pc, #32]	; (8004010 <_sbrk+0x64>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <_sbrk+0x64>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	4a05      	ldr	r2, [pc, #20]	; (8004010 <_sbrk+0x64>)
 8003ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	20050000 	.word	0x20050000
 800400c:	00000400 	.word	0x00000400
 8004010:	20000708 	.word	0x20000708
 8004014:	20000a38 	.word	0x20000a38

08004018 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <SystemInit+0x20>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	4a05      	ldr	r2, [pc, #20]	; (8004038 <SystemInit+0x20>)
 8004024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	e000ed00 	.word	0xe000ed00

0800403c <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004042:	f107 0310 	add.w	r3, r7, #16
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	605a      	str	r2, [r3, #4]
 800404c:	609a      	str	r2, [r3, #8]
 800404e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004050:	1d3b      	adds	r3, r7, #4
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	605a      	str	r2, [r3, #4]
 8004058:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800405a:	4b20      	ldr	r3, [pc, #128]	; (80040dc <MX_TIM1_Init+0xa0>)
 800405c:	4a20      	ldr	r2, [pc, #128]	; (80040e0 <MX_TIM1_Init+0xa4>)
 800405e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004060:	4b1e      	ldr	r3, [pc, #120]	; (80040dc <MX_TIM1_Init+0xa0>)
 8004062:	2200      	movs	r2, #0
 8004064:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004066:	4b1d      	ldr	r3, [pc, #116]	; (80040dc <MX_TIM1_Init+0xa0>)
 8004068:	2200      	movs	r2, #0
 800406a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800406c:	4b1b      	ldr	r3, [pc, #108]	; (80040dc <MX_TIM1_Init+0xa0>)
 800406e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004072:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004074:	4b19      	ldr	r3, [pc, #100]	; (80040dc <MX_TIM1_Init+0xa0>)
 8004076:	2200      	movs	r2, #0
 8004078:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800407a:	4b18      	ldr	r3, [pc, #96]	; (80040dc <MX_TIM1_Init+0xa0>)
 800407c:	2200      	movs	r2, #0
 800407e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004080:	4b16      	ldr	r3, [pc, #88]	; (80040dc <MX_TIM1_Init+0xa0>)
 8004082:	2200      	movs	r2, #0
 8004084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004086:	4815      	ldr	r0, [pc, #84]	; (80040dc <MX_TIM1_Init+0xa0>)
 8004088:	f005 f9da 	bl	8009440 <HAL_TIM_Base_Init>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004092:	f7fd ff57 	bl	8001f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800409a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800409c:	f107 0310 	add.w	r3, r7, #16
 80040a0:	4619      	mov	r1, r3
 80040a2:	480e      	ldr	r0, [pc, #56]	; (80040dc <MX_TIM1_Init+0xa0>)
 80040a4:	f005 fbbc 	bl	8009820 <HAL_TIM_ConfigClockSource>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80040ae:	f7fd ff49 	bl	8001f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040b2:	2300      	movs	r3, #0
 80040b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	4806      	ldr	r0, [pc, #24]	; (80040dc <MX_TIM1_Init+0xa0>)
 80040c4:	f005 fdd8 	bl	8009c78 <HAL_TIMEx_MasterConfigSynchronization>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80040ce:	f7fd ff39 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80040d2:	bf00      	nop
 80040d4:	3720      	adds	r7, #32
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	2000070c 	.word	0x2000070c
 80040e0:	40010000 	.word	0x40010000

080040e4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040ea:	f107 0310 	add.w	r3, r7, #16
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	605a      	str	r2, [r3, #4]
 80040f4:	609a      	str	r2, [r3, #8]
 80040f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040f8:	1d3b      	adds	r3, r7, #4
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	605a      	str	r2, [r3, #4]
 8004100:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004102:	4b1e      	ldr	r3, [pc, #120]	; (800417c <MX_TIM2_Init+0x98>)
 8004104:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004108:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800410a:	4b1c      	ldr	r3, [pc, #112]	; (800417c <MX_TIM2_Init+0x98>)
 800410c:	2200      	movs	r2, #0
 800410e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004110:	4b1a      	ldr	r3, [pc, #104]	; (800417c <MX_TIM2_Init+0x98>)
 8004112:	2200      	movs	r2, #0
 8004114:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004116:	4b19      	ldr	r3, [pc, #100]	; (800417c <MX_TIM2_Init+0x98>)
 8004118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800411c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800411e:	4b17      	ldr	r3, [pc, #92]	; (800417c <MX_TIM2_Init+0x98>)
 8004120:	2200      	movs	r2, #0
 8004122:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004124:	4b15      	ldr	r3, [pc, #84]	; (800417c <MX_TIM2_Init+0x98>)
 8004126:	2200      	movs	r2, #0
 8004128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800412a:	4814      	ldr	r0, [pc, #80]	; (800417c <MX_TIM2_Init+0x98>)
 800412c:	f005 f988 	bl	8009440 <HAL_TIM_Base_Init>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004136:	f7fd ff05 	bl	8001f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800413a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800413e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004140:	f107 0310 	add.w	r3, r7, #16
 8004144:	4619      	mov	r1, r3
 8004146:	480d      	ldr	r0, [pc, #52]	; (800417c <MX_TIM2_Init+0x98>)
 8004148:	f005 fb6a 	bl	8009820 <HAL_TIM_ConfigClockSource>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004152:	f7fd fef7 	bl	8001f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004156:	2300      	movs	r3, #0
 8004158:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800415e:	1d3b      	adds	r3, r7, #4
 8004160:	4619      	mov	r1, r3
 8004162:	4806      	ldr	r0, [pc, #24]	; (800417c <MX_TIM2_Init+0x98>)
 8004164:	f005 fd88 	bl	8009c78 <HAL_TIMEx_MasterConfigSynchronization>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800416e:	f7fd fee9 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004172:	bf00      	nop
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000758 	.word	0x20000758

08004180 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004186:	f107 0310 	add.w	r3, r7, #16
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	605a      	str	r2, [r3, #4]
 8004190:	609a      	str	r2, [r3, #8]
 8004192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004194:	1d3b      	adds	r3, r7, #4
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	605a      	str	r2, [r3, #4]
 800419c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800419e:	4b1d      	ldr	r3, [pc, #116]	; (8004214 <MX_TIM3_Init+0x94>)
 80041a0:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <MX_TIM3_Init+0x98>)
 80041a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80041a4:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <MX_TIM3_Init+0x94>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041aa:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <MX_TIM3_Init+0x94>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80041b0:	4b18      	ldr	r3, [pc, #96]	; (8004214 <MX_TIM3_Init+0x94>)
 80041b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041b8:	4b16      	ldr	r3, [pc, #88]	; (8004214 <MX_TIM3_Init+0x94>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041be:	4b15      	ldr	r3, [pc, #84]	; (8004214 <MX_TIM3_Init+0x94>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80041c4:	4813      	ldr	r0, [pc, #76]	; (8004214 <MX_TIM3_Init+0x94>)
 80041c6:	f005 f93b 	bl	8009440 <HAL_TIM_Base_Init>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80041d0:	f7fd feb8 	bl	8001f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80041da:	f107 0310 	add.w	r3, r7, #16
 80041de:	4619      	mov	r1, r3
 80041e0:	480c      	ldr	r0, [pc, #48]	; (8004214 <MX_TIM3_Init+0x94>)
 80041e2:	f005 fb1d 	bl	8009820 <HAL_TIM_ConfigClockSource>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80041ec:	f7fd feaa 	bl	8001f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041f0:	2300      	movs	r3, #0
 80041f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80041f8:	1d3b      	adds	r3, r7, #4
 80041fa:	4619      	mov	r1, r3
 80041fc:	4805      	ldr	r0, [pc, #20]	; (8004214 <MX_TIM3_Init+0x94>)
 80041fe:	f005 fd3b 	bl	8009c78 <HAL_TIMEx_MasterConfigSynchronization>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004208:	f7fd fe9c 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800420c:	bf00      	nop
 800420e:	3720      	adds	r7, #32
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	200007a4 	.word	0x200007a4
 8004218:	40000400 	.word	0x40000400

0800421c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004222:	f107 0310 	add.w	r3, r7, #16
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	605a      	str	r2, [r3, #4]
 800422c:	609a      	str	r2, [r3, #8]
 800422e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004230:	1d3b      	adds	r3, r7, #4
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	605a      	str	r2, [r3, #4]
 8004238:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800423a:	4b1d      	ldr	r3, [pc, #116]	; (80042b0 <MX_TIM5_Init+0x94>)
 800423c:	4a1d      	ldr	r2, [pc, #116]	; (80042b4 <MX_TIM5_Init+0x98>)
 800423e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004240:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <MX_TIM5_Init+0x94>)
 8004242:	2200      	movs	r2, #0
 8004244:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004246:	4b1a      	ldr	r3, [pc, #104]	; (80042b0 <MX_TIM5_Init+0x94>)
 8004248:	2200      	movs	r2, #0
 800424a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800424c:	4b18      	ldr	r3, [pc, #96]	; (80042b0 <MX_TIM5_Init+0x94>)
 800424e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004252:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004254:	4b16      	ldr	r3, [pc, #88]	; (80042b0 <MX_TIM5_Init+0x94>)
 8004256:	2200      	movs	r2, #0
 8004258:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800425a:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <MX_TIM5_Init+0x94>)
 800425c:	2200      	movs	r2, #0
 800425e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004260:	4813      	ldr	r0, [pc, #76]	; (80042b0 <MX_TIM5_Init+0x94>)
 8004262:	f005 f8ed 	bl	8009440 <HAL_TIM_Base_Init>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800426c:	f7fd fe6a 	bl	8001f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004274:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004276:	f107 0310 	add.w	r3, r7, #16
 800427a:	4619      	mov	r1, r3
 800427c:	480c      	ldr	r0, [pc, #48]	; (80042b0 <MX_TIM5_Init+0x94>)
 800427e:	f005 facf 	bl	8009820 <HAL_TIM_ConfigClockSource>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004288:	f7fd fe5c 	bl	8001f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800428c:	2300      	movs	r3, #0
 800428e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004294:	1d3b      	adds	r3, r7, #4
 8004296:	4619      	mov	r1, r3
 8004298:	4805      	ldr	r0, [pc, #20]	; (80042b0 <MX_TIM5_Init+0x94>)
 800429a:	f005 fced 	bl	8009c78 <HAL_TIMEx_MasterConfigSynchronization>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80042a4:	f7fd fe4e 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80042a8:	bf00      	nop
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	200007f0 	.word	0x200007f0
 80042b4:	40000c00 	.word	0x40000c00

080042b8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042be:	f107 0310 	add.w	r3, r7, #16
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	605a      	str	r2, [r3, #4]
 80042c8:	609a      	str	r2, [r3, #8]
 80042ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042cc:	1d3b      	adds	r3, r7, #4
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	605a      	str	r2, [r3, #4]
 80042d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80042d6:	4b20      	ldr	r3, [pc, #128]	; (8004358 <MX_TIM8_Init+0xa0>)
 80042d8:	4a20      	ldr	r2, [pc, #128]	; (800435c <MX_TIM8_Init+0xa4>)
 80042da:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80042dc:	4b1e      	ldr	r3, [pc, #120]	; (8004358 <MX_TIM8_Init+0xa0>)
 80042de:	2200      	movs	r2, #0
 80042e0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042e2:	4b1d      	ldr	r3, [pc, #116]	; (8004358 <MX_TIM8_Init+0xa0>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80042e8:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <MX_TIM8_Init+0xa0>)
 80042ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042ee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042f0:	4b19      	ldr	r3, [pc, #100]	; (8004358 <MX_TIM8_Init+0xa0>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80042f6:	4b18      	ldr	r3, [pc, #96]	; (8004358 <MX_TIM8_Init+0xa0>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042fc:	4b16      	ldr	r3, [pc, #88]	; (8004358 <MX_TIM8_Init+0xa0>)
 80042fe:	2200      	movs	r2, #0
 8004300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004302:	4815      	ldr	r0, [pc, #84]	; (8004358 <MX_TIM8_Init+0xa0>)
 8004304:	f005 f89c 	bl	8009440 <HAL_TIM_Base_Init>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800430e:	f7fd fe19 	bl	8001f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004316:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004318:	f107 0310 	add.w	r3, r7, #16
 800431c:	4619      	mov	r1, r3
 800431e:	480e      	ldr	r0, [pc, #56]	; (8004358 <MX_TIM8_Init+0xa0>)
 8004320:	f005 fa7e 	bl	8009820 <HAL_TIM_ConfigClockSource>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800432a:	f7fd fe0b 	bl	8001f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800432e:	2300      	movs	r3, #0
 8004330:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004332:	2300      	movs	r3, #0
 8004334:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800433a:	1d3b      	adds	r3, r7, #4
 800433c:	4619      	mov	r1, r3
 800433e:	4806      	ldr	r0, [pc, #24]	; (8004358 <MX_TIM8_Init+0xa0>)
 8004340:	f005 fc9a 	bl	8009c78 <HAL_TIMEx_MasterConfigSynchronization>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800434a:	f7fd fdfb 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800434e:	bf00      	nop
 8004350:	3720      	adds	r7, #32
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	2000083c 	.word	0x2000083c
 800435c:	40010400 	.word	0x40010400

08004360 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08e      	sub	sp, #56	; 0x38
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	609a      	str	r2, [r3, #8]
 8004374:	60da      	str	r2, [r3, #12]
 8004376:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a3b      	ldr	r2, [pc, #236]	; (800446c <HAL_TIM_Base_MspInit+0x10c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d10c      	bne.n	800439c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004382:	4b3b      	ldr	r3, [pc, #236]	; (8004470 <HAL_TIM_Base_MspInit+0x110>)
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	4a3a      	ldr	r2, [pc, #232]	; (8004470 <HAL_TIM_Base_MspInit+0x110>)
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	6453      	str	r3, [r2, #68]	; 0x44
 800438e:	4b38      	ldr	r3, [pc, #224]	; (8004470 <HAL_TIM_Base_MspInit+0x110>)
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	623b      	str	r3, [r7, #32]
 8004398:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800439a:	e062      	b.n	8004462 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM2)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a4:	d10c      	bne.n	80043c0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043a6:	4b32      	ldr	r3, [pc, #200]	; (8004470 <HAL_TIM_Base_MspInit+0x110>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	4a31      	ldr	r2, [pc, #196]	; (8004470 <HAL_TIM_Base_MspInit+0x110>)
 80043ac:	f043 0301 	orr.w	r3, r3, #1
 80043b0:	6413      	str	r3, [r2, #64]	; 0x40
 80043b2:	4b2f      	ldr	r3, [pc, #188]	; (8004470 <HAL_TIM_Base_MspInit+0x110>)
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	69fb      	ldr	r3, [r7, #28]
}
 80043be:	e050      	b.n	8004462 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a2b      	ldr	r2, [pc, #172]	; (8004474 <HAL_TIM_Base_MspInit+0x114>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d10c      	bne.n	80043e4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043ca:	4b29      	ldr	r3, [pc, #164]	; (8004470 <HAL_TIM_Base_MspInit+0x110>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	4a28      	ldr	r2, [pc, #160]	; (8004470 <HAL_TIM_Base_MspInit+0x110>)
 80043d0:	f043 0302 	orr.w	r3, r3, #2
 80043d4:	6413      	str	r3, [r2, #64]	; 0x40
 80043d6:	4b26      	ldr	r3, [pc, #152]	; (8004470 <HAL_TIM_Base_MspInit+0x110>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	69bb      	ldr	r3, [r7, #24]
}
 80043e2:	e03e      	b.n	8004462 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM5)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a23      	ldr	r2, [pc, #140]	; (8004478 <HAL_TIM_Base_MspInit+0x118>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d10c      	bne.n	8004408 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80043ee:	4b20      	ldr	r3, [pc, #128]	; (8004470 <HAL_TIM_Base_MspInit+0x110>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	4a1f      	ldr	r2, [pc, #124]	; (8004470 <HAL_TIM_Base_MspInit+0x110>)
 80043f4:	f043 0308 	orr.w	r3, r3, #8
 80043f8:	6413      	str	r3, [r2, #64]	; 0x40
 80043fa:	4b1d      	ldr	r3, [pc, #116]	; (8004470 <HAL_TIM_Base_MspInit+0x110>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	697b      	ldr	r3, [r7, #20]
}
 8004406:	e02c      	b.n	8004462 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a1b      	ldr	r2, [pc, #108]	; (800447c <HAL_TIM_Base_MspInit+0x11c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d127      	bne.n	8004462 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004412:	4b17      	ldr	r3, [pc, #92]	; (8004470 <HAL_TIM_Base_MspInit+0x110>)
 8004414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004416:	4a16      	ldr	r2, [pc, #88]	; (8004470 <HAL_TIM_Base_MspInit+0x110>)
 8004418:	f043 0302 	orr.w	r3, r3, #2
 800441c:	6453      	str	r3, [r2, #68]	; 0x44
 800441e:	4b14      	ldr	r3, [pc, #80]	; (8004470 <HAL_TIM_Base_MspInit+0x110>)
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	613b      	str	r3, [r7, #16]
 8004428:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800442a:	4b11      	ldr	r3, [pc, #68]	; (8004470 <HAL_TIM_Base_MspInit+0x110>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	4a10      	ldr	r2, [pc, #64]	; (8004470 <HAL_TIM_Base_MspInit+0x110>)
 8004430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004434:	6313      	str	r3, [r2, #48]	; 0x30
 8004436:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <HAL_TIM_Base_MspInit+0x110>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004442:	2304      	movs	r3, #4
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004446:	2302      	movs	r3, #2
 8004448:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444a:	2300      	movs	r3, #0
 800444c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800444e:	2300      	movs	r3, #0
 8004450:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004452:	2303      	movs	r3, #3
 8004454:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800445a:	4619      	mov	r1, r3
 800445c:	4808      	ldr	r0, [pc, #32]	; (8004480 <HAL_TIM_Base_MspInit+0x120>)
 800445e:	f001 fd41 	bl	8005ee4 <HAL_GPIO_Init>
}
 8004462:	bf00      	nop
 8004464:	3738      	adds	r7, #56	; 0x38
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40010000 	.word	0x40010000
 8004470:	40023800 	.word	0x40023800
 8004474:	40000400 	.word	0x40000400
 8004478:	40000c00 	.word	0x40000c00
 800447c:	40010400 	.word	0x40010400
 8004480:	40022000 	.word	0x40022000

08004484 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8004488:	4b14      	ldr	r3, [pc, #80]	; (80044dc <MX_UART7_Init+0x58>)
 800448a:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <MX_UART7_Init+0x5c>)
 800448c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800448e:	4b13      	ldr	r3, [pc, #76]	; (80044dc <MX_UART7_Init+0x58>)
 8004490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004494:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004496:	4b11      	ldr	r3, [pc, #68]	; (80044dc <MX_UART7_Init+0x58>)
 8004498:	2200      	movs	r2, #0
 800449a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800449c:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <MX_UART7_Init+0x58>)
 800449e:	2200      	movs	r2, #0
 80044a0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80044a2:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <MX_UART7_Init+0x58>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <MX_UART7_Init+0x58>)
 80044aa:	220c      	movs	r2, #12
 80044ac:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044ae:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <MX_UART7_Init+0x58>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80044b4:	4b09      	ldr	r3, [pc, #36]	; (80044dc <MX_UART7_Init+0x58>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80044ba:	4b08      	ldr	r3, [pc, #32]	; (80044dc <MX_UART7_Init+0x58>)
 80044bc:	2200      	movs	r2, #0
 80044be:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <MX_UART7_Init+0x58>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80044c6:	4805      	ldr	r0, [pc, #20]	; (80044dc <MX_UART7_Init+0x58>)
 80044c8:	f005 fc82 	bl	8009dd0 <HAL_UART_Init>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80044d2:	f7fd fd37 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80044d6:	bf00      	nop
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000888 	.word	0x20000888
 80044e0:	40007800 	.word	0x40007800

080044e4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80044e8:	4b14      	ldr	r3, [pc, #80]	; (800453c <MX_USART1_UART_Init+0x58>)
 80044ea:	4a15      	ldr	r2, [pc, #84]	; (8004540 <MX_USART1_UART_Init+0x5c>)
 80044ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80044ee:	4b13      	ldr	r3, [pc, #76]	; (800453c <MX_USART1_UART_Init+0x58>)
 80044f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044f6:	4b11      	ldr	r3, [pc, #68]	; (800453c <MX_USART1_UART_Init+0x58>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80044fc:	4b0f      	ldr	r3, [pc, #60]	; (800453c <MX_USART1_UART_Init+0x58>)
 80044fe:	2200      	movs	r2, #0
 8004500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004502:	4b0e      	ldr	r3, [pc, #56]	; (800453c <MX_USART1_UART_Init+0x58>)
 8004504:	2200      	movs	r2, #0
 8004506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004508:	4b0c      	ldr	r3, [pc, #48]	; (800453c <MX_USART1_UART_Init+0x58>)
 800450a:	220c      	movs	r2, #12
 800450c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800450e:	4b0b      	ldr	r3, [pc, #44]	; (800453c <MX_USART1_UART_Init+0x58>)
 8004510:	2200      	movs	r2, #0
 8004512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004514:	4b09      	ldr	r3, [pc, #36]	; (800453c <MX_USART1_UART_Init+0x58>)
 8004516:	2200      	movs	r2, #0
 8004518:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800451a:	4b08      	ldr	r3, [pc, #32]	; (800453c <MX_USART1_UART_Init+0x58>)
 800451c:	2200      	movs	r2, #0
 800451e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004520:	4b06      	ldr	r3, [pc, #24]	; (800453c <MX_USART1_UART_Init+0x58>)
 8004522:	2200      	movs	r2, #0
 8004524:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004526:	4805      	ldr	r0, [pc, #20]	; (800453c <MX_USART1_UART_Init+0x58>)
 8004528:	f005 fc52 	bl	8009dd0 <HAL_UART_Init>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004532:	f7fd fd07 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000910 	.word	0x20000910
 8004540:	40011000 	.word	0x40011000

08004544 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004548:	4b14      	ldr	r3, [pc, #80]	; (800459c <MX_USART6_UART_Init+0x58>)
 800454a:	4a15      	ldr	r2, [pc, #84]	; (80045a0 <MX_USART6_UART_Init+0x5c>)
 800454c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800454e:	4b13      	ldr	r3, [pc, #76]	; (800459c <MX_USART6_UART_Init+0x58>)
 8004550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004554:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004556:	4b11      	ldr	r3, [pc, #68]	; (800459c <MX_USART6_UART_Init+0x58>)
 8004558:	2200      	movs	r2, #0
 800455a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800455c:	4b0f      	ldr	r3, [pc, #60]	; (800459c <MX_USART6_UART_Init+0x58>)
 800455e:	2200      	movs	r2, #0
 8004560:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004562:	4b0e      	ldr	r3, [pc, #56]	; (800459c <MX_USART6_UART_Init+0x58>)
 8004564:	2200      	movs	r2, #0
 8004566:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004568:	4b0c      	ldr	r3, [pc, #48]	; (800459c <MX_USART6_UART_Init+0x58>)
 800456a:	220c      	movs	r2, #12
 800456c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800456e:	4b0b      	ldr	r3, [pc, #44]	; (800459c <MX_USART6_UART_Init+0x58>)
 8004570:	2200      	movs	r2, #0
 8004572:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004574:	4b09      	ldr	r3, [pc, #36]	; (800459c <MX_USART6_UART_Init+0x58>)
 8004576:	2200      	movs	r2, #0
 8004578:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800457a:	4b08      	ldr	r3, [pc, #32]	; (800459c <MX_USART6_UART_Init+0x58>)
 800457c:	2200      	movs	r2, #0
 800457e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004580:	4b06      	ldr	r3, [pc, #24]	; (800459c <MX_USART6_UART_Init+0x58>)
 8004582:	2200      	movs	r2, #0
 8004584:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004586:	4805      	ldr	r0, [pc, #20]	; (800459c <MX_USART6_UART_Init+0x58>)
 8004588:	f005 fc22 	bl	8009dd0 <HAL_UART_Init>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8004592:	f7fd fcd7 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004596:	bf00      	nop
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000998 	.word	0x20000998
 80045a0:	40011400 	.word	0x40011400

080045a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b0b0      	sub	sp, #192	; 0xc0
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	605a      	str	r2, [r3, #4]
 80045b6:	609a      	str	r2, [r3, #8]
 80045b8:	60da      	str	r2, [r3, #12]
 80045ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045c0:	2284      	movs	r2, #132	; 0x84
 80045c2:	2100      	movs	r1, #0
 80045c4:	4618      	mov	r0, r3
 80045c6:	f006 f981 	bl	800a8cc <memset>
  if(uartHandle->Instance==UART7)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a75      	ldr	r2, [pc, #468]	; (80047a4 <HAL_UART_MspInit+0x200>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d13d      	bne.n	8004650 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80045d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045d8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80045da:	2300      	movs	r3, #0
 80045dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045e4:	4618      	mov	r0, r3
 80045e6:	f003 fe29 	bl	800823c <HAL_RCCEx_PeriphCLKConfig>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80045f0:	f7fd fca8 	bl	8001f44 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80045f4:	4b6c      	ldr	r3, [pc, #432]	; (80047a8 <HAL_UART_MspInit+0x204>)
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	4a6b      	ldr	r2, [pc, #428]	; (80047a8 <HAL_UART_MspInit+0x204>)
 80045fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045fe:	6413      	str	r3, [r2, #64]	; 0x40
 8004600:	4b69      	ldr	r3, [pc, #420]	; (80047a8 <HAL_UART_MspInit+0x204>)
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800460c:	4b66      	ldr	r3, [pc, #408]	; (80047a8 <HAL_UART_MspInit+0x204>)
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	4a65      	ldr	r2, [pc, #404]	; (80047a8 <HAL_UART_MspInit+0x204>)
 8004612:	f043 0320 	orr.w	r3, r3, #32
 8004616:	6313      	str	r3, [r2, #48]	; 0x30
 8004618:	4b63      	ldr	r3, [pc, #396]	; (80047a8 <HAL_UART_MspInit+0x204>)
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	623b      	str	r3, [r7, #32]
 8004622:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004624:	23c0      	movs	r3, #192	; 0xc0
 8004626:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800462a:	2302      	movs	r3, #2
 800462c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004630:	2300      	movs	r3, #0
 8004632:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004636:	2303      	movs	r3, #3
 8004638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800463c:	2308      	movs	r3, #8
 800463e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004642:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004646:	4619      	mov	r1, r3
 8004648:	4858      	ldr	r0, [pc, #352]	; (80047ac <HAL_UART_MspInit+0x208>)
 800464a:	f001 fc4b 	bl	8005ee4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800464e:	e0a4      	b.n	800479a <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a56      	ldr	r2, [pc, #344]	; (80047b0 <HAL_UART_MspInit+0x20c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d15d      	bne.n	8004716 <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800465a:	2340      	movs	r3, #64	; 0x40
 800465c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800465e:	2300      	movs	r3, #0
 8004660:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004666:	4618      	mov	r0, r3
 8004668:	f003 fde8 	bl	800823c <HAL_RCCEx_PeriphCLKConfig>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8004672:	f7fd fc67 	bl	8001f44 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004676:	4b4c      	ldr	r3, [pc, #304]	; (80047a8 <HAL_UART_MspInit+0x204>)
 8004678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467a:	4a4b      	ldr	r2, [pc, #300]	; (80047a8 <HAL_UART_MspInit+0x204>)
 800467c:	f043 0310 	orr.w	r3, r3, #16
 8004680:	6453      	str	r3, [r2, #68]	; 0x44
 8004682:	4b49      	ldr	r3, [pc, #292]	; (80047a8 <HAL_UART_MspInit+0x204>)
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800468e:	4b46      	ldr	r3, [pc, #280]	; (80047a8 <HAL_UART_MspInit+0x204>)
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	4a45      	ldr	r2, [pc, #276]	; (80047a8 <HAL_UART_MspInit+0x204>)
 8004694:	f043 0302 	orr.w	r3, r3, #2
 8004698:	6313      	str	r3, [r2, #48]	; 0x30
 800469a:	4b43      	ldr	r3, [pc, #268]	; (80047a8 <HAL_UART_MspInit+0x204>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	61bb      	str	r3, [r7, #24]
 80046a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046a6:	4b40      	ldr	r3, [pc, #256]	; (80047a8 <HAL_UART_MspInit+0x204>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	4a3f      	ldr	r2, [pc, #252]	; (80047a8 <HAL_UART_MspInit+0x204>)
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	6313      	str	r3, [r2, #48]	; 0x30
 80046b2:	4b3d      	ldr	r3, [pc, #244]	; (80047a8 <HAL_UART_MspInit+0x204>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80046be:	2380      	movs	r3, #128	; 0x80
 80046c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c4:	2302      	movs	r3, #2
 80046c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ca:	2300      	movs	r3, #0
 80046cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d0:	2300      	movs	r3, #0
 80046d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80046d6:	2307      	movs	r3, #7
 80046d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80046dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80046e0:	4619      	mov	r1, r3
 80046e2:	4834      	ldr	r0, [pc, #208]	; (80047b4 <HAL_UART_MspInit+0x210>)
 80046e4:	f001 fbfe 	bl	8005ee4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80046e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f0:	2302      	movs	r3, #2
 80046f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046fc:	2300      	movs	r3, #0
 80046fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004702:	2307      	movs	r3, #7
 8004704:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004708:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800470c:	4619      	mov	r1, r3
 800470e:	482a      	ldr	r0, [pc, #168]	; (80047b8 <HAL_UART_MspInit+0x214>)
 8004710:	f001 fbe8 	bl	8005ee4 <HAL_GPIO_Init>
}
 8004714:	e041      	b.n	800479a <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART6)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a28      	ldr	r2, [pc, #160]	; (80047bc <HAL_UART_MspInit+0x218>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d13c      	bne.n	800479a <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004720:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004726:	2300      	movs	r3, #0
 8004728:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800472c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004730:	4618      	mov	r0, r3
 8004732:	f003 fd83 	bl	800823c <HAL_RCCEx_PeriphCLKConfig>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 800473c:	f7fd fc02 	bl	8001f44 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004740:	4b19      	ldr	r3, [pc, #100]	; (80047a8 <HAL_UART_MspInit+0x204>)
 8004742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004744:	4a18      	ldr	r2, [pc, #96]	; (80047a8 <HAL_UART_MspInit+0x204>)
 8004746:	f043 0320 	orr.w	r3, r3, #32
 800474a:	6453      	str	r3, [r2, #68]	; 0x44
 800474c:	4b16      	ldr	r3, [pc, #88]	; (80047a8 <HAL_UART_MspInit+0x204>)
 800474e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004750:	f003 0320 	and.w	r3, r3, #32
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004758:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <HAL_UART_MspInit+0x204>)
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	4a12      	ldr	r2, [pc, #72]	; (80047a8 <HAL_UART_MspInit+0x204>)
 800475e:	f043 0304 	orr.w	r3, r3, #4
 8004762:	6313      	str	r3, [r2, #48]	; 0x30
 8004764:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <HAL_UART_MspInit+0x204>)
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004770:	23c0      	movs	r3, #192	; 0xc0
 8004772:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004776:	2302      	movs	r3, #2
 8004778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477c:	2300      	movs	r3, #0
 800477e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004782:	2303      	movs	r3, #3
 8004784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004788:	2308      	movs	r3, #8
 800478a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800478e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004792:	4619      	mov	r1, r3
 8004794:	480a      	ldr	r0, [pc, #40]	; (80047c0 <HAL_UART_MspInit+0x21c>)
 8004796:	f001 fba5 	bl	8005ee4 <HAL_GPIO_Init>
}
 800479a:	bf00      	nop
 800479c:	37c0      	adds	r7, #192	; 0xc0
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40007800 	.word	0x40007800
 80047a8:	40023800 	.word	0x40023800
 80047ac:	40021400 	.word	0x40021400
 80047b0:	40011000 	.word	0x40011000
 80047b4:	40020400 	.word	0x40020400
 80047b8:	40020000 	.word	0x40020000
 80047bc:	40011400 	.word	0x40011400
 80047c0:	40020800 	.word	0x40020800

080047c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80047c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80047c8:	480d      	ldr	r0, [pc, #52]	; (8004800 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80047ca:	490e      	ldr	r1, [pc, #56]	; (8004804 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80047cc:	4a0e      	ldr	r2, [pc, #56]	; (8004808 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80047ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047d0:	e002      	b.n	80047d8 <LoopCopyDataInit>

080047d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047d6:	3304      	adds	r3, #4

080047d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047dc:	d3f9      	bcc.n	80047d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047de:	4a0b      	ldr	r2, [pc, #44]	; (800480c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80047e0:	4c0b      	ldr	r4, [pc, #44]	; (8004810 <LoopFillZerobss+0x26>)
  movs r3, #0
 80047e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047e4:	e001      	b.n	80047ea <LoopFillZerobss>

080047e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047e8:	3204      	adds	r2, #4

080047ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047ec:	d3fb      	bcc.n	80047e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80047ee:	f7ff fc13 	bl	8004018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047f2:	f006 f847 	bl	800a884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047f6:	f7fd f9ed 	bl	8001bd4 <main>
  bx  lr    
 80047fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80047fc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004804:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8004808:	0804cde4 	.word	0x0804cde4
  ldr r2, =_sbss
 800480c:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8004810:	20000a34 	.word	0x20000a34

08004814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004814:	e7fe      	b.n	8004814 <ADC_IRQHandler>

08004816 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800481a:	2003      	movs	r0, #3
 800481c:	f000 fcf3 	bl	8005206 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004820:	200f      	movs	r0, #15
 8004822:	f7ff faf5 	bl	8003e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004826:	f7ff facf 	bl	8003dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <HAL_IncTick+0x20>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	4b06      	ldr	r3, [pc, #24]	; (8004854 <HAL_IncTick+0x24>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4413      	add	r3, r2
 8004840:	4a04      	ldr	r2, [pc, #16]	; (8004854 <HAL_IncTick+0x24>)
 8004842:	6013      	str	r3, [r2, #0]
}
 8004844:	bf00      	nop
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000044 	.word	0x20000044
 8004854:	20000a20 	.word	0x20000a20

08004858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  return uwTick;
 800485c:	4b03      	ldr	r3, [pc, #12]	; (800486c <HAL_GetTick+0x14>)
 800485e:	681b      	ldr	r3, [r3, #0]
}
 8004860:	4618      	mov	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	20000a20 	.word	0x20000a20

08004870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004878:	f7ff ffee 	bl	8004858 <HAL_GetTick>
 800487c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004888:	d005      	beq.n	8004896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <HAL_Delay+0x44>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004896:	bf00      	nop
 8004898:	f7ff ffde 	bl	8004858 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d8f7      	bhi.n	8004898 <HAL_Delay+0x28>
  {
  }
}
 80048a8:	bf00      	nop
 80048aa:	bf00      	nop
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000044 	.word	0x20000044

080048b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e031      	b.n	8004932 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fb ff10 	bl	80006fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d116      	bne.n	8004924 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048fa:	4b10      	ldr	r3, [pc, #64]	; (800493c <HAL_ADC_Init+0x84>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	f043 0202 	orr.w	r2, r3, #2
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fad6 	bl	8004eb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f023 0303 	bic.w	r3, r3, #3
 800491a:	f043 0201 	orr.w	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	641a      	str	r2, [r3, #64]	; 0x40
 8004922:	e001      	b.n	8004928 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004930:	7bfb      	ldrb	r3, [r7, #15]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	ffffeefd 	.word	0xffffeefd

08004940 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <HAL_ADC_Start+0x1a>
 8004956:	2302      	movs	r3, #2
 8004958:	e0ad      	b.n	8004ab6 <HAL_ADC_Start+0x176>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b01      	cmp	r3, #1
 800496e:	d018      	beq.n	80049a2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004980:	4b50      	ldr	r3, [pc, #320]	; (8004ac4 <HAL_ADC_Start+0x184>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a50      	ldr	r2, [pc, #320]	; (8004ac8 <HAL_ADC_Start+0x188>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	0c9a      	lsrs	r2, r3, #18
 800498c:	4613      	mov	r3, r2
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	4413      	add	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004994:	e002      	b.n	800499c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3b01      	subs	r3, #1
 800499a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f9      	bne.n	8004996 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d175      	bne.n	8004a9c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049b4:	4b45      	ldr	r3, [pc, #276]	; (8004acc <HAL_ADC_Start+0x18c>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d007      	beq.n	80049de <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80049d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ea:	d106      	bne.n	80049fa <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f0:	f023 0206 	bic.w	r2, r3, #6
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	645a      	str	r2, [r3, #68]	; 0x44
 80049f8:	e002      	b.n	8004a00 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004a10:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004a12:	4b2f      	ldr	r3, [pc, #188]	; (8004ad0 <HAL_ADC_Start+0x190>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f003 031f 	and.w	r3, r3, #31
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10f      	bne.n	8004a3e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d143      	bne.n	8004ab4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a3a:	609a      	str	r2, [r3, #8]
 8004a3c:	e03a      	b.n	8004ab4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a24      	ldr	r2, [pc, #144]	; (8004ad4 <HAL_ADC_Start+0x194>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d10e      	bne.n	8004a66 <HAL_ADC_Start+0x126>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d107      	bne.n	8004a66 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a64:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004a66:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <HAL_ADC_Start+0x190>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d120      	bne.n	8004ab4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a18      	ldr	r2, [pc, #96]	; (8004ad8 <HAL_ADC_Start+0x198>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d11b      	bne.n	8004ab4 <HAL_ADC_Start+0x174>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d114      	bne.n	8004ab4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a98:	609a      	str	r2, [r3, #8]
 8004a9a:	e00b      	b.n	8004ab4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	f043 0210 	orr.w	r2, r3, #16
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aac:	f043 0201 	orr.w	r2, r3, #1
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	2000003c 	.word	0x2000003c
 8004ac8:	431bde83 	.word	0x431bde83
 8004acc:	fffff8fe 	.word	0xfffff8fe
 8004ad0:	40012300 	.word	0x40012300
 8004ad4:	40012000 	.word	0x40012000
 8004ad8:	40012200 	.word	0x40012200

08004adc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af8:	d113      	bne.n	8004b22 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b08:	d10b      	bne.n	8004b22 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f043 0220 	orr.w	r2, r3, #32
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e063      	b.n	8004bea <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004b22:	f7ff fe99 	bl	8004858 <HAL_GetTick>
 8004b26:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004b28:	e021      	b.n	8004b6e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b30:	d01d      	beq.n	8004b6e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d007      	beq.n	8004b48 <HAL_ADC_PollForConversion+0x6c>
 8004b38:	f7ff fe8e 	bl	8004858 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d212      	bcs.n	8004b6e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d00b      	beq.n	8004b6e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	f043 0204 	orr.w	r2, r3, #4
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e03d      	b.n	8004bea <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d1d6      	bne.n	8004b2a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f06f 0212 	mvn.w	r2, #18
 8004b84:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d123      	bne.n	8004be8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d11f      	bne.n	8004be8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d006      	beq.n	8004bc4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d111      	bne.n	8004be8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d105      	bne.n	8004be8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	f043 0201 	orr.w	r2, r3, #1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0x1c>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e136      	b.n	8004e96 <HAL_ADC_ConfigChannel+0x28a>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b09      	cmp	r3, #9
 8004c36:	d93a      	bls.n	8004cae <HAL_ADC_ConfigChannel+0xa2>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c40:	d035      	beq.n	8004cae <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68d9      	ldr	r1, [r3, #12]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	4613      	mov	r3, r2
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	4413      	add	r3, r2
 8004c56:	3b1e      	subs	r3, #30
 8004c58:	2207      	movs	r2, #7
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	43da      	mvns	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	400a      	ands	r2, r1
 8004c66:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a8d      	ldr	r2, [pc, #564]	; (8004ea4 <HAL_ADC_ConfigChannel+0x298>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d10a      	bne.n	8004c88 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68d9      	ldr	r1, [r3, #12]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	061a      	lsls	r2, r3, #24
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c86:	e035      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68d9      	ldr	r1, [r3, #12]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	4618      	mov	r0, r3
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	4403      	add	r3, r0
 8004ca0:	3b1e      	subs	r3, #30
 8004ca2:	409a      	lsls	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cac:	e022      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6919      	ldr	r1, [r3, #16]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	461a      	mov	r2, r3
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	4413      	add	r3, r2
 8004cc2:	2207      	movs	r2, #7
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	43da      	mvns	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	400a      	ands	r2, r1
 8004cd0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6919      	ldr	r1, [r3, #16]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	4403      	add	r3, r0
 8004cea:	409a      	lsls	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b06      	cmp	r3, #6
 8004cfa:	d824      	bhi.n	8004d46 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3b05      	subs	r3, #5
 8004d0e:	221f      	movs	r2, #31
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	43da      	mvns	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	400a      	ands	r2, r1
 8004d1c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	3b05      	subs	r3, #5
 8004d38:	fa00 f203 	lsl.w	r2, r0, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	635a      	str	r2, [r3, #52]	; 0x34
 8004d44:	e04c      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b0c      	cmp	r3, #12
 8004d4c:	d824      	bhi.n	8004d98 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3b23      	subs	r3, #35	; 0x23
 8004d60:	221f      	movs	r2, #31
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	43da      	mvns	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	400a      	ands	r2, r1
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	3b23      	subs	r3, #35	; 0x23
 8004d8a:	fa00 f203 	lsl.w	r2, r0, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30
 8004d96:	e023      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	3b41      	subs	r3, #65	; 0x41
 8004daa:	221f      	movs	r2, #31
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	43da      	mvns	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	400a      	ands	r2, r1
 8004db8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	3b41      	subs	r3, #65	; 0x41
 8004dd4:	fa00 f203 	lsl.w	r2, r0, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a30      	ldr	r2, [pc, #192]	; (8004ea8 <HAL_ADC_ConfigChannel+0x29c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d10a      	bne.n	8004e00 <HAL_ADC_ConfigChannel+0x1f4>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004df2:	d105      	bne.n	8004e00 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004df4:	4b2d      	ldr	r3, [pc, #180]	; (8004eac <HAL_ADC_ConfigChannel+0x2a0>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	4a2c      	ldr	r2, [pc, #176]	; (8004eac <HAL_ADC_ConfigChannel+0x2a0>)
 8004dfa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004dfe:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a28      	ldr	r2, [pc, #160]	; (8004ea8 <HAL_ADC_ConfigChannel+0x29c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d10f      	bne.n	8004e2a <HAL_ADC_ConfigChannel+0x21e>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b12      	cmp	r3, #18
 8004e10:	d10b      	bne.n	8004e2a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004e12:	4b26      	ldr	r3, [pc, #152]	; (8004eac <HAL_ADC_ConfigChannel+0x2a0>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	4a25      	ldr	r2, [pc, #148]	; (8004eac <HAL_ADC_ConfigChannel+0x2a0>)
 8004e18:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e1c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004e1e:	4b23      	ldr	r3, [pc, #140]	; (8004eac <HAL_ADC_ConfigChannel+0x2a0>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	4a22      	ldr	r2, [pc, #136]	; (8004eac <HAL_ADC_ConfigChannel+0x2a0>)
 8004e24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e28:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a1e      	ldr	r2, [pc, #120]	; (8004ea8 <HAL_ADC_ConfigChannel+0x29c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d12b      	bne.n	8004e8c <HAL_ADC_ConfigChannel+0x280>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a1a      	ldr	r2, [pc, #104]	; (8004ea4 <HAL_ADC_ConfigChannel+0x298>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d003      	beq.n	8004e46 <HAL_ADC_ConfigChannel+0x23a>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b11      	cmp	r3, #17
 8004e44:	d122      	bne.n	8004e8c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004e46:	4b19      	ldr	r3, [pc, #100]	; (8004eac <HAL_ADC_ConfigChannel+0x2a0>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	4a18      	ldr	r2, [pc, #96]	; (8004eac <HAL_ADC_ConfigChannel+0x2a0>)
 8004e4c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004e50:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004e52:	4b16      	ldr	r3, [pc, #88]	; (8004eac <HAL_ADC_ConfigChannel+0x2a0>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	4a15      	ldr	r2, [pc, #84]	; (8004eac <HAL_ADC_ConfigChannel+0x2a0>)
 8004e58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e5c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a10      	ldr	r2, [pc, #64]	; (8004ea4 <HAL_ADC_ConfigChannel+0x298>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d111      	bne.n	8004e8c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004e68:	4b11      	ldr	r3, [pc, #68]	; (8004eb0 <HAL_ADC_ConfigChannel+0x2a4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a11      	ldr	r2, [pc, #68]	; (8004eb4 <HAL_ADC_ConfigChannel+0x2a8>)
 8004e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e72:	0c9a      	lsrs	r2, r3, #18
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004e7e:	e002      	b.n	8004e86 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f9      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	10000012 	.word	0x10000012
 8004ea8:	40012000 	.word	0x40012000
 8004eac:	40012300 	.word	0x40012300
 8004eb0:	2000003c 	.word	0x2000003c
 8004eb4:	431bde83 	.word	0x431bde83

08004eb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004ec0:	4b78      	ldr	r3, [pc, #480]	; (80050a4 <ADC_Init+0x1ec>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4a77      	ldr	r2, [pc, #476]	; (80050a4 <ADC_Init+0x1ec>)
 8004ec6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004eca:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004ecc:	4b75      	ldr	r3, [pc, #468]	; (80050a4 <ADC_Init+0x1ec>)
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4973      	ldr	r1, [pc, #460]	; (80050a4 <ADC_Init+0x1ec>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ee8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6859      	ldr	r1, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	021a      	lsls	r2, r3, #8
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004f0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6859      	ldr	r1, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6899      	ldr	r1, [r3, #8]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f46:	4a58      	ldr	r2, [pc, #352]	; (80050a8 <ADC_Init+0x1f0>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d022      	beq.n	8004f92 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6899      	ldr	r1, [r3, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6899      	ldr	r1, [r3, #8]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	609a      	str	r2, [r3, #8]
 8004f90:	e00f      	b.n	8004fb2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004fb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0202 	bic.w	r2, r2, #2
 8004fc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6899      	ldr	r1, [r3, #8]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	005a      	lsls	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01b      	beq.n	8005018 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004ffe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6859      	ldr	r1, [r3, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	3b01      	subs	r3, #1
 800500c:	035a      	lsls	r2, r3, #13
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]
 8005016:	e007      	b.n	8005028 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005026:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	3b01      	subs	r3, #1
 8005044:	051a      	lsls	r2, r3, #20
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800505c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6899      	ldr	r1, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800506a:	025a      	lsls	r2, r3, #9
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005082:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6899      	ldr	r1, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	029a      	lsls	r2, r3, #10
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	609a      	str	r2, [r3, #8]
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40012300 	.word	0x40012300
 80050a8:	0f000001 	.word	0x0f000001

080050ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <__NVIC_SetPriorityGrouping+0x40>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050c8:	4013      	ands	r3, r2
 80050ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80050d4:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <__NVIC_SetPriorityGrouping+0x44>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050da:	4a04      	ldr	r2, [pc, #16]	; (80050ec <__NVIC_SetPriorityGrouping+0x40>)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	60d3      	str	r3, [r2, #12]
}
 80050e0:	bf00      	nop
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	e000ed00 	.word	0xe000ed00
 80050f0:	05fa0000 	.word	0x05fa0000

080050f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050f8:	4b04      	ldr	r3, [pc, #16]	; (800510c <__NVIC_GetPriorityGrouping+0x18>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	0a1b      	lsrs	r3, r3, #8
 80050fe:	f003 0307 	and.w	r3, r3, #7
}
 8005102:	4618      	mov	r0, r3
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	e000ed00 	.word	0xe000ed00

08005110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	4603      	mov	r3, r0
 8005118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800511a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800511e:	2b00      	cmp	r3, #0
 8005120:	db0b      	blt.n	800513a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	f003 021f 	and.w	r2, r3, #31
 8005128:	4907      	ldr	r1, [pc, #28]	; (8005148 <__NVIC_EnableIRQ+0x38>)
 800512a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	2001      	movs	r0, #1
 8005132:	fa00 f202 	lsl.w	r2, r0, r2
 8005136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	e000e100 	.word	0xe000e100

0800514c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	4603      	mov	r3, r0
 8005154:	6039      	str	r1, [r7, #0]
 8005156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515c:	2b00      	cmp	r3, #0
 800515e:	db0a      	blt.n	8005176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	b2da      	uxtb	r2, r3
 8005164:	490c      	ldr	r1, [pc, #48]	; (8005198 <__NVIC_SetPriority+0x4c>)
 8005166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516a:	0112      	lsls	r2, r2, #4
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	440b      	add	r3, r1
 8005170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005174:	e00a      	b.n	800518c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	b2da      	uxtb	r2, r3
 800517a:	4908      	ldr	r1, [pc, #32]	; (800519c <__NVIC_SetPriority+0x50>)
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	3b04      	subs	r3, #4
 8005184:	0112      	lsls	r2, r2, #4
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	440b      	add	r3, r1
 800518a:	761a      	strb	r2, [r3, #24]
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	e000e100 	.word	0xe000e100
 800519c:	e000ed00 	.word	0xe000ed00

080051a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b089      	sub	sp, #36	; 0x24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f1c3 0307 	rsb	r3, r3, #7
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	bf28      	it	cs
 80051be:	2304      	movcs	r3, #4
 80051c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	3304      	adds	r3, #4
 80051c6:	2b06      	cmp	r3, #6
 80051c8:	d902      	bls.n	80051d0 <NVIC_EncodePriority+0x30>
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	3b03      	subs	r3, #3
 80051ce:	e000      	b.n	80051d2 <NVIC_EncodePriority+0x32>
 80051d0:	2300      	movs	r3, #0
 80051d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	43da      	mvns	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	401a      	ands	r2, r3
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	fa01 f303 	lsl.w	r3, r1, r3
 80051f2:	43d9      	mvns	r1, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051f8:	4313      	orrs	r3, r2
         );
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3724      	adds	r7, #36	; 0x24
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff ff4c 	bl	80050ac <__NVIC_SetPriorityGrouping>
}
 8005214:	bf00      	nop
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
 8005228:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800522e:	f7ff ff61 	bl	80050f4 <__NVIC_GetPriorityGrouping>
 8005232:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	6978      	ldr	r0, [r7, #20]
 800523a:	f7ff ffb1 	bl	80051a0 <NVIC_EncodePriority>
 800523e:	4602      	mov	r2, r0
 8005240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005244:	4611      	mov	r1, r2
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff ff80 	bl	800514c <__NVIC_SetPriority>
}
 800524c:	bf00      	nop
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	4603      	mov	r3, r0
 800525c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800525e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff ff54 	bl	8005110 <__NVIC_EnableIRQ>
}
 8005268:	bf00      	nop
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e014      	b.n	80052ac <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	791b      	ldrb	r3, [r3, #4]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d105      	bne.n	8005298 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fb faca 	bl	800082c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ca:	d120      	bne.n	800530e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052da:	d118      	bne.n	800530e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2204      	movs	r2, #4
 80052e0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f043 0201 	orr.w	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80052f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005306:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f82d 	bl	8005368 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800531c:	d120      	bne.n	8005360 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800532c:	d118      	bne.n	8005360 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2204      	movs	r2, #4
 8005332:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f043 0202 	orr.w	r2, r3, #2
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005348:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005358:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f85d 	bl	800541a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	795b      	ldrb	r3, [r3, #5]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_DAC_ConfigChannel+0x18>
 8005390:	2302      	movs	r3, #2
 8005392:	e03c      	b.n	800540e <HAL_DAC_ConfigChannel+0x92>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2202      	movs	r2, #2
 800539e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f003 0310 	and.w	r3, r3, #16
 80053ae:	f640 72fe 	movw	r2, #4094	; 0xffe
 80053b2:	fa02 f303 	lsl.w	r3, r2, r3
 80053b6:	43db      	mvns	r3, r3
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	4013      	ands	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	fa02 f303 	lsl.w	r3, r2, r3
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6819      	ldr	r1, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	22c0      	movs	r2, #192	; 0xc0
 80053f2:	fa02 f303 	lsl.w	r3, r2, r3
 80053f6:	43da      	mvns	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	400a      	ands	r2, r1
 80053fe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2201      	movs	r2, #1
 8005404:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	371c      	adds	r7, #28
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
	...

08005430 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800543c:	f7ff fa0c 	bl	8004858 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e099      	b.n	8005580 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 0201 	bic.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800546c:	e00f      	b.n	800548e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800546e:	f7ff f9f3 	bl	8004858 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b05      	cmp	r3, #5
 800547a:	d908      	bls.n	800548e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2220      	movs	r2, #32
 8005480:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2203      	movs	r2, #3
 8005486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e078      	b.n	8005580 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e8      	bne.n	800546e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4b38      	ldr	r3, [pc, #224]	; (8005588 <HAL_DMA_Init+0x158>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d107      	bne.n	80054f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f0:	4313      	orrs	r3, r2
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f023 0307 	bic.w	r3, r3, #7
 800550e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	2b04      	cmp	r3, #4
 8005520:	d117      	bne.n	8005552 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4313      	orrs	r3, r2
 800552a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00e      	beq.n	8005552 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f8bd 	bl	80056b4 <DMA_CheckFifoParam>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d008      	beq.n	8005552 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2240      	movs	r2, #64	; 0x40
 8005544:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800554e:	2301      	movs	r3, #1
 8005550:	e016      	b.n	8005580 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f874 	bl	8005648 <DMA_CalcBaseAndBitshift>
 8005560:	4603      	mov	r3, r0
 8005562:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005568:	223f      	movs	r2, #63	; 0x3f
 800556a:	409a      	lsls	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	f010803f 	.word	0xf010803f

0800558c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e050      	b.n	8005640 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d101      	bne.n	80055ae <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80055aa:	2302      	movs	r3, #2
 80055ac:	e048      	b.n	8005640 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0201 	bic.w	r2, r2, #1
 80055bc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2200      	movs	r2, #0
 80055cc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2200      	movs	r2, #0
 80055d4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2200      	movs	r2, #0
 80055dc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2200      	movs	r2, #0
 80055e4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2221      	movs	r2, #33	; 0x21
 80055ec:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f82a 	bl	8005648 <DMA_CalcBaseAndBitshift>
 80055f4:	4603      	mov	r3, r0
 80055f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fc:	223f      	movs	r2, #63	; 0x3f
 80055fe:	409a      	lsls	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	3b10      	subs	r3, #16
 8005658:	4a13      	ldr	r2, [pc, #76]	; (80056a8 <DMA_CalcBaseAndBitshift+0x60>)
 800565a:	fba2 2303 	umull	r2, r3, r2, r3
 800565e:	091b      	lsrs	r3, r3, #4
 8005660:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005662:	4a12      	ldr	r2, [pc, #72]	; (80056ac <DMA_CalcBaseAndBitshift+0x64>)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b03      	cmp	r3, #3
 8005674:	d908      	bls.n	8005688 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <DMA_CalcBaseAndBitshift+0x68>)
 800567e:	4013      	ands	r3, r2
 8005680:	1d1a      	adds	r2, r3, #4
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	659a      	str	r2, [r3, #88]	; 0x58
 8005686:	e006      	b.n	8005696 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	461a      	mov	r2, r3
 800568e:	4b08      	ldr	r3, [pc, #32]	; (80056b0 <DMA_CalcBaseAndBitshift+0x68>)
 8005690:	4013      	ands	r3, r2
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	aaaaaaab 	.word	0xaaaaaaab
 80056ac:	0804cd98 	.word	0x0804cd98
 80056b0:	fffffc00 	.word	0xfffffc00

080056b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056bc:	2300      	movs	r3, #0
 80056be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d11f      	bne.n	800570e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d856      	bhi.n	8005782 <DMA_CheckFifoParam+0xce>
 80056d4:	a201      	add	r2, pc, #4	; (adr r2, 80056dc <DMA_CheckFifoParam+0x28>)
 80056d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056da:	bf00      	nop
 80056dc:	080056ed 	.word	0x080056ed
 80056e0:	080056ff 	.word	0x080056ff
 80056e4:	080056ed 	.word	0x080056ed
 80056e8:	08005783 	.word	0x08005783
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d046      	beq.n	8005786 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056fc:	e043      	b.n	8005786 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005702:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005706:	d140      	bne.n	800578a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800570c:	e03d      	b.n	800578a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005716:	d121      	bne.n	800575c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b03      	cmp	r3, #3
 800571c:	d837      	bhi.n	800578e <DMA_CheckFifoParam+0xda>
 800571e:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <DMA_CheckFifoParam+0x70>)
 8005720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005724:	08005735 	.word	0x08005735
 8005728:	0800573b 	.word	0x0800573b
 800572c:	08005735 	.word	0x08005735
 8005730:	0800574d 	.word	0x0800574d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
      break;
 8005738:	e030      	b.n	800579c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d025      	beq.n	8005792 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800574a:	e022      	b.n	8005792 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005754:	d11f      	bne.n	8005796 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800575a:	e01c      	b.n	8005796 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d903      	bls.n	800576a <DMA_CheckFifoParam+0xb6>
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2b03      	cmp	r3, #3
 8005766:	d003      	beq.n	8005770 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005768:	e018      	b.n	800579c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	73fb      	strb	r3, [r7, #15]
      break;
 800576e:	e015      	b.n	800579c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00e      	beq.n	800579a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	73fb      	strb	r3, [r7, #15]
      break;
 8005780:	e00b      	b.n	800579a <DMA_CheckFifoParam+0xe6>
      break;
 8005782:	bf00      	nop
 8005784:	e00a      	b.n	800579c <DMA_CheckFifoParam+0xe8>
      break;
 8005786:	bf00      	nop
 8005788:	e008      	b.n	800579c <DMA_CheckFifoParam+0xe8>
      break;
 800578a:	bf00      	nop
 800578c:	e006      	b.n	800579c <DMA_CheckFifoParam+0xe8>
      break;
 800578e:	bf00      	nop
 8005790:	e004      	b.n	800579c <DMA_CheckFifoParam+0xe8>
      break;
 8005792:	bf00      	nop
 8005794:	e002      	b.n	800579c <DMA_CheckFifoParam+0xe8>
      break;   
 8005796:	bf00      	nop
 8005798:	e000      	b.n	800579c <DMA_CheckFifoParam+0xe8>
      break;
 800579a:	bf00      	nop
    }
  } 
  
  return status; 
 800579c:	7bfb      	ldrb	r3, [r7, #15]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop

080057ac <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e039      	b.n	8005832 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fb f8a4 	bl	8000920 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fc:	f023 0107 	bic.w	r1, r3, #7
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005812:	4b0a      	ldr	r3, [pc, #40]	; (800583c <HAL_DMA2D_Init+0x90>)
 8005814:	4013      	ands	r3, r2
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	68d1      	ldr	r1, [r2, #12]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6812      	ldr	r2, [r2, #0]
 800581e:	430b      	orrs	r3, r1
 8005820:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	ffffc000 	.word	0xffffc000

08005840 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af02      	add	r7, sp, #8
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_DMA2D_Start+0x1c>
 8005858:	2302      	movs	r3, #2
 800585a:	e018      	b.n	800588e <HAL_DMA2D_Start+0x4e>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	68b9      	ldr	r1, [r7, #8]
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 fa98 	bl	8005dac <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b086      	sub	sp, #24
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d056      	beq.n	8005960 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80058b2:	f7fe ffd1 	bl	8004858 <HAL_GetTick>
 80058b6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80058b8:	e04b      	b.n	8005952 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d023      	beq.n	8005914 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d005      	beq.n	80058e2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058da:	f043 0202 	orr.w	r2, r3, #2
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f0:	f043 0201 	orr.w	r2, r3, #1
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2221      	movs	r2, #33	; 0x21
 80058fe:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2204      	movs	r2, #4
 8005904:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e0a5      	b.n	8005a60 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800591a:	d01a      	beq.n	8005952 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800591c:	f7fe ff9c 	bl	8004858 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d302      	bcc.n	8005932 <HAL_DMA2D_PollForTransfer+0x9c>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10f      	bne.n	8005952 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005936:	f043 0220 	orr.w	r2, r3, #32
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2203      	movs	r2, #3
 8005942:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e086      	b.n	8005a60 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0ac      	beq.n	80058ba <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d061      	beq.n	8005a46 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005982:	f7fe ff69 	bl	8004858 <HAL_GetTick>
 8005986:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005988:	e056      	b.n	8005a38 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005998:	2b00      	cmp	r3, #0
 800599a:	d02e      	beq.n	80059fa <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d005      	beq.n	80059b2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	f043 0204 	orr.w	r2, r3, #4
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f003 0320 	and.w	r3, r3, #32
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c0:	f043 0202 	orr.w	r2, r3, #2
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d005      	beq.n	80059de <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d6:	f043 0201 	orr.w	r2, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2229      	movs	r2, #41	; 0x29
 80059e4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2204      	movs	r2, #4
 80059ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e032      	b.n	8005a60 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a00:	d01a      	beq.n	8005a38 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a02:	f7fe ff29 	bl	8004858 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d302      	bcc.n	8005a18 <HAL_DMA2D_PollForTransfer+0x182>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10f      	bne.n	8005a38 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1c:	f043 0220 	orr.w	r2, r3, #32
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2203      	movs	r2, #3
 8005a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e013      	b.n	8005a60 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f003 0310 	and.w	r3, r3, #16
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0a1      	beq.n	800598a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2212      	movs	r2, #18
 8005a4c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d026      	beq.n	8005ad8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d021      	beq.n	8005ad8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005aa2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa8:	f043 0201 	orr.w	r2, r3, #1
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2204      	movs	r2, #4
 8005abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f003 0320 	and.w	r3, r3, #32
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d026      	beq.n	8005b30 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d021      	beq.n	8005b30 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005afa:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2220      	movs	r2, #32
 8005b02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b08:	f043 0202 	orr.w	r2, r3, #2
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2204      	movs	r2, #4
 8005b14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d026      	beq.n	8005b88 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d021      	beq.n	8005b88 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b52:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2208      	movs	r2, #8
 8005b5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b60:	f043 0204 	orr.w	r2, r3, #4
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2204      	movs	r2, #4
 8005b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d013      	beq.n	8005bba <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00e      	beq.n	8005bba <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005baa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2204      	movs	r2, #4
 8005bb2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f853 	bl	8005c60 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d024      	beq.n	8005c0e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d01f      	beq.n	8005c0e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005bdc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2202      	movs	r2, #2
 8005be4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f003 0310 	and.w	r3, r3, #16
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d01f      	beq.n	8005c58 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d01a      	beq.n	8005c58 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c30:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2210      	movs	r2, #16
 8005c38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f80e 	bl	8005c74 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005c58:	bf00      	nop
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <HAL_DMA2D_ConfigLayer+0x20>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e079      	b.n	8005d9c <HAL_DMA2D_ConfigLayer+0x114>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	3318      	adds	r3, #24
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	041b      	lsls	r3, r3, #16
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005cd2:	4b35      	ldr	r3, [pc, #212]	; (8005da8 <HAL_DMA2D_ConfigLayer+0x120>)
 8005cd4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b0a      	cmp	r3, #10
 8005cdc:	d003      	beq.n	8005ce6 <HAL_DMA2D_ConfigLayer+0x5e>
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b09      	cmp	r3, #9
 8005ce4:	d107      	bne.n	8005cf6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	e005      	b.n	8005d02 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	061b      	lsls	r3, r3, #24
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d120      	bne.n	8005d4a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	43db      	mvns	r3, r3
 8005d12:	ea02 0103 	and.w	r1, r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	2b0a      	cmp	r3, #10
 8005d30:	d003      	beq.n	8005d3a <HAL_DMA2D_ConfigLayer+0xb2>
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	2b09      	cmp	r3, #9
 8005d38:	d127      	bne.n	8005d8a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005d46:	629a      	str	r2, [r3, #40]	; 0x28
 8005d48:	e01f      	b.n	8005d8a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	43db      	mvns	r3, r3
 8005d54:	ea02 0103 	and.w	r1, r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	2b0a      	cmp	r3, #10
 8005d72:	d003      	beq.n	8005d7c <HAL_DMA2D_ConfigLayer+0xf4>
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b09      	cmp	r3, #9
 8005d7a:	d106      	bne.n	8005d8a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005d88:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	371c      	adds	r7, #28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	ff03000f 	.word	0xff03000f

08005dac <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b08b      	sub	sp, #44	; 0x2c
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	041a      	lsls	r2, r3, #16
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005de4:	d174      	bne.n	8005ed0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005dec:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005df4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005dfc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d108      	bne.n	8005e1e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	431a      	orrs	r2, r3
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1c:	e053      	b.n	8005ec6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d106      	bne.n	8005e34 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24
 8005e32:	e048      	b.n	8005ec6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d111      	bne.n	8005e60 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	0cdb      	lsrs	r3, r3, #19
 8005e40:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	0a9b      	lsrs	r3, r3, #10
 8005e46:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	08db      	lsrs	r3, r3, #3
 8005e4c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	02db      	lsls	r3, r3, #11
 8005e56:	4313      	orrs	r3, r2
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e5e:	e032      	b.n	8005ec6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d117      	bne.n	8005e98 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	0fdb      	lsrs	r3, r3, #31
 8005e6c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	0cdb      	lsrs	r3, r3, #19
 8005e72:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	0adb      	lsrs	r3, r3, #11
 8005e78:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	08db      	lsrs	r3, r3, #3
 8005e7e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	029b      	lsls	r3, r3, #10
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	03db      	lsls	r3, r3, #15
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
 8005e96:	e016      	b.n	8005ec6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	0f1b      	lsrs	r3, r3, #28
 8005e9c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	0d1b      	lsrs	r3, r3, #20
 8005ea2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	0b1b      	lsrs	r3, r3, #12
 8005ea8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	091b      	lsrs	r3, r3, #4
 8005eae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	011a      	lsls	r2, r3, #4
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	031b      	lsls	r3, r3, #12
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ecc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005ece:	e003      	b.n	8005ed8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	60da      	str	r2, [r3, #12]
}
 8005ed8:	bf00      	nop
 8005eda:	372c      	adds	r7, #44	; 0x2c
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b089      	sub	sp, #36	; 0x24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005efa:	2300      	movs	r3, #0
 8005efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005efe:	2300      	movs	r3, #0
 8005f00:	61fb      	str	r3, [r7, #28]
 8005f02:	e175      	b.n	80061f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005f04:	2201      	movs	r2, #1
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	4013      	ands	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	f040 8164 	bne.w	80061ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d005      	beq.n	8005f3a <HAL_GPIO_Init+0x56>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d130      	bne.n	8005f9c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	2203      	movs	r2, #3
 8005f46:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4a:	43db      	mvns	r3, r3
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f70:	2201      	movs	r2, #1
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	091b      	lsrs	r3, r3, #4
 8005f86:	f003 0201 	and.w	r2, r3, #1
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f003 0303 	and.w	r3, r3, #3
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d017      	beq.n	8005fd8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	2203      	movs	r2, #3
 8005fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb8:	43db      	mvns	r3, r3
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f003 0303 	and.w	r3, r3, #3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d123      	bne.n	800602c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	08da      	lsrs	r2, r3, #3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3208      	adds	r2, #8
 8005fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	f003 0307 	and.w	r3, r3, #7
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	220f      	movs	r2, #15
 8005ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8006000:	43db      	mvns	r3, r3
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	4013      	ands	r3, r2
 8006006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	4313      	orrs	r3, r2
 800601c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	08da      	lsrs	r2, r3, #3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	3208      	adds	r2, #8
 8006026:	69b9      	ldr	r1, [r7, #24]
 8006028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	2203      	movs	r2, #3
 8006038:	fa02 f303 	lsl.w	r3, r2, r3
 800603c:	43db      	mvns	r3, r3
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	4013      	ands	r3, r2
 8006042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f003 0203 	and.w	r2, r3, #3
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	fa02 f303 	lsl.w	r3, r2, r3
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	4313      	orrs	r3, r2
 8006058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 80be 	beq.w	80061ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800606e:	4b66      	ldr	r3, [pc, #408]	; (8006208 <HAL_GPIO_Init+0x324>)
 8006070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006072:	4a65      	ldr	r2, [pc, #404]	; (8006208 <HAL_GPIO_Init+0x324>)
 8006074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006078:	6453      	str	r3, [r2, #68]	; 0x44
 800607a:	4b63      	ldr	r3, [pc, #396]	; (8006208 <HAL_GPIO_Init+0x324>)
 800607c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006086:	4a61      	ldr	r2, [pc, #388]	; (800620c <HAL_GPIO_Init+0x328>)
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	089b      	lsrs	r3, r3, #2
 800608c:	3302      	adds	r3, #2
 800608e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006092:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	220f      	movs	r2, #15
 800609e:	fa02 f303 	lsl.w	r3, r2, r3
 80060a2:	43db      	mvns	r3, r3
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	4013      	ands	r3, r2
 80060a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a58      	ldr	r2, [pc, #352]	; (8006210 <HAL_GPIO_Init+0x32c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d037      	beq.n	8006122 <HAL_GPIO_Init+0x23e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a57      	ldr	r2, [pc, #348]	; (8006214 <HAL_GPIO_Init+0x330>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d031      	beq.n	800611e <HAL_GPIO_Init+0x23a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a56      	ldr	r2, [pc, #344]	; (8006218 <HAL_GPIO_Init+0x334>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d02b      	beq.n	800611a <HAL_GPIO_Init+0x236>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a55      	ldr	r2, [pc, #340]	; (800621c <HAL_GPIO_Init+0x338>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d025      	beq.n	8006116 <HAL_GPIO_Init+0x232>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a54      	ldr	r2, [pc, #336]	; (8006220 <HAL_GPIO_Init+0x33c>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d01f      	beq.n	8006112 <HAL_GPIO_Init+0x22e>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a53      	ldr	r2, [pc, #332]	; (8006224 <HAL_GPIO_Init+0x340>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d019      	beq.n	800610e <HAL_GPIO_Init+0x22a>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a52      	ldr	r2, [pc, #328]	; (8006228 <HAL_GPIO_Init+0x344>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d013      	beq.n	800610a <HAL_GPIO_Init+0x226>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a51      	ldr	r2, [pc, #324]	; (800622c <HAL_GPIO_Init+0x348>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d00d      	beq.n	8006106 <HAL_GPIO_Init+0x222>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a50      	ldr	r2, [pc, #320]	; (8006230 <HAL_GPIO_Init+0x34c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d007      	beq.n	8006102 <HAL_GPIO_Init+0x21e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a4f      	ldr	r2, [pc, #316]	; (8006234 <HAL_GPIO_Init+0x350>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d101      	bne.n	80060fe <HAL_GPIO_Init+0x21a>
 80060fa:	2309      	movs	r3, #9
 80060fc:	e012      	b.n	8006124 <HAL_GPIO_Init+0x240>
 80060fe:	230a      	movs	r3, #10
 8006100:	e010      	b.n	8006124 <HAL_GPIO_Init+0x240>
 8006102:	2308      	movs	r3, #8
 8006104:	e00e      	b.n	8006124 <HAL_GPIO_Init+0x240>
 8006106:	2307      	movs	r3, #7
 8006108:	e00c      	b.n	8006124 <HAL_GPIO_Init+0x240>
 800610a:	2306      	movs	r3, #6
 800610c:	e00a      	b.n	8006124 <HAL_GPIO_Init+0x240>
 800610e:	2305      	movs	r3, #5
 8006110:	e008      	b.n	8006124 <HAL_GPIO_Init+0x240>
 8006112:	2304      	movs	r3, #4
 8006114:	e006      	b.n	8006124 <HAL_GPIO_Init+0x240>
 8006116:	2303      	movs	r3, #3
 8006118:	e004      	b.n	8006124 <HAL_GPIO_Init+0x240>
 800611a:	2302      	movs	r3, #2
 800611c:	e002      	b.n	8006124 <HAL_GPIO_Init+0x240>
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <HAL_GPIO_Init+0x240>
 8006122:	2300      	movs	r3, #0
 8006124:	69fa      	ldr	r2, [r7, #28]
 8006126:	f002 0203 	and.w	r2, r2, #3
 800612a:	0092      	lsls	r2, r2, #2
 800612c:	4093      	lsls	r3, r2
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	4313      	orrs	r3, r2
 8006132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006134:	4935      	ldr	r1, [pc, #212]	; (800620c <HAL_GPIO_Init+0x328>)
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	089b      	lsrs	r3, r3, #2
 800613a:	3302      	adds	r3, #2
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006142:	4b3d      	ldr	r3, [pc, #244]	; (8006238 <HAL_GPIO_Init+0x354>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	43db      	mvns	r3, r3
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	4013      	ands	r3, r2
 8006150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	4313      	orrs	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006166:	4a34      	ldr	r2, [pc, #208]	; (8006238 <HAL_GPIO_Init+0x354>)
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800616c:	4b32      	ldr	r3, [pc, #200]	; (8006238 <HAL_GPIO_Init+0x354>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	43db      	mvns	r3, r3
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	4013      	ands	r3, r2
 800617a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	4313      	orrs	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006190:	4a29      	ldr	r2, [pc, #164]	; (8006238 <HAL_GPIO_Init+0x354>)
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006196:	4b28      	ldr	r3, [pc, #160]	; (8006238 <HAL_GPIO_Init+0x354>)
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	43db      	mvns	r3, r3
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	4013      	ands	r3, r2
 80061a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061ba:	4a1f      	ldr	r2, [pc, #124]	; (8006238 <HAL_GPIO_Init+0x354>)
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061c0:	4b1d      	ldr	r3, [pc, #116]	; (8006238 <HAL_GPIO_Init+0x354>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	43db      	mvns	r3, r3
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	4013      	ands	r3, r2
 80061ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061e4:	4a14      	ldr	r2, [pc, #80]	; (8006238 <HAL_GPIO_Init+0x354>)
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	3301      	adds	r3, #1
 80061ee:	61fb      	str	r3, [r7, #28]
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	2b0f      	cmp	r3, #15
 80061f4:	f67f ae86 	bls.w	8005f04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80061f8:	bf00      	nop
 80061fa:	bf00      	nop
 80061fc:	3724      	adds	r7, #36	; 0x24
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	40023800 	.word	0x40023800
 800620c:	40013800 	.word	0x40013800
 8006210:	40020000 	.word	0x40020000
 8006214:	40020400 	.word	0x40020400
 8006218:	40020800 	.word	0x40020800
 800621c:	40020c00 	.word	0x40020c00
 8006220:	40021000 	.word	0x40021000
 8006224:	40021400 	.word	0x40021400
 8006228:	40021800 	.word	0x40021800
 800622c:	40021c00 	.word	0x40021c00
 8006230:	40022000 	.word	0x40022000
 8006234:	40022400 	.word	0x40022400
 8006238:	40013c00 	.word	0x40013c00

0800623c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006246:	2300      	movs	r3, #0
 8006248:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800624e:	2300      	movs	r3, #0
 8006250:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006252:	2300      	movs	r3, #0
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	e0d9      	b.n	800640c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006258:	2201      	movs	r2, #1
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	fa02 f303 	lsl.w	r3, r2, r3
 8006260:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	4013      	ands	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	429a      	cmp	r2, r3
 8006270:	f040 80c9 	bne.w	8006406 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006274:	4a6b      	ldr	r2, [pc, #428]	; (8006424 <HAL_GPIO_DeInit+0x1e8>)
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	089b      	lsrs	r3, r3, #2
 800627a:	3302      	adds	r3, #2
 800627c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006280:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f003 0303 	and.w	r3, r3, #3
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	220f      	movs	r2, #15
 800628c:	fa02 f303 	lsl.w	r3, r2, r3
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	4013      	ands	r3, r2
 8006294:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a63      	ldr	r2, [pc, #396]	; (8006428 <HAL_GPIO_DeInit+0x1ec>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d037      	beq.n	800630e <HAL_GPIO_DeInit+0xd2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a62      	ldr	r2, [pc, #392]	; (800642c <HAL_GPIO_DeInit+0x1f0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d031      	beq.n	800630a <HAL_GPIO_DeInit+0xce>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a61      	ldr	r2, [pc, #388]	; (8006430 <HAL_GPIO_DeInit+0x1f4>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d02b      	beq.n	8006306 <HAL_GPIO_DeInit+0xca>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a60      	ldr	r2, [pc, #384]	; (8006434 <HAL_GPIO_DeInit+0x1f8>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d025      	beq.n	8006302 <HAL_GPIO_DeInit+0xc6>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a5f      	ldr	r2, [pc, #380]	; (8006438 <HAL_GPIO_DeInit+0x1fc>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d01f      	beq.n	80062fe <HAL_GPIO_DeInit+0xc2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a5e      	ldr	r2, [pc, #376]	; (800643c <HAL_GPIO_DeInit+0x200>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d019      	beq.n	80062fa <HAL_GPIO_DeInit+0xbe>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a5d      	ldr	r2, [pc, #372]	; (8006440 <HAL_GPIO_DeInit+0x204>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <HAL_GPIO_DeInit+0xba>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a5c      	ldr	r2, [pc, #368]	; (8006444 <HAL_GPIO_DeInit+0x208>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00d      	beq.n	80062f2 <HAL_GPIO_DeInit+0xb6>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a5b      	ldr	r2, [pc, #364]	; (8006448 <HAL_GPIO_DeInit+0x20c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d007      	beq.n	80062ee <HAL_GPIO_DeInit+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a5a      	ldr	r2, [pc, #360]	; (800644c <HAL_GPIO_DeInit+0x210>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d101      	bne.n	80062ea <HAL_GPIO_DeInit+0xae>
 80062e6:	2309      	movs	r3, #9
 80062e8:	e012      	b.n	8006310 <HAL_GPIO_DeInit+0xd4>
 80062ea:	230a      	movs	r3, #10
 80062ec:	e010      	b.n	8006310 <HAL_GPIO_DeInit+0xd4>
 80062ee:	2308      	movs	r3, #8
 80062f0:	e00e      	b.n	8006310 <HAL_GPIO_DeInit+0xd4>
 80062f2:	2307      	movs	r3, #7
 80062f4:	e00c      	b.n	8006310 <HAL_GPIO_DeInit+0xd4>
 80062f6:	2306      	movs	r3, #6
 80062f8:	e00a      	b.n	8006310 <HAL_GPIO_DeInit+0xd4>
 80062fa:	2305      	movs	r3, #5
 80062fc:	e008      	b.n	8006310 <HAL_GPIO_DeInit+0xd4>
 80062fe:	2304      	movs	r3, #4
 8006300:	e006      	b.n	8006310 <HAL_GPIO_DeInit+0xd4>
 8006302:	2303      	movs	r3, #3
 8006304:	e004      	b.n	8006310 <HAL_GPIO_DeInit+0xd4>
 8006306:	2302      	movs	r3, #2
 8006308:	e002      	b.n	8006310 <HAL_GPIO_DeInit+0xd4>
 800630a:	2301      	movs	r3, #1
 800630c:	e000      	b.n	8006310 <HAL_GPIO_DeInit+0xd4>
 800630e:	2300      	movs	r3, #0
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	f002 0203 	and.w	r2, r2, #3
 8006316:	0092      	lsls	r2, r2, #2
 8006318:	4093      	lsls	r3, r2
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	429a      	cmp	r2, r3
 800631e:	d132      	bne.n	8006386 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006320:	4b4b      	ldr	r3, [pc, #300]	; (8006450 <HAL_GPIO_DeInit+0x214>)
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	43db      	mvns	r3, r3
 8006328:	4949      	ldr	r1, [pc, #292]	; (8006450 <HAL_GPIO_DeInit+0x214>)
 800632a:	4013      	ands	r3, r2
 800632c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800632e:	4b48      	ldr	r3, [pc, #288]	; (8006450 <HAL_GPIO_DeInit+0x214>)
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	43db      	mvns	r3, r3
 8006336:	4946      	ldr	r1, [pc, #280]	; (8006450 <HAL_GPIO_DeInit+0x214>)
 8006338:	4013      	ands	r3, r2
 800633a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800633c:	4b44      	ldr	r3, [pc, #272]	; (8006450 <HAL_GPIO_DeInit+0x214>)
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	43db      	mvns	r3, r3
 8006344:	4942      	ldr	r1, [pc, #264]	; (8006450 <HAL_GPIO_DeInit+0x214>)
 8006346:	4013      	ands	r3, r2
 8006348:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800634a:	4b41      	ldr	r3, [pc, #260]	; (8006450 <HAL_GPIO_DeInit+0x214>)
 800634c:	689a      	ldr	r2, [r3, #8]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	43db      	mvns	r3, r3
 8006352:	493f      	ldr	r1, [pc, #252]	; (8006450 <HAL_GPIO_DeInit+0x214>)
 8006354:	4013      	ands	r3, r2
 8006356:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	220f      	movs	r2, #15
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006368:	4a2e      	ldr	r2, [pc, #184]	; (8006424 <HAL_GPIO_DeInit+0x1e8>)
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	089b      	lsrs	r3, r3, #2
 800636e:	3302      	adds	r3, #2
 8006370:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	43da      	mvns	r2, r3
 8006378:	482a      	ldr	r0, [pc, #168]	; (8006424 <HAL_GPIO_DeInit+0x1e8>)
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	089b      	lsrs	r3, r3, #2
 800637e:	400a      	ands	r2, r1
 8006380:	3302      	adds	r3, #2
 8006382:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	2103      	movs	r1, #3
 8006390:	fa01 f303 	lsl.w	r3, r1, r3
 8006394:	43db      	mvns	r3, r3
 8006396:	401a      	ands	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	08da      	lsrs	r2, r3, #3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3208      	adds	r2, #8
 80063a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f003 0307 	and.w	r3, r3, #7
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	220f      	movs	r2, #15
 80063b2:	fa02 f303 	lsl.w	r3, r2, r3
 80063b6:	43db      	mvns	r3, r3
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	08d2      	lsrs	r2, r2, #3
 80063bc:	4019      	ands	r1, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3208      	adds	r2, #8
 80063c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68da      	ldr	r2, [r3, #12]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	2103      	movs	r1, #3
 80063d0:	fa01 f303 	lsl.w	r3, r1, r3
 80063d4:	43db      	mvns	r3, r3
 80063d6:	401a      	ands	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	2101      	movs	r1, #1
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	fa01 f303 	lsl.w	r3, r1, r3
 80063e8:	43db      	mvns	r3, r3
 80063ea:	401a      	ands	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	2103      	movs	r1, #3
 80063fa:	fa01 f303 	lsl.w	r3, r1, r3
 80063fe:	43db      	mvns	r3, r3
 8006400:	401a      	ands	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	3301      	adds	r3, #1
 800640a:	617b      	str	r3, [r7, #20]
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2b0f      	cmp	r3, #15
 8006410:	f67f af22 	bls.w	8006258 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006414:	bf00      	nop
 8006416:	bf00      	nop
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	40013800 	.word	0x40013800
 8006428:	40020000 	.word	0x40020000
 800642c:	40020400 	.word	0x40020400
 8006430:	40020800 	.word	0x40020800
 8006434:	40020c00 	.word	0x40020c00
 8006438:	40021000 	.word	0x40021000
 800643c:	40021400 	.word	0x40021400
 8006440:	40021800 	.word	0x40021800
 8006444:	40021c00 	.word	0x40021c00
 8006448:	40022000 	.word	0x40022000
 800644c:	40022400 	.word	0x40022400
 8006450:	40013c00 	.word	0x40013c00

08006454 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	887b      	ldrh	r3, [r7, #2]
 8006466:	4013      	ands	r3, r2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800646c:	2301      	movs	r3, #1
 800646e:	73fb      	strb	r3, [r7, #15]
 8006470:	e001      	b.n	8006476 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006472:	2300      	movs	r3, #0
 8006474:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006476:	7bfb      	ldrb	r3, [r7, #15]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	807b      	strh	r3, [r7, #2]
 8006490:	4613      	mov	r3, r2
 8006492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006494:	787b      	ldrb	r3, [r7, #1]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800649a:	887a      	ldrh	r2, [r7, #2]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80064a0:	e003      	b.n	80064aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80064a2:	887b      	ldrh	r3, [r7, #2]
 80064a4:	041a      	lsls	r2, r3, #16
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	619a      	str	r2, [r3, #24]
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
	...

080064b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e07f      	b.n	80065ca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d106      	bne.n	80064e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fb f910 	bl	8001704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2224      	movs	r2, #36	; 0x24
 80064e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0201 	bic.w	r2, r2, #1
 80064fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006508:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006518:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d107      	bne.n	8006532 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	689a      	ldr	r2, [r3, #8]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800652e:	609a      	str	r2, [r3, #8]
 8006530:	e006      	b.n	8006540 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800653e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	2b02      	cmp	r3, #2
 8006546:	d104      	bne.n	8006552 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006550:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6859      	ldr	r1, [r3, #4]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	4b1d      	ldr	r3, [pc, #116]	; (80065d4 <HAL_I2C_Init+0x11c>)
 800655e:	430b      	orrs	r3, r1
 8006560:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006570:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691a      	ldr	r2, [r3, #16]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	69d9      	ldr	r1, [r3, #28]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a1a      	ldr	r2, [r3, #32]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0201 	orr.w	r2, r2, #1
 80065aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	02008000 	.word	0x02008000

080065d8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e021      	b.n	800662e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2224      	movs	r2, #36	; 0x24
 80065ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0201 	bic.w	r2, r2, #1
 8006600:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7fb f926 	bl	8001854 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af02      	add	r7, sp, #8
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	4608      	mov	r0, r1
 8006642:	4611      	mov	r1, r2
 8006644:	461a      	mov	r2, r3
 8006646:	4603      	mov	r3, r0
 8006648:	817b      	strh	r3, [r7, #10]
 800664a:	460b      	mov	r3, r1
 800664c:	813b      	strh	r3, [r7, #8]
 800664e:	4613      	mov	r3, r2
 8006650:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b20      	cmp	r3, #32
 800665c:	f040 80f9 	bne.w	8006852 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <HAL_I2C_Mem_Write+0x34>
 8006666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006668:	2b00      	cmp	r3, #0
 800666a:	d105      	bne.n	8006678 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006672:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e0ed      	b.n	8006854 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <HAL_I2C_Mem_Write+0x4e>
 8006682:	2302      	movs	r3, #2
 8006684:	e0e6      	b.n	8006854 <HAL_I2C_Mem_Write+0x21c>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800668e:	f7fe f8e3 	bl	8004858 <HAL_GetTick>
 8006692:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	2319      	movs	r3, #25
 800669a:	2201      	movs	r2, #1
 800669c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 fad1 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e0d1      	b.n	8006854 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2221      	movs	r2, #33	; 0x21
 80066b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2240      	movs	r2, #64	; 0x40
 80066bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a3a      	ldr	r2, [r7, #32]
 80066ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80066d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066d8:	88f8      	ldrh	r0, [r7, #6]
 80066da:	893a      	ldrh	r2, [r7, #8]
 80066dc:	8979      	ldrh	r1, [r7, #10]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	9301      	str	r3, [sp, #4]
 80066e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	4603      	mov	r3, r0
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 f9e1 	bl	8006ab0 <I2C_RequestMemoryWrite>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d005      	beq.n	8006700 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e0a9      	b.n	8006854 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006704:	b29b      	uxth	r3, r3
 8006706:	2bff      	cmp	r3, #255	; 0xff
 8006708:	d90e      	bls.n	8006728 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	22ff      	movs	r2, #255	; 0xff
 800670e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006714:	b2da      	uxtb	r2, r3
 8006716:	8979      	ldrh	r1, [r7, #10]
 8006718:	2300      	movs	r3, #0
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 fc2d 	bl	8006f80 <I2C_TransferConfig>
 8006726:	e00f      	b.n	8006748 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006736:	b2da      	uxtb	r2, r3
 8006738:	8979      	ldrh	r1, [r7, #10]
 800673a:	2300      	movs	r3, #0
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 fc1c 	bl	8006f80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 fabb 	bl	8006cc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e07b      	b.n	8006854 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	781a      	ldrb	r2, [r3, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006776:	b29b      	uxth	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006784:	3b01      	subs	r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006790:	b29b      	uxth	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d034      	beq.n	8006800 <HAL_I2C_Mem_Write+0x1c8>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800679a:	2b00      	cmp	r3, #0
 800679c:	d130      	bne.n	8006800 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	2200      	movs	r2, #0
 80067a6:	2180      	movs	r1, #128	; 0x80
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 fa4d 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e04d      	b.n	8006854 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2bff      	cmp	r3, #255	; 0xff
 80067c0:	d90e      	bls.n	80067e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	22ff      	movs	r2, #255	; 0xff
 80067c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	8979      	ldrh	r1, [r7, #10]
 80067d0:	2300      	movs	r3, #0
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 fbd1 	bl	8006f80 <I2C_TransferConfig>
 80067de:	e00f      	b.n	8006800 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	8979      	ldrh	r1, [r7, #10]
 80067f2:	2300      	movs	r3, #0
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 fbc0 	bl	8006f80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006804:	b29b      	uxth	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d19e      	bne.n	8006748 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f000 fa9a 	bl	8006d48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e01a      	b.n	8006854 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2220      	movs	r2, #32
 8006824:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6859      	ldr	r1, [r3, #4]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	4b0a      	ldr	r3, [pc, #40]	; (800685c <HAL_I2C_Mem_Write+0x224>)
 8006832:	400b      	ands	r3, r1
 8006834:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2220      	movs	r2, #32
 800683a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	e000      	b.n	8006854 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006852:	2302      	movs	r3, #2
  }
}
 8006854:	4618      	mov	r0, r3
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	fe00e800 	.word	0xfe00e800

08006860 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af02      	add	r7, sp, #8
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	4608      	mov	r0, r1
 800686a:	4611      	mov	r1, r2
 800686c:	461a      	mov	r2, r3
 800686e:	4603      	mov	r3, r0
 8006870:	817b      	strh	r3, [r7, #10]
 8006872:	460b      	mov	r3, r1
 8006874:	813b      	strh	r3, [r7, #8]
 8006876:	4613      	mov	r3, r2
 8006878:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b20      	cmp	r3, #32
 8006884:	f040 80fd 	bne.w	8006a82 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <HAL_I2C_Mem_Read+0x34>
 800688e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006890:	2b00      	cmp	r3, #0
 8006892:	d105      	bne.n	80068a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800689a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e0f1      	b.n	8006a84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d101      	bne.n	80068ae <HAL_I2C_Mem_Read+0x4e>
 80068aa:	2302      	movs	r3, #2
 80068ac:	e0ea      	b.n	8006a84 <HAL_I2C_Mem_Read+0x224>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80068b6:	f7fd ffcf 	bl	8004858 <HAL_GetTick>
 80068ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	2319      	movs	r3, #25
 80068c2:	2201      	movs	r2, #1
 80068c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 f9bd 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0d5      	b.n	8006a84 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2222      	movs	r2, #34	; 0x22
 80068dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2240      	movs	r2, #64	; 0x40
 80068e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6a3a      	ldr	r2, [r7, #32]
 80068f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80068f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006900:	88f8      	ldrh	r0, [r7, #6]
 8006902:	893a      	ldrh	r2, [r7, #8]
 8006904:	8979      	ldrh	r1, [r7, #10]
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	9301      	str	r3, [sp, #4]
 800690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	4603      	mov	r3, r0
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 f921 	bl	8006b58 <I2C_RequestMemoryRead>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d005      	beq.n	8006928 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e0ad      	b.n	8006a84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692c:	b29b      	uxth	r3, r3
 800692e:	2bff      	cmp	r3, #255	; 0xff
 8006930:	d90e      	bls.n	8006950 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	22ff      	movs	r2, #255	; 0xff
 8006936:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800693c:	b2da      	uxtb	r2, r3
 800693e:	8979      	ldrh	r1, [r7, #10]
 8006940:	4b52      	ldr	r3, [pc, #328]	; (8006a8c <HAL_I2C_Mem_Read+0x22c>)
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 fb19 	bl	8006f80 <I2C_TransferConfig>
 800694e:	e00f      	b.n	8006970 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006954:	b29a      	uxth	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695e:	b2da      	uxtb	r2, r3
 8006960:	8979      	ldrh	r1, [r7, #10]
 8006962:	4b4a      	ldr	r3, [pc, #296]	; (8006a8c <HAL_I2C_Mem_Read+0x22c>)
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 fb08 	bl	8006f80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006976:	2200      	movs	r2, #0
 8006978:	2104      	movs	r1, #4
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f000 f964 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e07c      	b.n	8006a84 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a6:	3b01      	subs	r3, #1
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d034      	beq.n	8006a30 <HAL_I2C_Mem_Read+0x1d0>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d130      	bne.n	8006a30 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d4:	2200      	movs	r2, #0
 80069d6:	2180      	movs	r1, #128	; 0x80
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 f935 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e04d      	b.n	8006a84 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	2bff      	cmp	r3, #255	; 0xff
 80069f0:	d90e      	bls.n	8006a10 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	22ff      	movs	r2, #255	; 0xff
 80069f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	8979      	ldrh	r1, [r7, #10]
 8006a00:	2300      	movs	r3, #0
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 fab9 	bl	8006f80 <I2C_TransferConfig>
 8006a0e:	e00f      	b.n	8006a30 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	8979      	ldrh	r1, [r7, #10]
 8006a22:	2300      	movs	r3, #0
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 faa8 	bl	8006f80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d19a      	bne.n	8006970 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 f982 	bl	8006d48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e01a      	b.n	8006a84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2220      	movs	r2, #32
 8006a54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6859      	ldr	r1, [r3, #4]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <HAL_I2C_Mem_Read+0x230>)
 8006a62:	400b      	ands	r3, r1
 8006a64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	e000      	b.n	8006a84 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006a82:	2302      	movs	r3, #2
  }
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	80002400 	.word	0x80002400
 8006a90:	fe00e800 	.word	0xfe00e800

08006a94 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aa2:	b2db      	uxtb	r3, r3
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af02      	add	r7, sp, #8
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	4608      	mov	r0, r1
 8006aba:	4611      	mov	r1, r2
 8006abc:	461a      	mov	r2, r3
 8006abe:	4603      	mov	r3, r0
 8006ac0:	817b      	strh	r3, [r7, #10]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	813b      	strh	r3, [r7, #8]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006aca:	88fb      	ldrh	r3, [r7, #6]
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	8979      	ldrh	r1, [r7, #10]
 8006ad0:	4b20      	ldr	r3, [pc, #128]	; (8006b54 <I2C_RequestMemoryWrite+0xa4>)
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 fa51 	bl	8006f80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ade:	69fa      	ldr	r2, [r7, #28]
 8006ae0:	69b9      	ldr	r1, [r7, #24]
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 f8f0 	bl	8006cc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e02c      	b.n	8006b4c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006af2:	88fb      	ldrh	r3, [r7, #6]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d105      	bne.n	8006b04 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006af8:	893b      	ldrh	r3, [r7, #8]
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	629a      	str	r2, [r3, #40]	; 0x28
 8006b02:	e015      	b.n	8006b30 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b04:	893b      	ldrh	r3, [r7, #8]
 8006b06:	0a1b      	lsrs	r3, r3, #8
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b12:	69fa      	ldr	r2, [r7, #28]
 8006b14:	69b9      	ldr	r1, [r7, #24]
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 f8d6 	bl	8006cc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e012      	b.n	8006b4c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b26:	893b      	ldrh	r3, [r7, #8]
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	2200      	movs	r2, #0
 8006b38:	2180      	movs	r1, #128	; 0x80
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 f884 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e000      	b.n	8006b4c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	80002000 	.word	0x80002000

08006b58 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af02      	add	r7, sp, #8
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	4608      	mov	r0, r1
 8006b62:	4611      	mov	r1, r2
 8006b64:	461a      	mov	r2, r3
 8006b66:	4603      	mov	r3, r0
 8006b68:	817b      	strh	r3, [r7, #10]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	813b      	strh	r3, [r7, #8]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006b72:	88fb      	ldrh	r3, [r7, #6]
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	8979      	ldrh	r1, [r7, #10]
 8006b78:	4b20      	ldr	r3, [pc, #128]	; (8006bfc <I2C_RequestMemoryRead+0xa4>)
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f000 f9fe 	bl	8006f80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b84:	69fa      	ldr	r2, [r7, #28]
 8006b86:	69b9      	ldr	r1, [r7, #24]
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 f89d 	bl	8006cc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e02c      	b.n	8006bf2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b98:	88fb      	ldrh	r3, [r7, #6]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d105      	bne.n	8006baa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b9e:	893b      	ldrh	r3, [r7, #8]
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	629a      	str	r2, [r3, #40]	; 0x28
 8006ba8:	e015      	b.n	8006bd6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006baa:	893b      	ldrh	r3, [r7, #8]
 8006bac:	0a1b      	lsrs	r3, r3, #8
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bb8:	69fa      	ldr	r2, [r7, #28]
 8006bba:	69b9      	ldr	r1, [r7, #24]
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 f883 	bl	8006cc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e012      	b.n	8006bf2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bcc:	893b      	ldrh	r3, [r7, #8]
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	2140      	movs	r1, #64	; 0x40
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f831 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	80002000 	.word	0x80002000

08006c00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d103      	bne.n	8006c1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d007      	beq.n	8006c3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699a      	ldr	r2, [r3, #24]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0201 	orr.w	r2, r2, #1
 8006c3a:	619a      	str	r2, [r3, #24]
  }
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	4613      	mov	r3, r2
 8006c56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c58:	e022      	b.n	8006ca0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c60:	d01e      	beq.n	8006ca0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c62:	f7fd fdf9 	bl	8004858 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d302      	bcc.n	8006c78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d113      	bne.n	8006ca0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7c:	f043 0220 	orr.w	r2, r3, #32
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e00f      	b.n	8006cc0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699a      	ldr	r2, [r3, #24]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	bf0c      	ite	eq
 8006cb0:	2301      	moveq	r3, #1
 8006cb2:	2300      	movne	r3, #0
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	79fb      	ldrb	r3, [r7, #7]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d0cd      	beq.n	8006c5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006cd4:	e02c      	b.n	8006d30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	68b9      	ldr	r1, [r7, #8]
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 f870 	bl	8006dc0 <I2C_IsErrorOccurred>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e02a      	b.n	8006d40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cf0:	d01e      	beq.n	8006d30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cf2:	f7fd fdb1 	bl	8004858 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d302      	bcc.n	8006d08 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d113      	bne.n	8006d30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0c:	f043 0220 	orr.w	r2, r3, #32
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e007      	b.n	8006d40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d1cb      	bne.n	8006cd6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d54:	e028      	b.n	8006da8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	68b9      	ldr	r1, [r7, #8]
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 f830 	bl	8006dc0 <I2C_IsErrorOccurred>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e026      	b.n	8006db8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d6a:	f7fd fd75 	bl	8004858 <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d302      	bcc.n	8006d80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d113      	bne.n	8006da8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d84:	f043 0220 	orr.w	r2, r3, #32
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e007      	b.n	8006db8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	f003 0320 	and.w	r3, r3, #32
 8006db2:	2b20      	cmp	r3, #32
 8006db4:	d1cf      	bne.n	8006d56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08a      	sub	sp, #40	; 0x28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	f003 0310 	and.w	r3, r3, #16
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d068      	beq.n	8006ebe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2210      	movs	r2, #16
 8006df2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006df4:	e049      	b.n	8006e8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dfc:	d045      	beq.n	8006e8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006dfe:	f7fd fd2b 	bl	8004858 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d302      	bcc.n	8006e14 <I2C_IsErrorOccurred+0x54>
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d13a      	bne.n	8006e8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e36:	d121      	bne.n	8006e7c <I2C_IsErrorOccurred+0xbc>
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e3e:	d01d      	beq.n	8006e7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006e40:	7cfb      	ldrb	r3, [r7, #19]
 8006e42:	2b20      	cmp	r3, #32
 8006e44:	d01a      	beq.n	8006e7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006e56:	f7fd fcff 	bl	8004858 <HAL_GetTick>
 8006e5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e5c:	e00e      	b.n	8006e7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006e5e:	f7fd fcfb 	bl	8004858 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b19      	cmp	r3, #25
 8006e6a:	d907      	bls.n	8006e7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	f043 0320 	orr.w	r3, r3, #32
 8006e72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006e7a:	e006      	b.n	8006e8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	2b20      	cmp	r3, #32
 8006e88:	d1e9      	bne.n	8006e5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	f003 0320 	and.w	r3, r3, #32
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	d003      	beq.n	8006ea0 <I2C_IsErrorOccurred+0xe0>
 8006e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d0aa      	beq.n	8006df6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d103      	bne.n	8006eb0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2220      	movs	r2, #32
 8006eae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	f043 0304 	orr.w	r3, r3, #4
 8006eb6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00b      	beq.n	8006ee8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	f043 0301 	orr.w	r3, r3, #1
 8006ed6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ee0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00b      	beq.n	8006f0a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	f043 0308 	orr.w	r3, r3, #8
 8006ef8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00b      	beq.n	8006f2c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	f043 0302 	orr.w	r3, r3, #2
 8006f1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d01c      	beq.n	8006f6e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f7ff fe63 	bl	8006c00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6859      	ldr	r1, [r3, #4]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	4b0d      	ldr	r3, [pc, #52]	; (8006f7c <I2C_IsErrorOccurred+0x1bc>)
 8006f46:	400b      	ands	r3, r1
 8006f48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	431a      	orrs	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3728      	adds	r7, #40	; 0x28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	fe00e800 	.word	0xfe00e800

08006f80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	607b      	str	r3, [r7, #4]
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	817b      	strh	r3, [r7, #10]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f92:	897b      	ldrh	r3, [r7, #10]
 8006f94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f98:	7a7b      	ldrb	r3, [r7, #9]
 8006f9a:	041b      	lsls	r3, r3, #16
 8006f9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fa0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	0d5b      	lsrs	r3, r3, #21
 8006fba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006fbe:	4b08      	ldr	r3, [pc, #32]	; (8006fe0 <I2C_TransferConfig+0x60>)
 8006fc0:	430b      	orrs	r3, r1
 8006fc2:	43db      	mvns	r3, r3
 8006fc4:	ea02 0103 	and.w	r1, r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006fd2:	bf00      	nop
 8006fd4:	371c      	adds	r7, #28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	03ff63ff 	.word	0x03ff63ff

08006fe4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b20      	cmp	r3, #32
 8006ff8:	d138      	bne.n	800706c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007004:	2302      	movs	r3, #2
 8007006:	e032      	b.n	800706e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2224      	movs	r2, #36	; 0x24
 8007014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0201 	bic.w	r2, r2, #1
 8007026:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007036:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6819      	ldr	r1, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f042 0201 	orr.w	r2, r2, #1
 8007056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2220      	movs	r2, #32
 800705c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007068:	2300      	movs	r3, #0
 800706a:	e000      	b.n	800706e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800706c:	2302      	movs	r3, #2
  }
}
 800706e:	4618      	mov	r0, r3
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800707a:	b480      	push	{r7}
 800707c:	b085      	sub	sp, #20
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b20      	cmp	r3, #32
 800708e:	d139      	bne.n	8007104 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007096:	2b01      	cmp	r3, #1
 8007098:	d101      	bne.n	800709e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800709a:	2302      	movs	r3, #2
 800709c:	e033      	b.n	8007106 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2224      	movs	r2, #36	; 0x24
 80070aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0201 	bic.w	r2, r2, #1
 80070bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80070cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	021b      	lsls	r3, r3, #8
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0201 	orr.w	r2, r2, #1
 80070ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	e000      	b.n	8007106 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007104:	2302      	movs	r3, #2
  }
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
	...

08007114 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e0bf      	b.n	80072a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d106      	bne.n	8007140 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7fa fc48 	bl	80019d0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2202      	movs	r2, #2
 8007144:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	699a      	ldr	r2, [r3, #24]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007156:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6999      	ldr	r1, [r3, #24]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800716c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	430a      	orrs	r2, r1
 800717a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6899      	ldr	r1, [r3, #8]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	4b4a      	ldr	r3, [pc, #296]	; (80072b0 <HAL_LTDC_Init+0x19c>)
 8007188:	400b      	ands	r3, r1
 800718a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	041b      	lsls	r3, r3, #16
 8007192:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6899      	ldr	r1, [r3, #8]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	699a      	ldr	r2, [r3, #24]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	431a      	orrs	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68d9      	ldr	r1, [r3, #12]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	4b3e      	ldr	r3, [pc, #248]	; (80072b0 <HAL_LTDC_Init+0x19c>)
 80071b6:	400b      	ands	r3, r1
 80071b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	041b      	lsls	r3, r3, #16
 80071c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68d9      	ldr	r1, [r3, #12]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a1a      	ldr	r2, [r3, #32]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6919      	ldr	r1, [r3, #16]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4b33      	ldr	r3, [pc, #204]	; (80072b0 <HAL_LTDC_Init+0x19c>)
 80071e4:	400b      	ands	r3, r1
 80071e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	041b      	lsls	r3, r3, #16
 80071ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6919      	ldr	r1, [r3, #16]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	431a      	orrs	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6959      	ldr	r1, [r3, #20]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	4b27      	ldr	r3, [pc, #156]	; (80072b0 <HAL_LTDC_Init+0x19c>)
 8007212:	400b      	ands	r3, r1
 8007214:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721a:	041b      	lsls	r3, r3, #16
 800721c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6959      	ldr	r1, [r3, #20]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	431a      	orrs	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	430a      	orrs	r2, r1
 8007232:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800723a:	021b      	lsls	r3, r3, #8
 800723c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007244:	041b      	lsls	r3, r3, #16
 8007246:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007256:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4313      	orrs	r3, r2
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800726a:	431a      	orrs	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	430a      	orrs	r2, r1
 8007272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0206 	orr.w	r2, r2, #6
 8007282:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	699a      	ldr	r2, [r3, #24]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f042 0201 	orr.w	r2, r2, #1
 8007292:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	f000f800 	.word	0xf000f800

080072b4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ca:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f003 0304 	and.w	r3, r3, #4
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d023      	beq.n	800731e <HAL_LTDC_IRQHandler+0x6a>
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	f003 0304 	and.w	r3, r3, #4
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d01e      	beq.n	800731e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0204 	bic.w	r2, r2, #4
 80072ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2204      	movs	r2, #4
 80072f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80072fe:	f043 0201 	orr.w	r2, r3, #1
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2204      	movs	r2, #4
 800730c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f86f 	bl	80073fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f003 0302 	and.w	r3, r3, #2
 8007324:	2b00      	cmp	r3, #0
 8007326:	d023      	beq.n	8007370 <HAL_LTDC_IRQHandler+0xbc>
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d01e      	beq.n	8007370 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0202 	bic.w	r2, r2, #2
 8007340:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2202      	movs	r2, #2
 8007348:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007350:	f043 0202 	orr.w	r2, r3, #2
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2204      	movs	r2, #4
 800735e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f846 	bl	80073fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d01b      	beq.n	80073b2 <HAL_LTDC_IRQHandler+0xfe>
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	d016      	beq.n	80073b2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0201 	bic.w	r2, r2, #1
 8007392:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2201      	movs	r2, #1
 800739a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f82f 	bl	8007410 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f003 0308 	and.w	r3, r3, #8
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d01b      	beq.n	80073f4 <HAL_LTDC_IRQHandler+0x140>
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	f003 0308 	and.w	r3, r3, #8
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d016      	beq.n	80073f4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0208 	bic.w	r2, r2, #8
 80073d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2208      	movs	r2, #8
 80073dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f818 	bl	8007424 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80073f4:	bf00      	nop
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007438:	b5b0      	push	{r4, r5, r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800744a:	2b01      	cmp	r3, #1
 800744c:	d101      	bne.n	8007452 <HAL_LTDC_ConfigLayer+0x1a>
 800744e:	2302      	movs	r3, #2
 8007450:	e02c      	b.n	80074ac <HAL_LTDC_ConfigLayer+0x74>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2202      	movs	r2, #2
 800745e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2134      	movs	r1, #52	; 0x34
 8007468:	fb01 f303 	mul.w	r3, r1, r3
 800746c:	4413      	add	r3, r2
 800746e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	4614      	mov	r4, r2
 8007476:	461d      	mov	r5, r3
 8007478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800747a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800747c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800747e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	68b9      	ldr	r1, [r7, #8]
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 f81f 	bl	80074d0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2201      	movs	r2, #1
 8007498:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bdb0      	pop	{r4, r5, r7, pc}

080074b4 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80074c2:	b2db      	uxtb	r3, r3
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b089      	sub	sp, #36	; 0x24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	0c1b      	lsrs	r3, r3, #16
 80074e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074ec:	4413      	add	r3, r2
 80074ee:	041b      	lsls	r3, r3, #16
 80074f0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	01db      	lsls	r3, r3, #7
 80074fc:	4413      	add	r3, r2
 80074fe:	3384      	adds	r3, #132	; 0x84
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	6812      	ldr	r2, [r2, #0]
 8007506:	4611      	mov	r1, r2
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	01d2      	lsls	r2, r2, #7
 800750c:	440a      	add	r2, r1
 800750e:	3284      	adds	r2, #132	; 0x84
 8007510:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007514:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	0c1b      	lsrs	r3, r3, #16
 8007522:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007526:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007528:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4619      	mov	r1, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	01db      	lsls	r3, r3, #7
 8007534:	440b      	add	r3, r1
 8007536:	3384      	adds	r3, #132	; 0x84
 8007538:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800753e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	68da      	ldr	r2, [r3, #12]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800754e:	4413      	add	r3, r2
 8007550:	041b      	lsls	r3, r3, #16
 8007552:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	461a      	mov	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	01db      	lsls	r3, r3, #7
 800755e:	4413      	add	r3, r2
 8007560:	3384      	adds	r3, #132	; 0x84
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	6812      	ldr	r2, [r2, #0]
 8007568:	4611      	mov	r1, r2
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	01d2      	lsls	r2, r2, #7
 800756e:	440a      	add	r2, r1
 8007570:	3284      	adds	r2, #132	; 0x84
 8007572:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007576:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	689a      	ldr	r2, [r3, #8]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007586:	4413      	add	r3, r2
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4619      	mov	r1, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	01db      	lsls	r3, r3, #7
 8007594:	440b      	add	r3, r1
 8007596:	3384      	adds	r3, #132	; 0x84
 8007598:	4619      	mov	r1, r3
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	4313      	orrs	r3, r2
 800759e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	01db      	lsls	r3, r3, #7
 80075aa:	4413      	add	r3, r2
 80075ac:	3384      	adds	r3, #132	; 0x84
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	6812      	ldr	r2, [r2, #0]
 80075b4:	4611      	mov	r1, r2
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	01d2      	lsls	r2, r2, #7
 80075ba:	440a      	add	r2, r1
 80075bc:	3284      	adds	r2, #132	; 0x84
 80075be:	f023 0307 	bic.w	r3, r3, #7
 80075c2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	461a      	mov	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	01db      	lsls	r3, r3, #7
 80075ce:	4413      	add	r3, r2
 80075d0:	3384      	adds	r3, #132	; 0x84
 80075d2:	461a      	mov	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80075e0:	021b      	lsls	r3, r3, #8
 80075e2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80075ea:	041b      	lsls	r3, r3, #16
 80075ec:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	061b      	lsls	r3, r3, #24
 80075f4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	01db      	lsls	r3, r3, #7
 8007600:	4413      	add	r3, r2
 8007602:	3384      	adds	r3, #132	; 0x84
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	01db      	lsls	r3, r3, #7
 8007610:	4413      	add	r3, r2
 8007612:	3384      	adds	r3, #132	; 0x84
 8007614:	461a      	mov	r2, r3
 8007616:	2300      	movs	r3, #0
 8007618:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007620:	461a      	mov	r2, r3
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	431a      	orrs	r2, r3
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	431a      	orrs	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4619      	mov	r1, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	01db      	lsls	r3, r3, #7
 8007634:	440b      	add	r3, r1
 8007636:	3384      	adds	r3, #132	; 0x84
 8007638:	4619      	mov	r1, r3
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	4313      	orrs	r3, r2
 800763e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	461a      	mov	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	01db      	lsls	r3, r3, #7
 800764a:	4413      	add	r3, r2
 800764c:	3384      	adds	r3, #132	; 0x84
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	6812      	ldr	r2, [r2, #0]
 8007654:	4611      	mov	r1, r2
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	01d2      	lsls	r2, r2, #7
 800765a:	440a      	add	r2, r1
 800765c:	3284      	adds	r2, #132	; 0x84
 800765e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007662:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	461a      	mov	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	01db      	lsls	r3, r3, #7
 800766e:	4413      	add	r3, r2
 8007670:	3384      	adds	r3, #132	; 0x84
 8007672:	461a      	mov	r2, r3
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	461a      	mov	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	01db      	lsls	r3, r3, #7
 8007684:	4413      	add	r3, r2
 8007686:	3384      	adds	r3, #132	; 0x84
 8007688:	69da      	ldr	r2, [r3, #28]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4619      	mov	r1, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	01db      	lsls	r3, r3, #7
 8007694:	440b      	add	r3, r1
 8007696:	3384      	adds	r3, #132	; 0x84
 8007698:	4619      	mov	r1, r3
 800769a:	4b58      	ldr	r3, [pc, #352]	; (80077fc <LTDC_SetConfig+0x32c>)
 800769c:	4013      	ands	r3, r2
 800769e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	69da      	ldr	r2, [r3, #28]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	68f9      	ldr	r1, [r7, #12]
 80076aa:	6809      	ldr	r1, [r1, #0]
 80076ac:	4608      	mov	r0, r1
 80076ae:	6879      	ldr	r1, [r7, #4]
 80076b0:	01c9      	lsls	r1, r1, #7
 80076b2:	4401      	add	r1, r0
 80076b4:	3184      	adds	r1, #132	; 0x84
 80076b6:	4313      	orrs	r3, r2
 80076b8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	461a      	mov	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	01db      	lsls	r3, r3, #7
 80076c4:	4413      	add	r3, r2
 80076c6:	3384      	adds	r3, #132	; 0x84
 80076c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	461a      	mov	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	01db      	lsls	r3, r3, #7
 80076d4:	4413      	add	r3, r2
 80076d6:	3384      	adds	r3, #132	; 0x84
 80076d8:	461a      	mov	r2, r3
 80076da:	2300      	movs	r3, #0
 80076dc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	01db      	lsls	r3, r3, #7
 80076e8:	4413      	add	r3, r2
 80076ea:	3384      	adds	r3, #132	; 0x84
 80076ec:	461a      	mov	r2, r3
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d102      	bne.n	8007702 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80076fc:	2304      	movs	r3, #4
 80076fe:	61fb      	str	r3, [r7, #28]
 8007700:	e01b      	b.n	800773a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d102      	bne.n	8007710 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800770a:	2303      	movs	r3, #3
 800770c:	61fb      	str	r3, [r7, #28]
 800770e:	e014      	b.n	800773a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	2b04      	cmp	r3, #4
 8007716:	d00b      	beq.n	8007730 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800771c:	2b02      	cmp	r3, #2
 800771e:	d007      	beq.n	8007730 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007724:	2b03      	cmp	r3, #3
 8007726:	d003      	beq.n	8007730 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800772c:	2b07      	cmp	r3, #7
 800772e:	d102      	bne.n	8007736 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007730:	2302      	movs	r3, #2
 8007732:	61fb      	str	r3, [r7, #28]
 8007734:	e001      	b.n	800773a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007736:	2301      	movs	r3, #1
 8007738:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	461a      	mov	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	01db      	lsls	r3, r3, #7
 8007744:	4413      	add	r3, r2
 8007746:	3384      	adds	r3, #132	; 0x84
 8007748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	6812      	ldr	r2, [r2, #0]
 800774e:	4611      	mov	r1, r2
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	01d2      	lsls	r2, r2, #7
 8007754:	440a      	add	r2, r1
 8007756:	3284      	adds	r2, #132	; 0x84
 8007758:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800775c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007762:	69fa      	ldr	r2, [r7, #28]
 8007764:	fb02 f303 	mul.w	r3, r2, r3
 8007768:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	6859      	ldr	r1, [r3, #4]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	1acb      	subs	r3, r1, r3
 8007774:	69f9      	ldr	r1, [r7, #28]
 8007776:	fb01 f303 	mul.w	r3, r1, r3
 800777a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800777c:	68f9      	ldr	r1, [r7, #12]
 800777e:	6809      	ldr	r1, [r1, #0]
 8007780:	4608      	mov	r0, r1
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	01c9      	lsls	r1, r1, #7
 8007786:	4401      	add	r1, r0
 8007788:	3184      	adds	r1, #132	; 0x84
 800778a:	4313      	orrs	r3, r2
 800778c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	01db      	lsls	r3, r3, #7
 8007798:	4413      	add	r3, r2
 800779a:	3384      	adds	r3, #132	; 0x84
 800779c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4619      	mov	r1, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	01db      	lsls	r3, r3, #7
 80077a8:	440b      	add	r3, r1
 80077aa:	3384      	adds	r3, #132	; 0x84
 80077ac:	4619      	mov	r1, r3
 80077ae:	4b14      	ldr	r3, [pc, #80]	; (8007800 <LTDC_SetConfig+0x330>)
 80077b0:	4013      	ands	r3, r2
 80077b2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	01db      	lsls	r3, r3, #7
 80077be:	4413      	add	r3, r2
 80077c0:	3384      	adds	r3, #132	; 0x84
 80077c2:	461a      	mov	r2, r3
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	01db      	lsls	r3, r3, #7
 80077d4:	4413      	add	r3, r2
 80077d6:	3384      	adds	r3, #132	; 0x84
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	6812      	ldr	r2, [r2, #0]
 80077de:	4611      	mov	r1, r2
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	01d2      	lsls	r2, r2, #7
 80077e4:	440a      	add	r2, r1
 80077e6:	3284      	adds	r2, #132	; 0x84
 80077e8:	f043 0301 	orr.w	r3, r3, #1
 80077ec:	6013      	str	r3, [r2, #0]
}
 80077ee:	bf00      	nop
 80077f0:	3724      	adds	r7, #36	; 0x24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	fffff8f8 	.word	0xfffff8f8
 8007800:	fffff800 	.word	0xfffff800

08007804 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007804:	b480      	push	{r7}
 8007806:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007808:	4b05      	ldr	r3, [pc, #20]	; (8007820 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a04      	ldr	r2, [pc, #16]	; (8007820 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800780e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007812:	6013      	str	r3, [r2, #0]
}
 8007814:	bf00      	nop
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	40007000 	.word	0x40007000

08007824 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800782e:	4b23      	ldr	r3, [pc, #140]	; (80078bc <HAL_PWREx_EnableOverDrive+0x98>)
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	4a22      	ldr	r2, [pc, #136]	; (80078bc <HAL_PWREx_EnableOverDrive+0x98>)
 8007834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007838:	6413      	str	r3, [r2, #64]	; 0x40
 800783a:	4b20      	ldr	r3, [pc, #128]	; (80078bc <HAL_PWREx_EnableOverDrive+0x98>)
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007842:	603b      	str	r3, [r7, #0]
 8007844:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007846:	4b1e      	ldr	r3, [pc, #120]	; (80078c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a1d      	ldr	r2, [pc, #116]	; (80078c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800784c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007850:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007852:	f7fd f801 	bl	8004858 <HAL_GetTick>
 8007856:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007858:	e009      	b.n	800786e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800785a:	f7fc fffd 	bl	8004858 <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007868:	d901      	bls.n	800786e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e022      	b.n	80078b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800786e:	4b14      	ldr	r3, [pc, #80]	; (80078c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800787a:	d1ee      	bne.n	800785a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800787c:	4b10      	ldr	r3, [pc, #64]	; (80078c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a0f      	ldr	r2, [pc, #60]	; (80078c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007886:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007888:	f7fc ffe6 	bl	8004858 <HAL_GetTick>
 800788c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800788e:	e009      	b.n	80078a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007890:	f7fc ffe2 	bl	8004858 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800789e:	d901      	bls.n	80078a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e007      	b.n	80078b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80078a4:	4b06      	ldr	r3, [pc, #24]	; (80078c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078b0:	d1ee      	bne.n	8007890 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	40023800 	.word	0x40023800
 80078c0:	40007000 	.word	0x40007000

080078c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80078cc:	2300      	movs	r3, #0
 80078ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e291      	b.n	8007dfe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 8087 	beq.w	80079f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80078e8:	4b96      	ldr	r3, [pc, #600]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f003 030c 	and.w	r3, r3, #12
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d00c      	beq.n	800790e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078f4:	4b93      	ldr	r3, [pc, #588]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f003 030c 	and.w	r3, r3, #12
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	d112      	bne.n	8007926 <HAL_RCC_OscConfig+0x62>
 8007900:	4b90      	ldr	r3, [pc, #576]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800790c:	d10b      	bne.n	8007926 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800790e:	4b8d      	ldr	r3, [pc, #564]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d06c      	beq.n	80079f4 <HAL_RCC_OscConfig+0x130>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d168      	bne.n	80079f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e26b      	b.n	8007dfe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800792e:	d106      	bne.n	800793e <HAL_RCC_OscConfig+0x7a>
 8007930:	4b84      	ldr	r3, [pc, #528]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a83      	ldr	r2, [pc, #524]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800793a:	6013      	str	r3, [r2, #0]
 800793c:	e02e      	b.n	800799c <HAL_RCC_OscConfig+0xd8>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10c      	bne.n	8007960 <HAL_RCC_OscConfig+0x9c>
 8007946:	4b7f      	ldr	r3, [pc, #508]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a7e      	ldr	r2, [pc, #504]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 800794c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007950:	6013      	str	r3, [r2, #0]
 8007952:	4b7c      	ldr	r3, [pc, #496]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a7b      	ldr	r2, [pc, #492]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	e01d      	b.n	800799c <HAL_RCC_OscConfig+0xd8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007968:	d10c      	bne.n	8007984 <HAL_RCC_OscConfig+0xc0>
 800796a:	4b76      	ldr	r3, [pc, #472]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a75      	ldr	r2, [pc, #468]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	4b73      	ldr	r3, [pc, #460]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a72      	ldr	r2, [pc, #456]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 800797c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007980:	6013      	str	r3, [r2, #0]
 8007982:	e00b      	b.n	800799c <HAL_RCC_OscConfig+0xd8>
 8007984:	4b6f      	ldr	r3, [pc, #444]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a6e      	ldr	r2, [pc, #440]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 800798a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800798e:	6013      	str	r3, [r2, #0]
 8007990:	4b6c      	ldr	r3, [pc, #432]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a6b      	ldr	r2, [pc, #428]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800799a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d013      	beq.n	80079cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a4:	f7fc ff58 	bl	8004858 <HAL_GetTick>
 80079a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079aa:	e008      	b.n	80079be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079ac:	f7fc ff54 	bl	8004858 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b64      	cmp	r3, #100	; 0x64
 80079b8:	d901      	bls.n	80079be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e21f      	b.n	8007dfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079be:	4b61      	ldr	r3, [pc, #388]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0f0      	beq.n	80079ac <HAL_RCC_OscConfig+0xe8>
 80079ca:	e014      	b.n	80079f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079cc:	f7fc ff44 	bl	8004858 <HAL_GetTick>
 80079d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079d2:	e008      	b.n	80079e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079d4:	f7fc ff40 	bl	8004858 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	2b64      	cmp	r3, #100	; 0x64
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e20b      	b.n	8007dfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079e6:	4b57      	ldr	r3, [pc, #348]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1f0      	bne.n	80079d4 <HAL_RCC_OscConfig+0x110>
 80079f2:	e000      	b.n	80079f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d069      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a02:	4b50      	ldr	r3, [pc, #320]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f003 030c 	and.w	r3, r3, #12
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00b      	beq.n	8007a26 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a0e:	4b4d      	ldr	r3, [pc, #308]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f003 030c 	and.w	r3, r3, #12
 8007a16:	2b08      	cmp	r3, #8
 8007a18:	d11c      	bne.n	8007a54 <HAL_RCC_OscConfig+0x190>
 8007a1a:	4b4a      	ldr	r3, [pc, #296]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d116      	bne.n	8007a54 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a26:	4b47      	ldr	r3, [pc, #284]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d005      	beq.n	8007a3e <HAL_RCC_OscConfig+0x17a>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d001      	beq.n	8007a3e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e1df      	b.n	8007dfe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a3e:	4b41      	ldr	r3, [pc, #260]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	00db      	lsls	r3, r3, #3
 8007a4c:	493d      	ldr	r1, [pc, #244]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a52:	e040      	b.n	8007ad6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d023      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a5c:	4b39      	ldr	r3, [pc, #228]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a38      	ldr	r2, [pc, #224]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a62:	f043 0301 	orr.w	r3, r3, #1
 8007a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a68:	f7fc fef6 	bl	8004858 <HAL_GetTick>
 8007a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a6e:	e008      	b.n	8007a82 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a70:	f7fc fef2 	bl	8004858 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d901      	bls.n	8007a82 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e1bd      	b.n	8007dfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a82:	4b30      	ldr	r3, [pc, #192]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0302 	and.w	r3, r3, #2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d0f0      	beq.n	8007a70 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a8e:	4b2d      	ldr	r3, [pc, #180]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	00db      	lsls	r3, r3, #3
 8007a9c:	4929      	ldr	r1, [pc, #164]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	600b      	str	r3, [r1, #0]
 8007aa2:	e018      	b.n	8007ad6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007aa4:	4b27      	ldr	r3, [pc, #156]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a26      	ldr	r2, [pc, #152]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007aaa:	f023 0301 	bic.w	r3, r3, #1
 8007aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab0:	f7fc fed2 	bl	8004858 <HAL_GetTick>
 8007ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ab6:	e008      	b.n	8007aca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ab8:	f7fc fece 	bl	8004858 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d901      	bls.n	8007aca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e199      	b.n	8007dfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007aca:	4b1e      	ldr	r3, [pc, #120]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1f0      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0308 	and.w	r3, r3, #8
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d038      	beq.n	8007b54 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d019      	beq.n	8007b1e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007aea:	4b16      	ldr	r3, [pc, #88]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aee:	4a15      	ldr	r2, [pc, #84]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007af0:	f043 0301 	orr.w	r3, r3, #1
 8007af4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007af6:	f7fc feaf 	bl	8004858 <HAL_GetTick>
 8007afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007afc:	e008      	b.n	8007b10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007afe:	f7fc feab 	bl	8004858 <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d901      	bls.n	8007b10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e176      	b.n	8007dfe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b10:	4b0c      	ldr	r3, [pc, #48]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b14:	f003 0302 	and.w	r3, r3, #2
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d0f0      	beq.n	8007afe <HAL_RCC_OscConfig+0x23a>
 8007b1c:	e01a      	b.n	8007b54 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b1e:	4b09      	ldr	r3, [pc, #36]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b22:	4a08      	ldr	r2, [pc, #32]	; (8007b44 <HAL_RCC_OscConfig+0x280>)
 8007b24:	f023 0301 	bic.w	r3, r3, #1
 8007b28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b2a:	f7fc fe95 	bl	8004858 <HAL_GetTick>
 8007b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b30:	e00a      	b.n	8007b48 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b32:	f7fc fe91 	bl	8004858 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d903      	bls.n	8007b48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e15c      	b.n	8007dfe <HAL_RCC_OscConfig+0x53a>
 8007b44:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b48:	4b91      	ldr	r3, [pc, #580]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1ee      	bne.n	8007b32 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 80a4 	beq.w	8007caa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b62:	4b8b      	ldr	r3, [pc, #556]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10d      	bne.n	8007b8a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b6e:	4b88      	ldr	r3, [pc, #544]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b72:	4a87      	ldr	r2, [pc, #540]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b78:	6413      	str	r3, [r2, #64]	; 0x40
 8007b7a:	4b85      	ldr	r3, [pc, #532]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b82:	60bb      	str	r3, [r7, #8]
 8007b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b86:	2301      	movs	r3, #1
 8007b88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b8a:	4b82      	ldr	r3, [pc, #520]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d118      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007b96:	4b7f      	ldr	r3, [pc, #508]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a7e      	ldr	r2, [pc, #504]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ba2:	f7fc fe59 	bl	8004858 <HAL_GetTick>
 8007ba6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ba8:	e008      	b.n	8007bbc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007baa:	f7fc fe55 	bl	8004858 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	2b64      	cmp	r3, #100	; 0x64
 8007bb6:	d901      	bls.n	8007bbc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e120      	b.n	8007dfe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bbc:	4b75      	ldr	r3, [pc, #468]	; (8007d94 <HAL_RCC_OscConfig+0x4d0>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0f0      	beq.n	8007baa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d106      	bne.n	8007bde <HAL_RCC_OscConfig+0x31a>
 8007bd0:	4b6f      	ldr	r3, [pc, #444]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd4:	4a6e      	ldr	r2, [pc, #440]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007bd6:	f043 0301 	orr.w	r3, r3, #1
 8007bda:	6713      	str	r3, [r2, #112]	; 0x70
 8007bdc:	e02d      	b.n	8007c3a <HAL_RCC_OscConfig+0x376>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10c      	bne.n	8007c00 <HAL_RCC_OscConfig+0x33c>
 8007be6:	4b6a      	ldr	r3, [pc, #424]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bea:	4a69      	ldr	r2, [pc, #420]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007bec:	f023 0301 	bic.w	r3, r3, #1
 8007bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8007bf2:	4b67      	ldr	r3, [pc, #412]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf6:	4a66      	ldr	r2, [pc, #408]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007bf8:	f023 0304 	bic.w	r3, r3, #4
 8007bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8007bfe:	e01c      	b.n	8007c3a <HAL_RCC_OscConfig+0x376>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	2b05      	cmp	r3, #5
 8007c06:	d10c      	bne.n	8007c22 <HAL_RCC_OscConfig+0x35e>
 8007c08:	4b61      	ldr	r3, [pc, #388]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0c:	4a60      	ldr	r2, [pc, #384]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007c0e:	f043 0304 	orr.w	r3, r3, #4
 8007c12:	6713      	str	r3, [r2, #112]	; 0x70
 8007c14:	4b5e      	ldr	r3, [pc, #376]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c18:	4a5d      	ldr	r2, [pc, #372]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007c1a:	f043 0301 	orr.w	r3, r3, #1
 8007c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8007c20:	e00b      	b.n	8007c3a <HAL_RCC_OscConfig+0x376>
 8007c22:	4b5b      	ldr	r3, [pc, #364]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c26:	4a5a      	ldr	r2, [pc, #360]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007c28:	f023 0301 	bic.w	r3, r3, #1
 8007c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8007c2e:	4b58      	ldr	r3, [pc, #352]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c32:	4a57      	ldr	r2, [pc, #348]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007c34:	f023 0304 	bic.w	r3, r3, #4
 8007c38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d015      	beq.n	8007c6e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c42:	f7fc fe09 	bl	8004858 <HAL_GetTick>
 8007c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c48:	e00a      	b.n	8007c60 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c4a:	f7fc fe05 	bl	8004858 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e0ce      	b.n	8007dfe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c60:	4b4b      	ldr	r3, [pc, #300]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d0ee      	beq.n	8007c4a <HAL_RCC_OscConfig+0x386>
 8007c6c:	e014      	b.n	8007c98 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c6e:	f7fc fdf3 	bl	8004858 <HAL_GetTick>
 8007c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c74:	e00a      	b.n	8007c8c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c76:	f7fc fdef 	bl	8004858 <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d901      	bls.n	8007c8c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e0b8      	b.n	8007dfe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c8c:	4b40      	ldr	r3, [pc, #256]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c90:	f003 0302 	and.w	r3, r3, #2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1ee      	bne.n	8007c76 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d105      	bne.n	8007caa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c9e:	4b3c      	ldr	r3, [pc, #240]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	4a3b      	ldr	r2, [pc, #236]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ca8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f000 80a4 	beq.w	8007dfc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cb4:	4b36      	ldr	r3, [pc, #216]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	f003 030c 	and.w	r3, r3, #12
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d06b      	beq.n	8007d98 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d149      	bne.n	8007d5c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cc8:	4b31      	ldr	r3, [pc, #196]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a30      	ldr	r2, [pc, #192]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd4:	f7fc fdc0 	bl	8004858 <HAL_GetTick>
 8007cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cda:	e008      	b.n	8007cee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cdc:	f7fc fdbc 	bl	8004858 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d901      	bls.n	8007cee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e087      	b.n	8007dfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cee:	4b28      	ldr	r3, [pc, #160]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1f0      	bne.n	8007cdc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69da      	ldr	r2, [r3, #28]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	019b      	lsls	r3, r3, #6
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d10:	085b      	lsrs	r3, r3, #1
 8007d12:	3b01      	subs	r3, #1
 8007d14:	041b      	lsls	r3, r3, #16
 8007d16:	431a      	orrs	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	061b      	lsls	r3, r3, #24
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	4a1b      	ldr	r2, [pc, #108]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007d22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d26:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d28:	4b19      	ldr	r3, [pc, #100]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a18      	ldr	r2, [pc, #96]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d34:	f7fc fd90 	bl	8004858 <HAL_GetTick>
 8007d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d3a:	e008      	b.n	8007d4e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d3c:	f7fc fd8c 	bl	8004858 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d901      	bls.n	8007d4e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e057      	b.n	8007dfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d4e:	4b10      	ldr	r3, [pc, #64]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d0f0      	beq.n	8007d3c <HAL_RCC_OscConfig+0x478>
 8007d5a:	e04f      	b.n	8007dfc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d5c:	4b0c      	ldr	r3, [pc, #48]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a0b      	ldr	r2, [pc, #44]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d68:	f7fc fd76 	bl	8004858 <HAL_GetTick>
 8007d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d6e:	e008      	b.n	8007d82 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d70:	f7fc fd72 	bl	8004858 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d901      	bls.n	8007d82 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e03d      	b.n	8007dfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d82:	4b03      	ldr	r3, [pc, #12]	; (8007d90 <HAL_RCC_OscConfig+0x4cc>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1f0      	bne.n	8007d70 <HAL_RCC_OscConfig+0x4ac>
 8007d8e:	e035      	b.n	8007dfc <HAL_RCC_OscConfig+0x538>
 8007d90:	40023800 	.word	0x40023800
 8007d94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007d98:	4b1b      	ldr	r3, [pc, #108]	; (8007e08 <HAL_RCC_OscConfig+0x544>)
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d028      	beq.n	8007df8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d121      	bne.n	8007df8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d11a      	bne.n	8007df8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007dc8:	4013      	ands	r3, r2
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007dce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d111      	bne.n	8007df8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dde:	085b      	lsrs	r3, r3, #1
 8007de0:	3b01      	subs	r3, #1
 8007de2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d107      	bne.n	8007df8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d001      	beq.n	8007dfc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e000      	b.n	8007dfe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	40023800 	.word	0x40023800

08007e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e0d0      	b.n	8007fc6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e24:	4b6a      	ldr	r3, [pc, #424]	; (8007fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 030f 	and.w	r3, r3, #15
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d910      	bls.n	8007e54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e32:	4b67      	ldr	r3, [pc, #412]	; (8007fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f023 020f 	bic.w	r2, r3, #15
 8007e3a:	4965      	ldr	r1, [pc, #404]	; (8007fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e42:	4b63      	ldr	r3, [pc, #396]	; (8007fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 030f 	and.w	r3, r3, #15
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d001      	beq.n	8007e54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e0b8      	b.n	8007fc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0302 	and.w	r3, r3, #2
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d020      	beq.n	8007ea2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0304 	and.w	r3, r3, #4
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d005      	beq.n	8007e78 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e6c:	4b59      	ldr	r3, [pc, #356]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	4a58      	ldr	r2, [pc, #352]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007e72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0308 	and.w	r3, r3, #8
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d005      	beq.n	8007e90 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e84:	4b53      	ldr	r3, [pc, #332]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	4a52      	ldr	r2, [pc, #328]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007e8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e90:	4b50      	ldr	r3, [pc, #320]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	494d      	ldr	r1, [pc, #308]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d040      	beq.n	8007f30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d107      	bne.n	8007ec6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eb6:	4b47      	ldr	r3, [pc, #284]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d115      	bne.n	8007eee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e07f      	b.n	8007fc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d107      	bne.n	8007ede <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ece:	4b41      	ldr	r3, [pc, #260]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d109      	bne.n	8007eee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e073      	b.n	8007fc6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ede:	4b3d      	ldr	r3, [pc, #244]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e06b      	b.n	8007fc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007eee:	4b39      	ldr	r3, [pc, #228]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f023 0203 	bic.w	r2, r3, #3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	4936      	ldr	r1, [pc, #216]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f00:	f7fc fcaa 	bl	8004858 <HAL_GetTick>
 8007f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f06:	e00a      	b.n	8007f1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f08:	f7fc fca6 	bl	8004858 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e053      	b.n	8007fc6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f1e:	4b2d      	ldr	r3, [pc, #180]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f003 020c 	and.w	r2, r3, #12
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d1eb      	bne.n	8007f08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f30:	4b27      	ldr	r3, [pc, #156]	; (8007fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 030f 	and.w	r3, r3, #15
 8007f38:	683a      	ldr	r2, [r7, #0]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d210      	bcs.n	8007f60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f3e:	4b24      	ldr	r3, [pc, #144]	; (8007fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f023 020f 	bic.w	r2, r3, #15
 8007f46:	4922      	ldr	r1, [pc, #136]	; (8007fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f4e:	4b20      	ldr	r3, [pc, #128]	; (8007fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 030f 	and.w	r3, r3, #15
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d001      	beq.n	8007f60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e032      	b.n	8007fc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 0304 	and.w	r3, r3, #4
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d008      	beq.n	8007f7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f6c:	4b19      	ldr	r3, [pc, #100]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	4916      	ldr	r1, [pc, #88]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0308 	and.w	r3, r3, #8
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d009      	beq.n	8007f9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007f8a:	4b12      	ldr	r3, [pc, #72]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	00db      	lsls	r3, r3, #3
 8007f98:	490e      	ldr	r1, [pc, #56]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007f9e:	f000 f821 	bl	8007fe4 <HAL_RCC_GetSysClockFreq>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	4b0b      	ldr	r3, [pc, #44]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	091b      	lsrs	r3, r3, #4
 8007faa:	f003 030f 	and.w	r3, r3, #15
 8007fae:	490a      	ldr	r1, [pc, #40]	; (8007fd8 <HAL_RCC_ClockConfig+0x1cc>)
 8007fb0:	5ccb      	ldrb	r3, [r1, r3]
 8007fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb6:	4a09      	ldr	r2, [pc, #36]	; (8007fdc <HAL_RCC_ClockConfig+0x1d0>)
 8007fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007fba:	4b09      	ldr	r3, [pc, #36]	; (8007fe0 <HAL_RCC_ClockConfig+0x1d4>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fb ff26 	bl	8003e10 <HAL_InitTick>

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	40023c00 	.word	0x40023c00
 8007fd4:	40023800 	.word	0x40023800
 8007fd8:	0804cd80 	.word	0x0804cd80
 8007fdc:	2000003c 	.word	0x2000003c
 8007fe0:	20000040 	.word	0x20000040

08007fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fe8:	b090      	sub	sp, #64	; 0x40
 8007fea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	637b      	str	r3, [r7, #52]	; 0x34
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ffc:	4b59      	ldr	r3, [pc, #356]	; (8008164 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f003 030c 	and.w	r3, r3, #12
 8008004:	2b08      	cmp	r3, #8
 8008006:	d00d      	beq.n	8008024 <HAL_RCC_GetSysClockFreq+0x40>
 8008008:	2b08      	cmp	r3, #8
 800800a:	f200 80a1 	bhi.w	8008150 <HAL_RCC_GetSysClockFreq+0x16c>
 800800e:	2b00      	cmp	r3, #0
 8008010:	d002      	beq.n	8008018 <HAL_RCC_GetSysClockFreq+0x34>
 8008012:	2b04      	cmp	r3, #4
 8008014:	d003      	beq.n	800801e <HAL_RCC_GetSysClockFreq+0x3a>
 8008016:	e09b      	b.n	8008150 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008018:	4b53      	ldr	r3, [pc, #332]	; (8008168 <HAL_RCC_GetSysClockFreq+0x184>)
 800801a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800801c:	e09b      	b.n	8008156 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800801e:	4b53      	ldr	r3, [pc, #332]	; (800816c <HAL_RCC_GetSysClockFreq+0x188>)
 8008020:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008022:	e098      	b.n	8008156 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008024:	4b4f      	ldr	r3, [pc, #316]	; (8008164 <HAL_RCC_GetSysClockFreq+0x180>)
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800802c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800802e:	4b4d      	ldr	r3, [pc, #308]	; (8008164 <HAL_RCC_GetSysClockFreq+0x180>)
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d028      	beq.n	800808c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800803a:	4b4a      	ldr	r3, [pc, #296]	; (8008164 <HAL_RCC_GetSysClockFreq+0x180>)
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	099b      	lsrs	r3, r3, #6
 8008040:	2200      	movs	r2, #0
 8008042:	623b      	str	r3, [r7, #32]
 8008044:	627a      	str	r2, [r7, #36]	; 0x24
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800804c:	2100      	movs	r1, #0
 800804e:	4b47      	ldr	r3, [pc, #284]	; (800816c <HAL_RCC_GetSysClockFreq+0x188>)
 8008050:	fb03 f201 	mul.w	r2, r3, r1
 8008054:	2300      	movs	r3, #0
 8008056:	fb00 f303 	mul.w	r3, r0, r3
 800805a:	4413      	add	r3, r2
 800805c:	4a43      	ldr	r2, [pc, #268]	; (800816c <HAL_RCC_GetSysClockFreq+0x188>)
 800805e:	fba0 1202 	umull	r1, r2, r0, r2
 8008062:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008064:	460a      	mov	r2, r1
 8008066:	62ba      	str	r2, [r7, #40]	; 0x28
 8008068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800806a:	4413      	add	r3, r2
 800806c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800806e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008070:	2200      	movs	r2, #0
 8008072:	61bb      	str	r3, [r7, #24]
 8008074:	61fa      	str	r2, [r7, #28]
 8008076:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800807a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800807e:	f7f8 f917 	bl	80002b0 <__aeabi_uldivmod>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	4613      	mov	r3, r2
 8008088:	63fb      	str	r3, [r7, #60]	; 0x3c
 800808a:	e053      	b.n	8008134 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800808c:	4b35      	ldr	r3, [pc, #212]	; (8008164 <HAL_RCC_GetSysClockFreq+0x180>)
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	099b      	lsrs	r3, r3, #6
 8008092:	2200      	movs	r2, #0
 8008094:	613b      	str	r3, [r7, #16]
 8008096:	617a      	str	r2, [r7, #20]
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800809e:	f04f 0b00 	mov.w	fp, #0
 80080a2:	4652      	mov	r2, sl
 80080a4:	465b      	mov	r3, fp
 80080a6:	f04f 0000 	mov.w	r0, #0
 80080aa:	f04f 0100 	mov.w	r1, #0
 80080ae:	0159      	lsls	r1, r3, #5
 80080b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080b4:	0150      	lsls	r0, r2, #5
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	ebb2 080a 	subs.w	r8, r2, sl
 80080be:	eb63 090b 	sbc.w	r9, r3, fp
 80080c2:	f04f 0200 	mov.w	r2, #0
 80080c6:	f04f 0300 	mov.w	r3, #0
 80080ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80080ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80080d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80080d6:	ebb2 0408 	subs.w	r4, r2, r8
 80080da:	eb63 0509 	sbc.w	r5, r3, r9
 80080de:	f04f 0200 	mov.w	r2, #0
 80080e2:	f04f 0300 	mov.w	r3, #0
 80080e6:	00eb      	lsls	r3, r5, #3
 80080e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080ec:	00e2      	lsls	r2, r4, #3
 80080ee:	4614      	mov	r4, r2
 80080f0:	461d      	mov	r5, r3
 80080f2:	eb14 030a 	adds.w	r3, r4, sl
 80080f6:	603b      	str	r3, [r7, #0]
 80080f8:	eb45 030b 	adc.w	r3, r5, fp
 80080fc:	607b      	str	r3, [r7, #4]
 80080fe:	f04f 0200 	mov.w	r2, #0
 8008102:	f04f 0300 	mov.w	r3, #0
 8008106:	e9d7 4500 	ldrd	r4, r5, [r7]
 800810a:	4629      	mov	r1, r5
 800810c:	028b      	lsls	r3, r1, #10
 800810e:	4621      	mov	r1, r4
 8008110:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008114:	4621      	mov	r1, r4
 8008116:	028a      	lsls	r2, r1, #10
 8008118:	4610      	mov	r0, r2
 800811a:	4619      	mov	r1, r3
 800811c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800811e:	2200      	movs	r2, #0
 8008120:	60bb      	str	r3, [r7, #8]
 8008122:	60fa      	str	r2, [r7, #12]
 8008124:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008128:	f7f8 f8c2 	bl	80002b0 <__aeabi_uldivmod>
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	4613      	mov	r3, r2
 8008132:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008134:	4b0b      	ldr	r3, [pc, #44]	; (8008164 <HAL_RCC_GetSysClockFreq+0x180>)
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	0c1b      	lsrs	r3, r3, #16
 800813a:	f003 0303 	and.w	r3, r3, #3
 800813e:	3301      	adds	r3, #1
 8008140:	005b      	lsls	r3, r3, #1
 8008142:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8008144:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008148:	fbb2 f3f3 	udiv	r3, r2, r3
 800814c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800814e:	e002      	b.n	8008156 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008150:	4b05      	ldr	r3, [pc, #20]	; (8008168 <HAL_RCC_GetSysClockFreq+0x184>)
 8008152:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008158:	4618      	mov	r0, r3
 800815a:	3740      	adds	r7, #64	; 0x40
 800815c:	46bd      	mov	sp, r7
 800815e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008162:	bf00      	nop
 8008164:	40023800 	.word	0x40023800
 8008168:	00f42400 	.word	0x00f42400
 800816c:	017d7840 	.word	0x017d7840

08008170 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008174:	4b03      	ldr	r3, [pc, #12]	; (8008184 <HAL_RCC_GetHCLKFreq+0x14>)
 8008176:	681b      	ldr	r3, [r3, #0]
}
 8008178:	4618      	mov	r0, r3
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	2000003c 	.word	0x2000003c

08008188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800818c:	f7ff fff0 	bl	8008170 <HAL_RCC_GetHCLKFreq>
 8008190:	4602      	mov	r2, r0
 8008192:	4b05      	ldr	r3, [pc, #20]	; (80081a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	0a9b      	lsrs	r3, r3, #10
 8008198:	f003 0307 	and.w	r3, r3, #7
 800819c:	4903      	ldr	r1, [pc, #12]	; (80081ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800819e:	5ccb      	ldrb	r3, [r1, r3]
 80081a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	40023800 	.word	0x40023800
 80081ac:	0804cd90 	.word	0x0804cd90

080081b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80081b4:	f7ff ffdc 	bl	8008170 <HAL_RCC_GetHCLKFreq>
 80081b8:	4602      	mov	r2, r0
 80081ba:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	0b5b      	lsrs	r3, r3, #13
 80081c0:	f003 0307 	and.w	r3, r3, #7
 80081c4:	4903      	ldr	r1, [pc, #12]	; (80081d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081c6:	5ccb      	ldrb	r3, [r1, r3]
 80081c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	40023800 	.word	0x40023800
 80081d4:	0804cd90 	.word	0x0804cd90

080081d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	220f      	movs	r2, #15
 80081e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80081e8:	4b12      	ldr	r3, [pc, #72]	; (8008234 <HAL_RCC_GetClockConfig+0x5c>)
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f003 0203 	and.w	r2, r3, #3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80081f4:	4b0f      	ldr	r3, [pc, #60]	; (8008234 <HAL_RCC_GetClockConfig+0x5c>)
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008200:	4b0c      	ldr	r3, [pc, #48]	; (8008234 <HAL_RCC_GetClockConfig+0x5c>)
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800820c:	4b09      	ldr	r3, [pc, #36]	; (8008234 <HAL_RCC_GetClockConfig+0x5c>)
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	08db      	lsrs	r3, r3, #3
 8008212:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800821a:	4b07      	ldr	r3, [pc, #28]	; (8008238 <HAL_RCC_GetClockConfig+0x60>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 020f 	and.w	r2, r3, #15
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	601a      	str	r2, [r3, #0]
}
 8008226:	bf00      	nop
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	40023800 	.word	0x40023800
 8008238:	40023c00 	.word	0x40023c00

0800823c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b088      	sub	sp, #32
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008248:	2300      	movs	r3, #0
 800824a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800824c:	2300      	movs	r3, #0
 800824e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008250:	2300      	movs	r3, #0
 8008252:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008254:	2300      	movs	r3, #0
 8008256:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	d012      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008264:	4b69      	ldr	r3, [pc, #420]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	4a68      	ldr	r2, [pc, #416]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800826a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800826e:	6093      	str	r3, [r2, #8]
 8008270:	4b66      	ldr	r3, [pc, #408]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008272:	689a      	ldr	r2, [r3, #8]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008278:	4964      	ldr	r1, [pc, #400]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800827a:	4313      	orrs	r3, r2
 800827c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008286:	2301      	movs	r3, #1
 8008288:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d017      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008296:	4b5d      	ldr	r3, [pc, #372]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800829c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a4:	4959      	ldr	r1, [pc, #356]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082b4:	d101      	bne.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80082b6:	2301      	movs	r3, #1
 80082b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d101      	bne.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80082c2:	2301      	movs	r3, #1
 80082c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d017      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80082d2:	4b4e      	ldr	r3, [pc, #312]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e0:	494a      	ldr	r1, [pc, #296]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082f0:	d101      	bne.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80082f2:	2301      	movs	r3, #1
 80082f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80082fe:	2301      	movs	r3, #1
 8008300:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800830e:	2301      	movs	r3, #1
 8008310:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0320 	and.w	r3, r3, #32
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 808b 	beq.w	8008436 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008320:	4b3a      	ldr	r3, [pc, #232]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008324:	4a39      	ldr	r2, [pc, #228]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800832a:	6413      	str	r3, [r2, #64]	; 0x40
 800832c:	4b37      	ldr	r3, [pc, #220]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800832e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008334:	60bb      	str	r3, [r7, #8]
 8008336:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008338:	4b35      	ldr	r3, [pc, #212]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a34      	ldr	r2, [pc, #208]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800833e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008342:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008344:	f7fc fa88 	bl	8004858 <HAL_GetTick>
 8008348:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800834a:	e008      	b.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800834c:	f7fc fa84 	bl	8004858 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	2b64      	cmp	r3, #100	; 0x64
 8008358:	d901      	bls.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e357      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800835e:	4b2c      	ldr	r3, [pc, #176]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0f0      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800836a:	4b28      	ldr	r3, [pc, #160]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800836c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800836e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008372:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d035      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	429a      	cmp	r2, r3
 8008386:	d02e      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008388:	4b20      	ldr	r3, [pc, #128]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800838a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800838c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008390:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008392:	4b1e      	ldr	r3, [pc, #120]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008396:	4a1d      	ldr	r2, [pc, #116]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800839c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800839e:	4b1b      	ldr	r3, [pc, #108]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a2:	4a1a      	ldr	r2, [pc, #104]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80083aa:	4a18      	ldr	r2, [pc, #96]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80083b0:	4b16      	ldr	r3, [pc, #88]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b4:	f003 0301 	and.w	r3, r3, #1
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d114      	bne.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083bc:	f7fc fa4c 	bl	8004858 <HAL_GetTick>
 80083c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083c2:	e00a      	b.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083c4:	f7fc fa48 	bl	8004858 <HAL_GetTick>
 80083c8:	4602      	mov	r2, r0
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d901      	bls.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e319      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083da:	4b0c      	ldr	r3, [pc, #48]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083de:	f003 0302 	and.w	r3, r3, #2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d0ee      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083f2:	d111      	bne.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80083f4:	4b05      	ldr	r3, [pc, #20]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008400:	4b04      	ldr	r3, [pc, #16]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008402:	400b      	ands	r3, r1
 8008404:	4901      	ldr	r1, [pc, #4]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008406:	4313      	orrs	r3, r2
 8008408:	608b      	str	r3, [r1, #8]
 800840a:	e00b      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800840c:	40023800 	.word	0x40023800
 8008410:	40007000 	.word	0x40007000
 8008414:	0ffffcff 	.word	0x0ffffcff
 8008418:	4baa      	ldr	r3, [pc, #680]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	4aa9      	ldr	r2, [pc, #676]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800841e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008422:	6093      	str	r3, [r2, #8]
 8008424:	4ba7      	ldr	r3, [pc, #668]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008426:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008430:	49a4      	ldr	r1, [pc, #656]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008432:	4313      	orrs	r3, r2
 8008434:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0310 	and.w	r3, r3, #16
 800843e:	2b00      	cmp	r3, #0
 8008440:	d010      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008442:	4ba0      	ldr	r3, [pc, #640]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008448:	4a9e      	ldr	r2, [pc, #632]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800844a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800844e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008452:	4b9c      	ldr	r3, [pc, #624]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008454:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845c:	4999      	ldr	r1, [pc, #612]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800845e:	4313      	orrs	r3, r2
 8008460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00a      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008470:	4b94      	ldr	r3, [pc, #592]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008476:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800847e:	4991      	ldr	r1, [pc, #580]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008480:	4313      	orrs	r3, r2
 8008482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00a      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008492:	4b8c      	ldr	r3, [pc, #560]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008498:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084a0:	4988      	ldr	r1, [pc, #544]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00a      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80084b4:	4b83      	ldr	r3, [pc, #524]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084c2:	4980      	ldr	r1, [pc, #512]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00a      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80084d6:	4b7b      	ldr	r3, [pc, #492]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e4:	4977      	ldr	r1, [pc, #476]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00a      	beq.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80084f8:	4b72      	ldr	r3, [pc, #456]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084fe:	f023 0203 	bic.w	r2, r3, #3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008506:	496f      	ldr	r1, [pc, #444]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008508:	4313      	orrs	r3, r2
 800850a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800851a:	4b6a      	ldr	r3, [pc, #424]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800851c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008520:	f023 020c 	bic.w	r2, r3, #12
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008528:	4966      	ldr	r1, [pc, #408]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800852a:	4313      	orrs	r3, r2
 800852c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00a      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800853c:	4b61      	ldr	r3, [pc, #388]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800853e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008542:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800854a:	495e      	ldr	r1, [pc, #376]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800854c:	4313      	orrs	r3, r2
 800854e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00a      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800855e:	4b59      	ldr	r3, [pc, #356]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008564:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800856c:	4955      	ldr	r1, [pc, #340]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800856e:	4313      	orrs	r3, r2
 8008570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00a      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008580:	4b50      	ldr	r3, [pc, #320]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008586:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800858e:	494d      	ldr	r1, [pc, #308]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008590:	4313      	orrs	r3, r2
 8008592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00a      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80085a2:	4b48      	ldr	r3, [pc, #288]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b0:	4944      	ldr	r1, [pc, #272]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00a      	beq.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80085c4:	4b3f      	ldr	r3, [pc, #252]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d2:	493c      	ldr	r1, [pc, #240]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085d4:	4313      	orrs	r3, r2
 80085d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00a      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80085e6:	4b37      	ldr	r3, [pc, #220]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085f4:	4933      	ldr	r1, [pc, #204]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00a      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008608:	4b2e      	ldr	r3, [pc, #184]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800860a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800860e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008616:	492b      	ldr	r1, [pc, #172]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008618:	4313      	orrs	r3, r2
 800861a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d011      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800862a:	4b26      	ldr	r3, [pc, #152]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800862c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008630:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008638:	4922      	ldr	r1, [pc, #136]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800863a:	4313      	orrs	r3, r2
 800863c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008644:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008648:	d101      	bne.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800864a:	2301      	movs	r3, #1
 800864c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 0308 	and.w	r3, r3, #8
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800865a:	2301      	movs	r3, #1
 800865c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800866a:	4b16      	ldr	r3, [pc, #88]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800866c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008670:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008678:	4912      	ldr	r1, [pc, #72]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800867a:	4313      	orrs	r3, r2
 800867c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00b      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800868c:	4b0d      	ldr	r3, [pc, #52]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800868e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008692:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800869c:	4909      	ldr	r1, [pc, #36]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800869e:	4313      	orrs	r3, r2
 80086a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d006      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 80d9 	beq.w	800886a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80086b8:	4b02      	ldr	r3, [pc, #8]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a01      	ldr	r2, [pc, #4]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80086c2:	e001      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80086c4:	40023800 	.word	0x40023800
 80086c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086ca:	f7fc f8c5 	bl	8004858 <HAL_GetTick>
 80086ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086d0:	e008      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80086d2:	f7fc f8c1 	bl	8004858 <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	2b64      	cmp	r3, #100	; 0x64
 80086de:	d901      	bls.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e194      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086e4:	4b6c      	ldr	r3, [pc, #432]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1f0      	bne.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d021      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008700:	2b00      	cmp	r3, #0
 8008702:	d11d      	bne.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008704:	4b64      	ldr	r3, [pc, #400]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800870a:	0c1b      	lsrs	r3, r3, #16
 800870c:	f003 0303 	and.w	r3, r3, #3
 8008710:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008712:	4b61      	ldr	r3, [pc, #388]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008718:	0e1b      	lsrs	r3, r3, #24
 800871a:	f003 030f 	and.w	r3, r3, #15
 800871e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	019a      	lsls	r2, r3, #6
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	041b      	lsls	r3, r3, #16
 800872a:	431a      	orrs	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	061b      	lsls	r3, r3, #24
 8008730:	431a      	orrs	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	071b      	lsls	r3, r3, #28
 8008738:	4957      	ldr	r1, [pc, #348]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800873a:	4313      	orrs	r3, r2
 800873c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d004      	beq.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008754:	d00a      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800875e:	2b00      	cmp	r3, #0
 8008760:	d02e      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800876a:	d129      	bne.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800876c:	4b4a      	ldr	r3, [pc, #296]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800876e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008772:	0c1b      	lsrs	r3, r3, #16
 8008774:	f003 0303 	and.w	r3, r3, #3
 8008778:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800877a:	4b47      	ldr	r3, [pc, #284]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800877c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008780:	0f1b      	lsrs	r3, r3, #28
 8008782:	f003 0307 	and.w	r3, r3, #7
 8008786:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	019a      	lsls	r2, r3, #6
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	041b      	lsls	r3, r3, #16
 8008792:	431a      	orrs	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	061b      	lsls	r3, r3, #24
 800879a:	431a      	orrs	r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	071b      	lsls	r3, r3, #28
 80087a0:	493d      	ldr	r1, [pc, #244]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80087a8:	4b3b      	ldr	r3, [pc, #236]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087ae:	f023 021f 	bic.w	r2, r3, #31
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b6:	3b01      	subs	r3, #1
 80087b8:	4937      	ldr	r1, [pc, #220]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d01d      	beq.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80087cc:	4b32      	ldr	r3, [pc, #200]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087d2:	0e1b      	lsrs	r3, r3, #24
 80087d4:	f003 030f 	and.w	r3, r3, #15
 80087d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087da:	4b2f      	ldr	r3, [pc, #188]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087e0:	0f1b      	lsrs	r3, r3, #28
 80087e2:	f003 0307 	and.w	r3, r3, #7
 80087e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	019a      	lsls	r2, r3, #6
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	041b      	lsls	r3, r3, #16
 80087f4:	431a      	orrs	r2, r3
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	061b      	lsls	r3, r3, #24
 80087fa:	431a      	orrs	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	071b      	lsls	r3, r3, #28
 8008800:	4925      	ldr	r1, [pc, #148]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008802:	4313      	orrs	r3, r2
 8008804:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d011      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	019a      	lsls	r2, r3, #6
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	041b      	lsls	r3, r3, #16
 8008820:	431a      	orrs	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	061b      	lsls	r3, r3, #24
 8008828:	431a      	orrs	r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	071b      	lsls	r3, r3, #28
 8008830:	4919      	ldr	r1, [pc, #100]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008832:	4313      	orrs	r3, r2
 8008834:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008838:	4b17      	ldr	r3, [pc, #92]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a16      	ldr	r2, [pc, #88]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800883e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008844:	f7fc f808 	bl	8004858 <HAL_GetTick>
 8008848:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800884a:	e008      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800884c:	f7fc f804 	bl	8004858 <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	2b64      	cmp	r3, #100	; 0x64
 8008858:	d901      	bls.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800885a:	2303      	movs	r3, #3
 800885c:	e0d7      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800885e:	4b0e      	ldr	r3, [pc, #56]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008866:	2b00      	cmp	r3, #0
 8008868:	d0f0      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	2b01      	cmp	r3, #1
 800886e:	f040 80cd 	bne.w	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008872:	4b09      	ldr	r3, [pc, #36]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a08      	ldr	r2, [pc, #32]	; (8008898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800887c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800887e:	f7fb ffeb 	bl	8004858 <HAL_GetTick>
 8008882:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008884:	e00a      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008886:	f7fb ffe7 	bl	8004858 <HAL_GetTick>
 800888a:	4602      	mov	r2, r0
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	2b64      	cmp	r3, #100	; 0x64
 8008892:	d903      	bls.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008894:	2303      	movs	r3, #3
 8008896:	e0ba      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008898:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800889c:	4b5e      	ldr	r3, [pc, #376]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088a8:	d0ed      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d003      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x682>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d009      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d02e      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d12a      	bne.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80088d2:	4b51      	ldr	r3, [pc, #324]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088d8:	0c1b      	lsrs	r3, r3, #16
 80088da:	f003 0303 	and.w	r3, r3, #3
 80088de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80088e0:	4b4d      	ldr	r3, [pc, #308]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e6:	0f1b      	lsrs	r3, r3, #28
 80088e8:	f003 0307 	and.w	r3, r3, #7
 80088ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	019a      	lsls	r2, r3, #6
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	041b      	lsls	r3, r3, #16
 80088f8:	431a      	orrs	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	061b      	lsls	r3, r3, #24
 8008900:	431a      	orrs	r2, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	071b      	lsls	r3, r3, #28
 8008906:	4944      	ldr	r1, [pc, #272]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008908:	4313      	orrs	r3, r2
 800890a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800890e:	4b42      	ldr	r3, [pc, #264]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008914:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891c:	3b01      	subs	r3, #1
 800891e:	021b      	lsls	r3, r3, #8
 8008920:	493d      	ldr	r1, [pc, #244]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008922:	4313      	orrs	r3, r2
 8008924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d022      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800893c:	d11d      	bne.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800893e:	4b36      	ldr	r3, [pc, #216]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008944:	0e1b      	lsrs	r3, r3, #24
 8008946:	f003 030f 	and.w	r3, r3, #15
 800894a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800894c:	4b32      	ldr	r3, [pc, #200]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800894e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008952:	0f1b      	lsrs	r3, r3, #28
 8008954:	f003 0307 	and.w	r3, r3, #7
 8008958:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	019a      	lsls	r2, r3, #6
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a1b      	ldr	r3, [r3, #32]
 8008964:	041b      	lsls	r3, r3, #16
 8008966:	431a      	orrs	r2, r3
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	061b      	lsls	r3, r3, #24
 800896c:	431a      	orrs	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	071b      	lsls	r3, r3, #28
 8008972:	4929      	ldr	r1, [pc, #164]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008974:	4313      	orrs	r3, r2
 8008976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0308 	and.w	r3, r3, #8
 8008982:	2b00      	cmp	r3, #0
 8008984:	d028      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008986:	4b24      	ldr	r3, [pc, #144]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800898c:	0e1b      	lsrs	r3, r3, #24
 800898e:	f003 030f 	and.w	r3, r3, #15
 8008992:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008994:	4b20      	ldr	r3, [pc, #128]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800899a:	0c1b      	lsrs	r3, r3, #16
 800899c:	f003 0303 	and.w	r3, r3, #3
 80089a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	019a      	lsls	r2, r3, #6
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	041b      	lsls	r3, r3, #16
 80089ac:	431a      	orrs	r2, r3
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	061b      	lsls	r3, r3, #24
 80089b2:	431a      	orrs	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	69db      	ldr	r3, [r3, #28]
 80089b8:	071b      	lsls	r3, r3, #28
 80089ba:	4917      	ldr	r1, [pc, #92]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80089c2:	4b15      	ldr	r3, [pc, #84]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d0:	4911      	ldr	r1, [pc, #68]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80089d8:	4b0f      	ldr	r3, [pc, #60]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a0e      	ldr	r2, [pc, #56]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089e4:	f7fb ff38 	bl	8004858 <HAL_GetTick>
 80089e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80089ea:	e008      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80089ec:	f7fb ff34 	bl	8004858 <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	2b64      	cmp	r3, #100	; 0x64
 80089f8:	d901      	bls.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e007      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80089fe:	4b06      	ldr	r3, [pc, #24]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a0a:	d1ef      	bne.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3720      	adds	r7, #32
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	40023800 	.word	0x40023800

08008a1c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e071      	b.n	8008b16 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	7f5b      	ldrb	r3, [r3, #29]
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d105      	bne.n	8008a48 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f7f9 fb28 	bl	8002098 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	f003 0310 	and.w	r3, r3, #16
 8008a58:	2b10      	cmp	r3, #16
 8008a5a:	d053      	beq.n	8008b04 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	22ca      	movs	r2, #202	; 0xca
 8008a62:	625a      	str	r2, [r3, #36]	; 0x24
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2253      	movs	r2, #83	; 0x53
 8008a6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fac9 	bl	8009004 <RTC_EnterInitMode>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d12a      	bne.n	8008ad2 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	6899      	ldr	r1, [r3, #8]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	4b26      	ldr	r3, [pc, #152]	; (8008b20 <HAL_RTC_Init+0x104>)
 8008a88:	400b      	ands	r3, r1
 8008a8a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6899      	ldr	r1, [r3, #8]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	431a      	orrs	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	431a      	orrs	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	68d2      	ldr	r2, [r2, #12]
 8008ab2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6919      	ldr	r1, [r3, #16]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	041a      	lsls	r2, r3, #16
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fad2 	bl	8009072 <RTC_ExitInitMode>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d110      	bne.n	8008afa <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f022 0208 	bic.w	r2, r2, #8
 8008ae6:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	699a      	ldr	r2, [r3, #24]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	430a      	orrs	r2, r1
 8008af8:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	22ff      	movs	r2, #255	; 0xff
 8008b00:	625a      	str	r2, [r3, #36]	; 0x24
 8008b02:	e001      	b.n	8008b08 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d102      	bne.n	8008b14 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	ff8fffbf 	.word	0xff8fffbf

08008b24 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008b24:	b590      	push	{r4, r7, lr}
 8008b26:	b087      	sub	sp, #28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	7f1b      	ldrb	r3, [r3, #28]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d101      	bne.n	8008b40 <HAL_RTC_SetTime+0x1c>
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	e085      	b.n	8008c4c <HAL_RTC_SetTime+0x128>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2201      	movs	r2, #1
 8008b44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2202      	movs	r2, #2
 8008b4a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d126      	bne.n	8008ba0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d102      	bne.n	8008b66 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2200      	movs	r2, #0
 8008b64:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 faa6 	bl	80090bc <RTC_ByteToBcd2>
 8008b70:	4603      	mov	r3, r0
 8008b72:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	785b      	ldrb	r3, [r3, #1]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 fa9f 	bl	80090bc <RTC_ByteToBcd2>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008b82:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	789b      	ldrb	r3, [r3, #2]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 fa97 	bl	80090bc <RTC_ByteToBcd2>
 8008b8e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b90:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	78db      	ldrb	r3, [r3, #3]
 8008b98:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	617b      	str	r3, [r7, #20]
 8008b9e:	e018      	b.n	8008bd2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d102      	bne.n	8008bb4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	785b      	ldrb	r3, [r3, #1]
 8008bbe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008bc0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008bc6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	78db      	ldrb	r3, [r3, #3]
 8008bcc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	22ca      	movs	r2, #202	; 0xca
 8008bd8:	625a      	str	r2, [r3, #36]	; 0x24
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2253      	movs	r2, #83	; 0x53
 8008be0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f000 fa0e 	bl	8009004 <RTC_EnterInitMode>
 8008be8:	4603      	mov	r3, r0
 8008bea:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008bec:	7cfb      	ldrb	r3, [r7, #19]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d11e      	bne.n	8008c30 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	6979      	ldr	r1, [r7, #20]
 8008bf8:	4b16      	ldr	r3, [pc, #88]	; (8008c54 <HAL_RTC_SetTime+0x130>)
 8008bfa:	400b      	ands	r3, r1
 8008bfc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	689a      	ldr	r2, [r3, #8]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c0c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6899      	ldr	r1, [r3, #8]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	68da      	ldr	r2, [r3, #12]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f000 fa23 	bl	8009072 <RTC_ExitInitMode>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008c30:	7cfb      	ldrb	r3, [r7, #19]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d102      	bne.n	8008c3c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	22ff      	movs	r2, #255	; 0xff
 8008c42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	771a      	strb	r2, [r3, #28]

  return status;
 8008c4a:	7cfb      	ldrb	r3, [r7, #19]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	371c      	adds	r7, #28
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd90      	pop	{r4, r7, pc}
 8008c54:	007f7f7f 	.word	0x007f7f7f

08008c58 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008c58:	b590      	push	{r4, r7, lr}
 8008c5a:	b087      	sub	sp, #28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008c64:	2300      	movs	r3, #0
 8008c66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	7f1b      	ldrb	r3, [r3, #28]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d101      	bne.n	8008c74 <HAL_RTC_SetDate+0x1c>
 8008c70:	2302      	movs	r3, #2
 8008c72:	e06f      	b.n	8008d54 <HAL_RTC_SetDate+0xfc>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2201      	movs	r2, #1
 8008c78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2202      	movs	r2, #2
 8008c7e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10e      	bne.n	8008ca4 <HAL_RTC_SetDate+0x4c>
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	785b      	ldrb	r3, [r3, #1]
 8008c8a:	f003 0310 	and.w	r3, r3, #16
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d008      	beq.n	8008ca4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	785b      	ldrb	r3, [r3, #1]
 8008c96:	f023 0310 	bic.w	r3, r3, #16
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	330a      	adds	r3, #10
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d11c      	bne.n	8008ce4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	78db      	ldrb	r3, [r3, #3]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 fa04 	bl	80090bc <RTC_ByteToBcd2>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	785b      	ldrb	r3, [r3, #1]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 f9fd 	bl	80090bc <RTC_ByteToBcd2>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008cc6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	789b      	ldrb	r3, [r3, #2]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 f9f5 	bl	80090bc <RTC_ByteToBcd2>
 8008cd2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008cd4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	617b      	str	r3, [r7, #20]
 8008ce2:	e00e      	b.n	8008d02 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	78db      	ldrb	r3, [r3, #3]
 8008ce8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	785b      	ldrb	r3, [r3, #1]
 8008cee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008cf0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008cf2:	68ba      	ldr	r2, [r7, #8]
 8008cf4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008cf6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	22ca      	movs	r2, #202	; 0xca
 8008d08:	625a      	str	r2, [r3, #36]	; 0x24
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2253      	movs	r2, #83	; 0x53
 8008d10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f000 f976 	bl	8009004 <RTC_EnterInitMode>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008d1c:	7cfb      	ldrb	r3, [r7, #19]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10a      	bne.n	8008d38 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	6979      	ldr	r1, [r7, #20]
 8008d28:	4b0c      	ldr	r3, [pc, #48]	; (8008d5c <HAL_RTC_SetDate+0x104>)
 8008d2a:	400b      	ands	r3, r1
 8008d2c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	f000 f99f 	bl	8009072 <RTC_ExitInitMode>
 8008d34:	4603      	mov	r3, r0
 8008d36:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008d38:	7cfb      	ldrb	r3, [r7, #19]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d102      	bne.n	8008d44 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2201      	movs	r2, #1
 8008d42:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	22ff      	movs	r2, #255	; 0xff
 8008d4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	771a      	strb	r2, [r3, #28]

  return status;
 8008d52:	7cfb      	ldrb	r3, [r7, #19]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	371c      	adds	r7, #28
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd90      	pop	{r4, r7, pc}
 8008d5c:	00ffff3f 	.word	0x00ffff3f

08008d60 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008d60:	b590      	push	{r4, r7, lr}
 8008d62:	b089      	sub	sp, #36	; 0x24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	7f1b      	ldrb	r3, [r3, #28]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d101      	bne.n	8008d84 <HAL_RTC_SetAlarm+0x24>
 8008d80:	2302      	movs	r3, #2
 8008d82:	e113      	b.n	8008fac <HAL_RTC_SetAlarm+0x24c>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2201      	movs	r2, #1
 8008d88:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2202      	movs	r2, #2
 8008d8e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d137      	bne.n	8008e06 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d102      	bne.n	8008daa <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	2200      	movs	r2, #0
 8008da8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 f984 	bl	80090bc <RTC_ByteToBcd2>
 8008db4:	4603      	mov	r3, r0
 8008db6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	785b      	ldrb	r3, [r3, #1]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f000 f97d 	bl	80090bc <RTC_ByteToBcd2>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008dc6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	789b      	ldrb	r3, [r3, #2]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 f975 	bl	80090bc <RTC_ByteToBcd2>
 8008dd2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008dd4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	78db      	ldrb	r3, [r3, #3]
 8008ddc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008dde:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 f967 	bl	80090bc <RTC_ByteToBcd2>
 8008dee:	4603      	mov	r3, r0
 8008df0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008df2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008dfa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008e00:	4313      	orrs	r3, r2
 8008e02:	61fb      	str	r3, [r7, #28]
 8008e04:	e023      	b.n	8008e4e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d102      	bne.n	8008e1a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2200      	movs	r2, #0
 8008e18:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	785b      	ldrb	r3, [r3, #1]
 8008e24:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008e26:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008e28:	68ba      	ldr	r2, [r7, #8]
 8008e2a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008e2c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	78db      	ldrb	r3, [r3, #3]
 8008e32:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008e34:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e3c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008e3e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008e44:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008e56:	4313      	orrs	r3, r2
 8008e58:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	22ca      	movs	r2, #202	; 0xca
 8008e60:	625a      	str	r2, [r3, #36]	; 0x24
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2253      	movs	r2, #83	; 0x53
 8008e68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e72:	d148      	bne.n	8008f06 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689a      	ldr	r2, [r3, #8]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e82:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689a      	ldr	r2, [r3, #8]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e92:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008ea4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ea6:	f7fb fcd7 	bl	8004858 <HAL_GetTick>
 8008eaa:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008eac:	e013      	b.n	8008ed6 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008eae:	f7fb fcd3 	bl	8004858 <HAL_GetTick>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ebc:	d90b      	bls.n	8008ed6 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	22ff      	movs	r2, #255	; 0xff
 8008ec4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2203      	movs	r2, #3
 8008eca:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e06a      	b.n	8008fac <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	f003 0301 	and.w	r3, r3, #1
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d0e4      	beq.n	8008eae <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	69fa      	ldr	r2, [r7, #28]
 8008eea:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	689a      	ldr	r2, [r3, #8]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f02:	609a      	str	r2, [r3, #8]
 8008f04:	e047      	b.n	8008f96 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	689a      	ldr	r2, [r3, #8]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008f14:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	689a      	ldr	r2, [r3, #8]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f24:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008f36:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f38:	f7fb fc8e 	bl	8004858 <HAL_GetTick>
 8008f3c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008f3e:	e013      	b.n	8008f68 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f40:	f7fb fc8a 	bl	8004858 <HAL_GetTick>
 8008f44:	4602      	mov	r2, r0
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f4e:	d90b      	bls.n	8008f68 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	22ff      	movs	r2, #255	; 0xff
 8008f56:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2203      	movs	r2, #3
 8008f5c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008f64:	2303      	movs	r3, #3
 8008f66:	e021      	b.n	8008fac <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	f003 0302 	and.w	r3, r3, #2
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d0e4      	beq.n	8008f40 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	69fa      	ldr	r2, [r7, #28]
 8008f7c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	689a      	ldr	r2, [r3, #8]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f94:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	22ff      	movs	r2, #255	; 0xff
 8008f9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3724      	adds	r7, #36	; 0x24
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd90      	pop	{r4, r7, pc}

08008fb4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68da      	ldr	r2, [r3, #12]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008fce:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008fd0:	f7fb fc42 	bl	8004858 <HAL_GetTick>
 8008fd4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008fd6:	e009      	b.n	8008fec <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008fd8:	f7fb fc3e 	bl	8004858 <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fe6:	d901      	bls.n	8008fec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e007      	b.n	8008ffc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	f003 0320 	and.w	r3, r3, #32
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d0ee      	beq.n	8008fd8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800900c:	2300      	movs	r3, #0
 800900e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800901e:	2b00      	cmp	r3, #0
 8009020:	d122      	bne.n	8009068 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68da      	ldr	r2, [r3, #12]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009030:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009032:	f7fb fc11 	bl	8004858 <HAL_GetTick>
 8009036:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009038:	e00c      	b.n	8009054 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800903a:	f7fb fc0d 	bl	8004858 <HAL_GetTick>
 800903e:	4602      	mov	r2, r0
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009048:	d904      	bls.n	8009054 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2204      	movs	r2, #4
 800904e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800905e:	2b00      	cmp	r3, #0
 8009060:	d102      	bne.n	8009068 <RTC_EnterInitMode+0x64>
 8009062:	7bfb      	ldrb	r3, [r7, #15]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d1e8      	bne.n	800903a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009068:	7bfb      	ldrb	r3, [r7, #15]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b084      	sub	sp, #16
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68da      	ldr	r2, [r3, #12]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800908c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	f003 0320 	and.w	r3, r3, #32
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10a      	bne.n	80090b2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7ff ff89 	bl	8008fb4 <HAL_RTC_WaitForSynchro>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d004      	beq.n	80090b2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2204      	movs	r2, #4
 80090ac:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	4603      	mov	r3, r0
 80090c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80090c6:	2300      	movs	r3, #0
 80090c8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80090ca:	e005      	b.n	80090d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	3301      	adds	r3, #1
 80090d0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80090d2:	79fb      	ldrb	r3, [r7, #7]
 80090d4:	3b0a      	subs	r3, #10
 80090d6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80090d8:	79fb      	ldrb	r3, [r7, #7]
 80090da:	2b09      	cmp	r3, #9
 80090dc:	d8f6      	bhi.n	80090cc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	011b      	lsls	r3, r3, #4
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	b2db      	uxtb	r3, r3
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3714      	adds	r7, #20
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b087      	sub	sp, #28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009104:	2300      	movs	r3, #0
 8009106:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	7f1b      	ldrb	r3, [r3, #28]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d101      	bne.n	8009114 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009110:	2302      	movs	r3, #2
 8009112:	e050      	b.n	80091b6 <HAL_RTCEx_SetTimeStamp+0xbe>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2201      	movs	r2, #1
 8009118:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2202      	movs	r2, #2
 800911e:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f022 0206 	bic.w	r2, r2, #6
 800912e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	430a      	orrs	r2, r1
 800913e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	689a      	ldr	r2, [r3, #8]
 8009146:	4b1f      	ldr	r3, [pc, #124]	; (80091c4 <HAL_RTCEx_SetTimeStamp+0xcc>)
 8009148:	4013      	ands	r3, r2
 800914a:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800914c:	697a      	ldr	r2, [r7, #20]
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	4313      	orrs	r3, r2
 8009152:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	22ca      	movs	r2, #202	; 0xca
 800915a:	625a      	str	r2, [r3, #36]	; 0x24
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2253      	movs	r2, #83	; 0x53
 8009162:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	697a      	ldr	r2, [r7, #20]
 800916a:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	b2da      	uxtb	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f462 6208 	orn	r2, r2, #2176	; 0x880
 800917c:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	b2da      	uxtb	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 800918e:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689a      	ldr	r2, [r3, #8]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800919e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	22ff      	movs	r2, #255	; 0xff
 80091a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2201      	movs	r2, #1
 80091ac:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	371c      	adds	r7, #28
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	fffff7f7 	.word	0xfffff7f7

080091c8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d101      	bne.n	80091dc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e025      	b.n	8009228 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d106      	bne.n	80091f6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7f7 fc9b 	bl	8000b2c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2202      	movs	r2, #2
 80091fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	3304      	adds	r3, #4
 8009206:	4619      	mov	r1, r3
 8009208:	4610      	mov	r0, r2
 800920a:	f001 fa33 	bl	800a674 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6818      	ldr	r0, [r3, #0]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	461a      	mov	r2, r3
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	f001 fa87 	bl	800a72c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009242:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009244:	7dfb      	ldrb	r3, [r7, #23]
 8009246:	2b02      	cmp	r3, #2
 8009248:	d101      	bne.n	800924e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800924a:	2302      	movs	r3, #2
 800924c:	e021      	b.n	8009292 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800924e:	7dfb      	ldrb	r3, [r7, #23]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d002      	beq.n	800925a <HAL_SDRAM_SendCommand+0x2a>
 8009254:	7dfb      	ldrb	r3, [r7, #23]
 8009256:	2b05      	cmp	r3, #5
 8009258:	d118      	bne.n	800928c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2202      	movs	r2, #2
 800925e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	68b9      	ldr	r1, [r7, #8]
 800926a:	4618      	mov	r0, r3
 800926c:	f001 fac8 	bl	800a800 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b02      	cmp	r3, #2
 8009276:	d104      	bne.n	8009282 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2205      	movs	r2, #5
 800927c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009280:	e006      	b.n	8009290 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800928a:	e001      	b.n	8009290 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	e000      	b.n	8009292 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3718      	adds	r7, #24
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b082      	sub	sp, #8
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d101      	bne.n	80092b4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80092b0:	2302      	movs	r3, #2
 80092b2:	e016      	b.n	80092e2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d10f      	bne.n	80092e0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2202      	movs	r2, #2
 80092c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f001 faba 	bl	800a848 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	e000      	b.n	80092e2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b084      	sub	sp, #16
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d101      	bne.n	80092fc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e09d      	b.n	8009438 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	2b00      	cmp	r3, #0
 8009302:	d108      	bne.n	8009316 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800930c:	d009      	beq.n	8009322 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	61da      	str	r2, [r3, #28]
 8009314:	e005      	b.n	8009322 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b00      	cmp	r3, #0
 8009332:	d106      	bne.n	8009342 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7f8 ff17 	bl	8002170 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2202      	movs	r2, #2
 8009346:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009358:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009362:	d902      	bls.n	800936a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009364:	2300      	movs	r3, #0
 8009366:	60fb      	str	r3, [r7, #12]
 8009368:	e002      	b.n	8009370 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800936a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800936e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009378:	d007      	beq.n	800938a <HAL_SPI_Init+0xa0>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009382:	d002      	beq.n	800938a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800939a:	431a      	orrs	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	f003 0302 	and.w	r3, r3, #2
 80093a4:	431a      	orrs	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	431a      	orrs	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093b8:	431a      	orrs	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093c2:	431a      	orrs	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a1b      	ldr	r3, [r3, #32]
 80093c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093cc:	ea42 0103 	orr.w	r1, r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	430a      	orrs	r2, r1
 80093de:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	0c1b      	lsrs	r3, r3, #16
 80093e6:	f003 0204 	and.w	r2, r3, #4
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ee:	f003 0310 	and.w	r3, r3, #16
 80093f2:	431a      	orrs	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f8:	f003 0308 	and.w	r3, r3, #8
 80093fc:	431a      	orrs	r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009406:	ea42 0103 	orr.w	r1, r2, r3
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	430a      	orrs	r2, r1
 8009416:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	69da      	ldr	r2, [r3, #28]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009426:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e049      	b.n	80094e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b00      	cmp	r3, #0
 800945c:	d106      	bne.n	800946c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7fa ff7a 	bl	8004360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2202      	movs	r2, #2
 8009470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	3304      	adds	r3, #4
 800947c:	4619      	mov	r1, r3
 800947e:	4610      	mov	r0, r2
 8009480:	f000 fac0 	bl	8009a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
	...

080094f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	2b01      	cmp	r3, #1
 8009502:	d001      	beq.n	8009508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e054      	b.n	80095b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2202      	movs	r2, #2
 800950c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68da      	ldr	r2, [r3, #12]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f042 0201 	orr.w	r2, r2, #1
 800951e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a26      	ldr	r2, [pc, #152]	; (80095c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d022      	beq.n	8009570 <HAL_TIM_Base_Start_IT+0x80>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009532:	d01d      	beq.n	8009570 <HAL_TIM_Base_Start_IT+0x80>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a22      	ldr	r2, [pc, #136]	; (80095c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d018      	beq.n	8009570 <HAL_TIM_Base_Start_IT+0x80>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a21      	ldr	r2, [pc, #132]	; (80095c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d013      	beq.n	8009570 <HAL_TIM_Base_Start_IT+0x80>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a1f      	ldr	r2, [pc, #124]	; (80095cc <HAL_TIM_Base_Start_IT+0xdc>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d00e      	beq.n	8009570 <HAL_TIM_Base_Start_IT+0x80>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a1e      	ldr	r2, [pc, #120]	; (80095d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d009      	beq.n	8009570 <HAL_TIM_Base_Start_IT+0x80>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a1c      	ldr	r2, [pc, #112]	; (80095d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d004      	beq.n	8009570 <HAL_TIM_Base_Start_IT+0x80>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a1b      	ldr	r2, [pc, #108]	; (80095d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d115      	bne.n	800959c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689a      	ldr	r2, [r3, #8]
 8009576:	4b19      	ldr	r3, [pc, #100]	; (80095dc <HAL_TIM_Base_Start_IT+0xec>)
 8009578:	4013      	ands	r3, r2
 800957a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2b06      	cmp	r3, #6
 8009580:	d015      	beq.n	80095ae <HAL_TIM_Base_Start_IT+0xbe>
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009588:	d011      	beq.n	80095ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f042 0201 	orr.w	r2, r2, #1
 8009598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800959a:	e008      	b.n	80095ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f042 0201 	orr.w	r2, r2, #1
 80095aa:	601a      	str	r2, [r3, #0]
 80095ac:	e000      	b.n	80095b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3714      	adds	r7, #20
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	40010000 	.word	0x40010000
 80095c4:	40000400 	.word	0x40000400
 80095c8:	40000800 	.word	0x40000800
 80095cc:	40000c00 	.word	0x40000c00
 80095d0:	40010400 	.word	0x40010400
 80095d4:	40014000 	.word	0x40014000
 80095d8:	40001800 	.word	0x40001800
 80095dc:	00010007 	.word	0x00010007

080095e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	f003 0302 	and.w	r3, r3, #2
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d122      	bne.n	800963c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	f003 0302 	and.w	r3, r3, #2
 8009600:	2b02      	cmp	r3, #2
 8009602:	d11b      	bne.n	800963c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f06f 0202 	mvn.w	r2, #2
 800960c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	f003 0303 	and.w	r3, r3, #3
 800961e:	2b00      	cmp	r3, #0
 8009620:	d003      	beq.n	800962a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f9d0 	bl	80099c8 <HAL_TIM_IC_CaptureCallback>
 8009628:	e005      	b.n	8009636 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 f9c2 	bl	80099b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f9d3 	bl	80099dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	f003 0304 	and.w	r3, r3, #4
 8009646:	2b04      	cmp	r3, #4
 8009648:	d122      	bne.n	8009690 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	f003 0304 	and.w	r3, r3, #4
 8009654:	2b04      	cmp	r3, #4
 8009656:	d11b      	bne.n	8009690 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f06f 0204 	mvn.w	r2, #4
 8009660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2202      	movs	r2, #2
 8009666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009672:	2b00      	cmp	r3, #0
 8009674:	d003      	beq.n	800967e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f9a6 	bl	80099c8 <HAL_TIM_IC_CaptureCallback>
 800967c:	e005      	b.n	800968a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f998 	bl	80099b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f9a9 	bl	80099dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	f003 0308 	and.w	r3, r3, #8
 800969a:	2b08      	cmp	r3, #8
 800969c:	d122      	bne.n	80096e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	f003 0308 	and.w	r3, r3, #8
 80096a8:	2b08      	cmp	r3, #8
 80096aa:	d11b      	bne.n	80096e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f06f 0208 	mvn.w	r2, #8
 80096b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2204      	movs	r2, #4
 80096ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	f003 0303 	and.w	r3, r3, #3
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f97c 	bl	80099c8 <HAL_TIM_IC_CaptureCallback>
 80096d0:	e005      	b.n	80096de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f96e 	bl	80099b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 f97f 	bl	80099dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	f003 0310 	and.w	r3, r3, #16
 80096ee:	2b10      	cmp	r3, #16
 80096f0:	d122      	bne.n	8009738 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	f003 0310 	and.w	r3, r3, #16
 80096fc:	2b10      	cmp	r3, #16
 80096fe:	d11b      	bne.n	8009738 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f06f 0210 	mvn.w	r2, #16
 8009708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2208      	movs	r2, #8
 800970e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	69db      	ldr	r3, [r3, #28]
 8009716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800971a:	2b00      	cmp	r3, #0
 800971c:	d003      	beq.n	8009726 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f952 	bl	80099c8 <HAL_TIM_IC_CaptureCallback>
 8009724:	e005      	b.n	8009732 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f944 	bl	80099b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f955 	bl	80099dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	f003 0301 	and.w	r3, r3, #1
 8009742:	2b01      	cmp	r3, #1
 8009744:	d10e      	bne.n	8009764 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	f003 0301 	and.w	r3, r3, #1
 8009750:	2b01      	cmp	r3, #1
 8009752:	d107      	bne.n	8009764 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f06f 0201 	mvn.w	r2, #1
 800975c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7f8 fbde 	bl	8001f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800976e:	2b80      	cmp	r3, #128	; 0x80
 8009770:	d10e      	bne.n	8009790 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800977c:	2b80      	cmp	r3, #128	; 0x80
 800977e:	d107      	bne.n	8009790 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fb0c 	bl	8009da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800979a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800979e:	d10e      	bne.n	80097be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097aa:	2b80      	cmp	r3, #128	; 0x80
 80097ac:	d107      	bne.n	80097be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80097b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 faff 	bl	8009dbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097c8:	2b40      	cmp	r3, #64	; 0x40
 80097ca:	d10e      	bne.n	80097ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d6:	2b40      	cmp	r3, #64	; 0x40
 80097d8:	d107      	bne.n	80097ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80097e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 f903 	bl	80099f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	f003 0320 	and.w	r3, r3, #32
 80097f4:	2b20      	cmp	r3, #32
 80097f6:	d10e      	bne.n	8009816 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	f003 0320 	and.w	r3, r3, #32
 8009802:	2b20      	cmp	r3, #32
 8009804:	d107      	bne.n	8009816 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f06f 0220 	mvn.w	r2, #32
 800980e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fabf 	bl	8009d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009816:	bf00      	nop
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
	...

08009820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009834:	2b01      	cmp	r3, #1
 8009836:	d101      	bne.n	800983c <HAL_TIM_ConfigClockSource+0x1c>
 8009838:	2302      	movs	r3, #2
 800983a:	e0b4      	b.n	80099a6 <HAL_TIM_ConfigClockSource+0x186>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2202      	movs	r2, #2
 8009848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009854:	68ba      	ldr	r2, [r7, #8]
 8009856:	4b56      	ldr	r3, [pc, #344]	; (80099b0 <HAL_TIM_ConfigClockSource+0x190>)
 8009858:	4013      	ands	r3, r2
 800985a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009862:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009874:	d03e      	beq.n	80098f4 <HAL_TIM_ConfigClockSource+0xd4>
 8009876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800987a:	f200 8087 	bhi.w	800998c <HAL_TIM_ConfigClockSource+0x16c>
 800987e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009882:	f000 8086 	beq.w	8009992 <HAL_TIM_ConfigClockSource+0x172>
 8009886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800988a:	d87f      	bhi.n	800998c <HAL_TIM_ConfigClockSource+0x16c>
 800988c:	2b70      	cmp	r3, #112	; 0x70
 800988e:	d01a      	beq.n	80098c6 <HAL_TIM_ConfigClockSource+0xa6>
 8009890:	2b70      	cmp	r3, #112	; 0x70
 8009892:	d87b      	bhi.n	800998c <HAL_TIM_ConfigClockSource+0x16c>
 8009894:	2b60      	cmp	r3, #96	; 0x60
 8009896:	d050      	beq.n	800993a <HAL_TIM_ConfigClockSource+0x11a>
 8009898:	2b60      	cmp	r3, #96	; 0x60
 800989a:	d877      	bhi.n	800998c <HAL_TIM_ConfigClockSource+0x16c>
 800989c:	2b50      	cmp	r3, #80	; 0x50
 800989e:	d03c      	beq.n	800991a <HAL_TIM_ConfigClockSource+0xfa>
 80098a0:	2b50      	cmp	r3, #80	; 0x50
 80098a2:	d873      	bhi.n	800998c <HAL_TIM_ConfigClockSource+0x16c>
 80098a4:	2b40      	cmp	r3, #64	; 0x40
 80098a6:	d058      	beq.n	800995a <HAL_TIM_ConfigClockSource+0x13a>
 80098a8:	2b40      	cmp	r3, #64	; 0x40
 80098aa:	d86f      	bhi.n	800998c <HAL_TIM_ConfigClockSource+0x16c>
 80098ac:	2b30      	cmp	r3, #48	; 0x30
 80098ae:	d064      	beq.n	800997a <HAL_TIM_ConfigClockSource+0x15a>
 80098b0:	2b30      	cmp	r3, #48	; 0x30
 80098b2:	d86b      	bhi.n	800998c <HAL_TIM_ConfigClockSource+0x16c>
 80098b4:	2b20      	cmp	r3, #32
 80098b6:	d060      	beq.n	800997a <HAL_TIM_ConfigClockSource+0x15a>
 80098b8:	2b20      	cmp	r3, #32
 80098ba:	d867      	bhi.n	800998c <HAL_TIM_ConfigClockSource+0x16c>
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d05c      	beq.n	800997a <HAL_TIM_ConfigClockSource+0x15a>
 80098c0:	2b10      	cmp	r3, #16
 80098c2:	d05a      	beq.n	800997a <HAL_TIM_ConfigClockSource+0x15a>
 80098c4:	e062      	b.n	800998c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6818      	ldr	r0, [r3, #0]
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	6899      	ldr	r1, [r3, #8]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	685a      	ldr	r2, [r3, #4]
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	f000 f9af 	bl	8009c38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80098e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	609a      	str	r2, [r3, #8]
      break;
 80098f2:	e04f      	b.n	8009994 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6818      	ldr	r0, [r3, #0]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	6899      	ldr	r1, [r3, #8]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	685a      	ldr	r2, [r3, #4]
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	f000 f998 	bl	8009c38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	689a      	ldr	r2, [r3, #8]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009916:	609a      	str	r2, [r3, #8]
      break;
 8009918:	e03c      	b.n	8009994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6818      	ldr	r0, [r3, #0]
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	6859      	ldr	r1, [r3, #4]
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	461a      	mov	r2, r3
 8009928:	f000 f90c 	bl	8009b44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2150      	movs	r1, #80	; 0x50
 8009932:	4618      	mov	r0, r3
 8009934:	f000 f965 	bl	8009c02 <TIM_ITRx_SetConfig>
      break;
 8009938:	e02c      	b.n	8009994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6818      	ldr	r0, [r3, #0]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	6859      	ldr	r1, [r3, #4]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	461a      	mov	r2, r3
 8009948:	f000 f92b 	bl	8009ba2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2160      	movs	r1, #96	; 0x60
 8009952:	4618      	mov	r0, r3
 8009954:	f000 f955 	bl	8009c02 <TIM_ITRx_SetConfig>
      break;
 8009958:	e01c      	b.n	8009994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6818      	ldr	r0, [r3, #0]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	6859      	ldr	r1, [r3, #4]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	461a      	mov	r2, r3
 8009968:	f000 f8ec 	bl	8009b44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2140      	movs	r1, #64	; 0x40
 8009972:	4618      	mov	r0, r3
 8009974:	f000 f945 	bl	8009c02 <TIM_ITRx_SetConfig>
      break;
 8009978:	e00c      	b.n	8009994 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4619      	mov	r1, r3
 8009984:	4610      	mov	r0, r2
 8009986:	f000 f93c 	bl	8009c02 <TIM_ITRx_SetConfig>
      break;
 800998a:	e003      	b.n	8009994 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	73fb      	strb	r3, [r7, #15]
      break;
 8009990:	e000      	b.n	8009994 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009992:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	fffeff88 	.word	0xfffeff88

080099b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a40      	ldr	r2, [pc, #256]	; (8009b18 <TIM_Base_SetConfig+0x114>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d013      	beq.n	8009a44 <TIM_Base_SetConfig+0x40>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a22:	d00f      	beq.n	8009a44 <TIM_Base_SetConfig+0x40>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a3d      	ldr	r2, [pc, #244]	; (8009b1c <TIM_Base_SetConfig+0x118>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d00b      	beq.n	8009a44 <TIM_Base_SetConfig+0x40>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a3c      	ldr	r2, [pc, #240]	; (8009b20 <TIM_Base_SetConfig+0x11c>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d007      	beq.n	8009a44 <TIM_Base_SetConfig+0x40>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a3b      	ldr	r2, [pc, #236]	; (8009b24 <TIM_Base_SetConfig+0x120>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d003      	beq.n	8009a44 <TIM_Base_SetConfig+0x40>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a3a      	ldr	r2, [pc, #232]	; (8009b28 <TIM_Base_SetConfig+0x124>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d108      	bne.n	8009a56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a2f      	ldr	r2, [pc, #188]	; (8009b18 <TIM_Base_SetConfig+0x114>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d02b      	beq.n	8009ab6 <TIM_Base_SetConfig+0xb2>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a64:	d027      	beq.n	8009ab6 <TIM_Base_SetConfig+0xb2>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4a2c      	ldr	r2, [pc, #176]	; (8009b1c <TIM_Base_SetConfig+0x118>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d023      	beq.n	8009ab6 <TIM_Base_SetConfig+0xb2>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4a2b      	ldr	r2, [pc, #172]	; (8009b20 <TIM_Base_SetConfig+0x11c>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d01f      	beq.n	8009ab6 <TIM_Base_SetConfig+0xb2>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4a2a      	ldr	r2, [pc, #168]	; (8009b24 <TIM_Base_SetConfig+0x120>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d01b      	beq.n	8009ab6 <TIM_Base_SetConfig+0xb2>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a29      	ldr	r2, [pc, #164]	; (8009b28 <TIM_Base_SetConfig+0x124>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d017      	beq.n	8009ab6 <TIM_Base_SetConfig+0xb2>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a28      	ldr	r2, [pc, #160]	; (8009b2c <TIM_Base_SetConfig+0x128>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d013      	beq.n	8009ab6 <TIM_Base_SetConfig+0xb2>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4a27      	ldr	r2, [pc, #156]	; (8009b30 <TIM_Base_SetConfig+0x12c>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d00f      	beq.n	8009ab6 <TIM_Base_SetConfig+0xb2>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a26      	ldr	r2, [pc, #152]	; (8009b34 <TIM_Base_SetConfig+0x130>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d00b      	beq.n	8009ab6 <TIM_Base_SetConfig+0xb2>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4a25      	ldr	r2, [pc, #148]	; (8009b38 <TIM_Base_SetConfig+0x134>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d007      	beq.n	8009ab6 <TIM_Base_SetConfig+0xb2>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	4a24      	ldr	r2, [pc, #144]	; (8009b3c <TIM_Base_SetConfig+0x138>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d003      	beq.n	8009ab6 <TIM_Base_SetConfig+0xb2>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4a23      	ldr	r2, [pc, #140]	; (8009b40 <TIM_Base_SetConfig+0x13c>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d108      	bne.n	8009ac8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	695b      	ldr	r3, [r3, #20]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	689a      	ldr	r2, [r3, #8]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a0a      	ldr	r2, [pc, #40]	; (8009b18 <TIM_Base_SetConfig+0x114>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d003      	beq.n	8009afc <TIM_Base_SetConfig+0xf8>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a0c      	ldr	r2, [pc, #48]	; (8009b28 <TIM_Base_SetConfig+0x124>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d103      	bne.n	8009b04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	691a      	ldr	r2, [r3, #16]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	615a      	str	r2, [r3, #20]
}
 8009b0a:	bf00      	nop
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	40010000 	.word	0x40010000
 8009b1c:	40000400 	.word	0x40000400
 8009b20:	40000800 	.word	0x40000800
 8009b24:	40000c00 	.word	0x40000c00
 8009b28:	40010400 	.word	0x40010400
 8009b2c:	40014000 	.word	0x40014000
 8009b30:	40014400 	.word	0x40014400
 8009b34:	40014800 	.word	0x40014800
 8009b38:	40001800 	.word	0x40001800
 8009b3c:	40001c00 	.word	0x40001c00
 8009b40:	40002000 	.word	0x40002000

08009b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b087      	sub	sp, #28
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6a1b      	ldr	r3, [r3, #32]
 8009b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	f023 0201 	bic.w	r2, r3, #1
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	011b      	lsls	r3, r3, #4
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	f023 030a 	bic.w	r3, r3, #10
 8009b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b82:	697a      	ldr	r2, [r7, #20]
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	621a      	str	r2, [r3, #32]
}
 8009b96:	bf00      	nop
 8009b98:	371c      	adds	r7, #28
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ba2:	b480      	push	{r7}
 8009ba4:	b087      	sub	sp, #28
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	60f8      	str	r0, [r7, #12]
 8009baa:	60b9      	str	r1, [r7, #8]
 8009bac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	f023 0210 	bic.w	r2, r3, #16
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6a1b      	ldr	r3, [r3, #32]
 8009bc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009bcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	031b      	lsls	r3, r3, #12
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009bde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	011b      	lsls	r3, r3, #4
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	697a      	ldr	r2, [r7, #20]
 8009bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	693a      	ldr	r2, [r7, #16]
 8009bf4:	621a      	str	r2, [r3, #32]
}
 8009bf6:	bf00      	nop
 8009bf8:	371c      	adds	r7, #28
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c02:	b480      	push	{r7}
 8009c04:	b085      	sub	sp, #20
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	f043 0307 	orr.w	r3, r3, #7
 8009c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	609a      	str	r2, [r3, #8]
}
 8009c2c:	bf00      	nop
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b087      	sub	sp, #28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
 8009c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	021a      	lsls	r2, r3, #8
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	431a      	orrs	r2, r3
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	697a      	ldr	r2, [r7, #20]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	697a      	ldr	r2, [r7, #20]
 8009c6a:	609a      	str	r2, [r3, #8]
}
 8009c6c:	bf00      	nop
 8009c6e:	371c      	adds	r7, #28
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d101      	bne.n	8009c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c8c:	2302      	movs	r3, #2
 8009c8e:	e06d      	b.n	8009d6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2202      	movs	r2, #2
 8009c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a30      	ldr	r2, [pc, #192]	; (8009d78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d004      	beq.n	8009cc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a2f      	ldr	r2, [pc, #188]	; (8009d7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d108      	bne.n	8009cd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009cca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a20      	ldr	r2, [pc, #128]	; (8009d78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d022      	beq.n	8009d40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d02:	d01d      	beq.n	8009d40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a1d      	ldr	r2, [pc, #116]	; (8009d80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d018      	beq.n	8009d40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a1c      	ldr	r2, [pc, #112]	; (8009d84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d013      	beq.n	8009d40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a1a      	ldr	r2, [pc, #104]	; (8009d88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d00e      	beq.n	8009d40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a15      	ldr	r2, [pc, #84]	; (8009d7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d009      	beq.n	8009d40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a16      	ldr	r2, [pc, #88]	; (8009d8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d004      	beq.n	8009d40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a15      	ldr	r2, [pc, #84]	; (8009d90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d10c      	bne.n	8009d5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3714      	adds	r7, #20
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr
 8009d78:	40010000 	.word	0x40010000
 8009d7c:	40010400 	.word	0x40010400
 8009d80:	40000400 	.word	0x40000400
 8009d84:	40000800 	.word	0x40000800
 8009d88:	40000c00 	.word	0x40000c00
 8009d8c:	40014000 	.word	0x40014000
 8009d90:	40001800 	.word	0x40001800

08009d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d9c:	bf00      	nop
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009db0:	bf00      	nop
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009dc4:	bf00      	nop
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e040      	b.n	8009e64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d106      	bne.n	8009df8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7fa fbd6 	bl	80045a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2224      	movs	r2, #36	; 0x24
 8009dfc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f022 0201 	bic.w	r2, r2, #1
 8009e0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f82c 	bl	8009e6c <UART_SetConfig>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d101      	bne.n	8009e1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e022      	b.n	8009e64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d002      	beq.n	8009e2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 fa84 	bl	800a334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	689a      	ldr	r2, [r3, #8]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f042 0201 	orr.w	r2, r2, #1
 8009e5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fb0b 	bl	800a478 <UART_CheckIdleState>
 8009e62:	4603      	mov	r3, r0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b088      	sub	sp, #32
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	689a      	ldr	r2, [r3, #8]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	431a      	orrs	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	431a      	orrs	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	69db      	ldr	r3, [r3, #28]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	4ba6      	ldr	r3, [pc, #664]	; (800a130 <UART_SetConfig+0x2c4>)
 8009e98:	4013      	ands	r3, r2
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	6812      	ldr	r2, [r2, #0]
 8009e9e:	6979      	ldr	r1, [r7, #20]
 8009ea0:	430b      	orrs	r3, r1
 8009ea2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	68da      	ldr	r2, [r3, #12]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	699b      	ldr	r3, [r3, #24]
 8009ebe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a1b      	ldr	r3, [r3, #32]
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	697a      	ldr	r2, [r7, #20]
 8009eda:	430a      	orrs	r2, r1
 8009edc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a94      	ldr	r2, [pc, #592]	; (800a134 <UART_SetConfig+0x2c8>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d120      	bne.n	8009f2a <UART_SetConfig+0xbe>
 8009ee8:	4b93      	ldr	r3, [pc, #588]	; (800a138 <UART_SetConfig+0x2cc>)
 8009eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eee:	f003 0303 	and.w	r3, r3, #3
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d816      	bhi.n	8009f24 <UART_SetConfig+0xb8>
 8009ef6:	a201      	add	r2, pc, #4	; (adr r2, 8009efc <UART_SetConfig+0x90>)
 8009ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efc:	08009f0d 	.word	0x08009f0d
 8009f00:	08009f19 	.word	0x08009f19
 8009f04:	08009f13 	.word	0x08009f13
 8009f08:	08009f1f 	.word	0x08009f1f
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	77fb      	strb	r3, [r7, #31]
 8009f10:	e150      	b.n	800a1b4 <UART_SetConfig+0x348>
 8009f12:	2302      	movs	r3, #2
 8009f14:	77fb      	strb	r3, [r7, #31]
 8009f16:	e14d      	b.n	800a1b4 <UART_SetConfig+0x348>
 8009f18:	2304      	movs	r3, #4
 8009f1a:	77fb      	strb	r3, [r7, #31]
 8009f1c:	e14a      	b.n	800a1b4 <UART_SetConfig+0x348>
 8009f1e:	2308      	movs	r3, #8
 8009f20:	77fb      	strb	r3, [r7, #31]
 8009f22:	e147      	b.n	800a1b4 <UART_SetConfig+0x348>
 8009f24:	2310      	movs	r3, #16
 8009f26:	77fb      	strb	r3, [r7, #31]
 8009f28:	e144      	b.n	800a1b4 <UART_SetConfig+0x348>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a83      	ldr	r2, [pc, #524]	; (800a13c <UART_SetConfig+0x2d0>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d132      	bne.n	8009f9a <UART_SetConfig+0x12e>
 8009f34:	4b80      	ldr	r3, [pc, #512]	; (800a138 <UART_SetConfig+0x2cc>)
 8009f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f3a:	f003 030c 	and.w	r3, r3, #12
 8009f3e:	2b0c      	cmp	r3, #12
 8009f40:	d828      	bhi.n	8009f94 <UART_SetConfig+0x128>
 8009f42:	a201      	add	r2, pc, #4	; (adr r2, 8009f48 <UART_SetConfig+0xdc>)
 8009f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f48:	08009f7d 	.word	0x08009f7d
 8009f4c:	08009f95 	.word	0x08009f95
 8009f50:	08009f95 	.word	0x08009f95
 8009f54:	08009f95 	.word	0x08009f95
 8009f58:	08009f89 	.word	0x08009f89
 8009f5c:	08009f95 	.word	0x08009f95
 8009f60:	08009f95 	.word	0x08009f95
 8009f64:	08009f95 	.word	0x08009f95
 8009f68:	08009f83 	.word	0x08009f83
 8009f6c:	08009f95 	.word	0x08009f95
 8009f70:	08009f95 	.word	0x08009f95
 8009f74:	08009f95 	.word	0x08009f95
 8009f78:	08009f8f 	.word	0x08009f8f
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	77fb      	strb	r3, [r7, #31]
 8009f80:	e118      	b.n	800a1b4 <UART_SetConfig+0x348>
 8009f82:	2302      	movs	r3, #2
 8009f84:	77fb      	strb	r3, [r7, #31]
 8009f86:	e115      	b.n	800a1b4 <UART_SetConfig+0x348>
 8009f88:	2304      	movs	r3, #4
 8009f8a:	77fb      	strb	r3, [r7, #31]
 8009f8c:	e112      	b.n	800a1b4 <UART_SetConfig+0x348>
 8009f8e:	2308      	movs	r3, #8
 8009f90:	77fb      	strb	r3, [r7, #31]
 8009f92:	e10f      	b.n	800a1b4 <UART_SetConfig+0x348>
 8009f94:	2310      	movs	r3, #16
 8009f96:	77fb      	strb	r3, [r7, #31]
 8009f98:	e10c      	b.n	800a1b4 <UART_SetConfig+0x348>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a68      	ldr	r2, [pc, #416]	; (800a140 <UART_SetConfig+0x2d4>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d120      	bne.n	8009fe6 <UART_SetConfig+0x17a>
 8009fa4:	4b64      	ldr	r3, [pc, #400]	; (800a138 <UART_SetConfig+0x2cc>)
 8009fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009faa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009fae:	2b30      	cmp	r3, #48	; 0x30
 8009fb0:	d013      	beq.n	8009fda <UART_SetConfig+0x16e>
 8009fb2:	2b30      	cmp	r3, #48	; 0x30
 8009fb4:	d814      	bhi.n	8009fe0 <UART_SetConfig+0x174>
 8009fb6:	2b20      	cmp	r3, #32
 8009fb8:	d009      	beq.n	8009fce <UART_SetConfig+0x162>
 8009fba:	2b20      	cmp	r3, #32
 8009fbc:	d810      	bhi.n	8009fe0 <UART_SetConfig+0x174>
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d002      	beq.n	8009fc8 <UART_SetConfig+0x15c>
 8009fc2:	2b10      	cmp	r3, #16
 8009fc4:	d006      	beq.n	8009fd4 <UART_SetConfig+0x168>
 8009fc6:	e00b      	b.n	8009fe0 <UART_SetConfig+0x174>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	77fb      	strb	r3, [r7, #31]
 8009fcc:	e0f2      	b.n	800a1b4 <UART_SetConfig+0x348>
 8009fce:	2302      	movs	r3, #2
 8009fd0:	77fb      	strb	r3, [r7, #31]
 8009fd2:	e0ef      	b.n	800a1b4 <UART_SetConfig+0x348>
 8009fd4:	2304      	movs	r3, #4
 8009fd6:	77fb      	strb	r3, [r7, #31]
 8009fd8:	e0ec      	b.n	800a1b4 <UART_SetConfig+0x348>
 8009fda:	2308      	movs	r3, #8
 8009fdc:	77fb      	strb	r3, [r7, #31]
 8009fde:	e0e9      	b.n	800a1b4 <UART_SetConfig+0x348>
 8009fe0:	2310      	movs	r3, #16
 8009fe2:	77fb      	strb	r3, [r7, #31]
 8009fe4:	e0e6      	b.n	800a1b4 <UART_SetConfig+0x348>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a56      	ldr	r2, [pc, #344]	; (800a144 <UART_SetConfig+0x2d8>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d120      	bne.n	800a032 <UART_SetConfig+0x1c6>
 8009ff0:	4b51      	ldr	r3, [pc, #324]	; (800a138 <UART_SetConfig+0x2cc>)
 8009ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ff6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009ffa:	2bc0      	cmp	r3, #192	; 0xc0
 8009ffc:	d013      	beq.n	800a026 <UART_SetConfig+0x1ba>
 8009ffe:	2bc0      	cmp	r3, #192	; 0xc0
 800a000:	d814      	bhi.n	800a02c <UART_SetConfig+0x1c0>
 800a002:	2b80      	cmp	r3, #128	; 0x80
 800a004:	d009      	beq.n	800a01a <UART_SetConfig+0x1ae>
 800a006:	2b80      	cmp	r3, #128	; 0x80
 800a008:	d810      	bhi.n	800a02c <UART_SetConfig+0x1c0>
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <UART_SetConfig+0x1a8>
 800a00e:	2b40      	cmp	r3, #64	; 0x40
 800a010:	d006      	beq.n	800a020 <UART_SetConfig+0x1b4>
 800a012:	e00b      	b.n	800a02c <UART_SetConfig+0x1c0>
 800a014:	2300      	movs	r3, #0
 800a016:	77fb      	strb	r3, [r7, #31]
 800a018:	e0cc      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a01a:	2302      	movs	r3, #2
 800a01c:	77fb      	strb	r3, [r7, #31]
 800a01e:	e0c9      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a020:	2304      	movs	r3, #4
 800a022:	77fb      	strb	r3, [r7, #31]
 800a024:	e0c6      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a026:	2308      	movs	r3, #8
 800a028:	77fb      	strb	r3, [r7, #31]
 800a02a:	e0c3      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a02c:	2310      	movs	r3, #16
 800a02e:	77fb      	strb	r3, [r7, #31]
 800a030:	e0c0      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a44      	ldr	r2, [pc, #272]	; (800a148 <UART_SetConfig+0x2dc>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d125      	bne.n	800a088 <UART_SetConfig+0x21c>
 800a03c:	4b3e      	ldr	r3, [pc, #248]	; (800a138 <UART_SetConfig+0x2cc>)
 800a03e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a04a:	d017      	beq.n	800a07c <UART_SetConfig+0x210>
 800a04c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a050:	d817      	bhi.n	800a082 <UART_SetConfig+0x216>
 800a052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a056:	d00b      	beq.n	800a070 <UART_SetConfig+0x204>
 800a058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a05c:	d811      	bhi.n	800a082 <UART_SetConfig+0x216>
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d003      	beq.n	800a06a <UART_SetConfig+0x1fe>
 800a062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a066:	d006      	beq.n	800a076 <UART_SetConfig+0x20a>
 800a068:	e00b      	b.n	800a082 <UART_SetConfig+0x216>
 800a06a:	2300      	movs	r3, #0
 800a06c:	77fb      	strb	r3, [r7, #31]
 800a06e:	e0a1      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a070:	2302      	movs	r3, #2
 800a072:	77fb      	strb	r3, [r7, #31]
 800a074:	e09e      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a076:	2304      	movs	r3, #4
 800a078:	77fb      	strb	r3, [r7, #31]
 800a07a:	e09b      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a07c:	2308      	movs	r3, #8
 800a07e:	77fb      	strb	r3, [r7, #31]
 800a080:	e098      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a082:	2310      	movs	r3, #16
 800a084:	77fb      	strb	r3, [r7, #31]
 800a086:	e095      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a2f      	ldr	r2, [pc, #188]	; (800a14c <UART_SetConfig+0x2e0>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d125      	bne.n	800a0de <UART_SetConfig+0x272>
 800a092:	4b29      	ldr	r3, [pc, #164]	; (800a138 <UART_SetConfig+0x2cc>)
 800a094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a098:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a09c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0a0:	d017      	beq.n	800a0d2 <UART_SetConfig+0x266>
 800a0a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0a6:	d817      	bhi.n	800a0d8 <UART_SetConfig+0x26c>
 800a0a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0ac:	d00b      	beq.n	800a0c6 <UART_SetConfig+0x25a>
 800a0ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0b2:	d811      	bhi.n	800a0d8 <UART_SetConfig+0x26c>
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d003      	beq.n	800a0c0 <UART_SetConfig+0x254>
 800a0b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0bc:	d006      	beq.n	800a0cc <UART_SetConfig+0x260>
 800a0be:	e00b      	b.n	800a0d8 <UART_SetConfig+0x26c>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	77fb      	strb	r3, [r7, #31]
 800a0c4:	e076      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	77fb      	strb	r3, [r7, #31]
 800a0ca:	e073      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a0cc:	2304      	movs	r3, #4
 800a0ce:	77fb      	strb	r3, [r7, #31]
 800a0d0:	e070      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a0d2:	2308      	movs	r3, #8
 800a0d4:	77fb      	strb	r3, [r7, #31]
 800a0d6:	e06d      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a0d8:	2310      	movs	r3, #16
 800a0da:	77fb      	strb	r3, [r7, #31]
 800a0dc:	e06a      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a1b      	ldr	r2, [pc, #108]	; (800a150 <UART_SetConfig+0x2e4>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d138      	bne.n	800a15a <UART_SetConfig+0x2ee>
 800a0e8:	4b13      	ldr	r3, [pc, #76]	; (800a138 <UART_SetConfig+0x2cc>)
 800a0ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a0f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0f6:	d017      	beq.n	800a128 <UART_SetConfig+0x2bc>
 800a0f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0fc:	d82a      	bhi.n	800a154 <UART_SetConfig+0x2e8>
 800a0fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a102:	d00b      	beq.n	800a11c <UART_SetConfig+0x2b0>
 800a104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a108:	d824      	bhi.n	800a154 <UART_SetConfig+0x2e8>
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d003      	beq.n	800a116 <UART_SetConfig+0x2aa>
 800a10e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a112:	d006      	beq.n	800a122 <UART_SetConfig+0x2b6>
 800a114:	e01e      	b.n	800a154 <UART_SetConfig+0x2e8>
 800a116:	2300      	movs	r3, #0
 800a118:	77fb      	strb	r3, [r7, #31]
 800a11a:	e04b      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a11c:	2302      	movs	r3, #2
 800a11e:	77fb      	strb	r3, [r7, #31]
 800a120:	e048      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a122:	2304      	movs	r3, #4
 800a124:	77fb      	strb	r3, [r7, #31]
 800a126:	e045      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a128:	2308      	movs	r3, #8
 800a12a:	77fb      	strb	r3, [r7, #31]
 800a12c:	e042      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a12e:	bf00      	nop
 800a130:	efff69f3 	.word	0xefff69f3
 800a134:	40011000 	.word	0x40011000
 800a138:	40023800 	.word	0x40023800
 800a13c:	40004400 	.word	0x40004400
 800a140:	40004800 	.word	0x40004800
 800a144:	40004c00 	.word	0x40004c00
 800a148:	40005000 	.word	0x40005000
 800a14c:	40011400 	.word	0x40011400
 800a150:	40007800 	.word	0x40007800
 800a154:	2310      	movs	r3, #16
 800a156:	77fb      	strb	r3, [r7, #31]
 800a158:	e02c      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a72      	ldr	r2, [pc, #456]	; (800a328 <UART_SetConfig+0x4bc>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d125      	bne.n	800a1b0 <UART_SetConfig+0x344>
 800a164:	4b71      	ldr	r3, [pc, #452]	; (800a32c <UART_SetConfig+0x4c0>)
 800a166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a16a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a16e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a172:	d017      	beq.n	800a1a4 <UART_SetConfig+0x338>
 800a174:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a178:	d817      	bhi.n	800a1aa <UART_SetConfig+0x33e>
 800a17a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a17e:	d00b      	beq.n	800a198 <UART_SetConfig+0x32c>
 800a180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a184:	d811      	bhi.n	800a1aa <UART_SetConfig+0x33e>
 800a186:	2b00      	cmp	r3, #0
 800a188:	d003      	beq.n	800a192 <UART_SetConfig+0x326>
 800a18a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a18e:	d006      	beq.n	800a19e <UART_SetConfig+0x332>
 800a190:	e00b      	b.n	800a1aa <UART_SetConfig+0x33e>
 800a192:	2300      	movs	r3, #0
 800a194:	77fb      	strb	r3, [r7, #31]
 800a196:	e00d      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a198:	2302      	movs	r3, #2
 800a19a:	77fb      	strb	r3, [r7, #31]
 800a19c:	e00a      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a19e:	2304      	movs	r3, #4
 800a1a0:	77fb      	strb	r3, [r7, #31]
 800a1a2:	e007      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a1a4:	2308      	movs	r3, #8
 800a1a6:	77fb      	strb	r3, [r7, #31]
 800a1a8:	e004      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a1aa:	2310      	movs	r3, #16
 800a1ac:	77fb      	strb	r3, [r7, #31]
 800a1ae:	e001      	b.n	800a1b4 <UART_SetConfig+0x348>
 800a1b0:	2310      	movs	r3, #16
 800a1b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	69db      	ldr	r3, [r3, #28]
 800a1b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1bc:	d15b      	bne.n	800a276 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a1be:	7ffb      	ldrb	r3, [r7, #31]
 800a1c0:	2b08      	cmp	r3, #8
 800a1c2:	d828      	bhi.n	800a216 <UART_SetConfig+0x3aa>
 800a1c4:	a201      	add	r2, pc, #4	; (adr r2, 800a1cc <UART_SetConfig+0x360>)
 800a1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ca:	bf00      	nop
 800a1cc:	0800a1f1 	.word	0x0800a1f1
 800a1d0:	0800a1f9 	.word	0x0800a1f9
 800a1d4:	0800a201 	.word	0x0800a201
 800a1d8:	0800a217 	.word	0x0800a217
 800a1dc:	0800a207 	.word	0x0800a207
 800a1e0:	0800a217 	.word	0x0800a217
 800a1e4:	0800a217 	.word	0x0800a217
 800a1e8:	0800a217 	.word	0x0800a217
 800a1ec:	0800a20f 	.word	0x0800a20f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1f0:	f7fd ffca 	bl	8008188 <HAL_RCC_GetPCLK1Freq>
 800a1f4:	61b8      	str	r0, [r7, #24]
        break;
 800a1f6:	e013      	b.n	800a220 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1f8:	f7fd ffda 	bl	80081b0 <HAL_RCC_GetPCLK2Freq>
 800a1fc:	61b8      	str	r0, [r7, #24]
        break;
 800a1fe:	e00f      	b.n	800a220 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a200:	4b4b      	ldr	r3, [pc, #300]	; (800a330 <UART_SetConfig+0x4c4>)
 800a202:	61bb      	str	r3, [r7, #24]
        break;
 800a204:	e00c      	b.n	800a220 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a206:	f7fd feed 	bl	8007fe4 <HAL_RCC_GetSysClockFreq>
 800a20a:	61b8      	str	r0, [r7, #24]
        break;
 800a20c:	e008      	b.n	800a220 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a20e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a212:	61bb      	str	r3, [r7, #24]
        break;
 800a214:	e004      	b.n	800a220 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a216:	2300      	movs	r3, #0
 800a218:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	77bb      	strb	r3, [r7, #30]
        break;
 800a21e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d074      	beq.n	800a310 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	005a      	lsls	r2, r3, #1
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	085b      	lsrs	r3, r3, #1
 800a230:	441a      	add	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	fbb2 f3f3 	udiv	r3, r2, r3
 800a23a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	2b0f      	cmp	r3, #15
 800a240:	d916      	bls.n	800a270 <UART_SetConfig+0x404>
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a248:	d212      	bcs.n	800a270 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	f023 030f 	bic.w	r3, r3, #15
 800a252:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	085b      	lsrs	r3, r3, #1
 800a258:	b29b      	uxth	r3, r3
 800a25a:	f003 0307 	and.w	r3, r3, #7
 800a25e:	b29a      	uxth	r2, r3
 800a260:	89fb      	ldrh	r3, [r7, #14]
 800a262:	4313      	orrs	r3, r2
 800a264:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	89fa      	ldrh	r2, [r7, #14]
 800a26c:	60da      	str	r2, [r3, #12]
 800a26e:	e04f      	b.n	800a310 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	77bb      	strb	r3, [r7, #30]
 800a274:	e04c      	b.n	800a310 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a276:	7ffb      	ldrb	r3, [r7, #31]
 800a278:	2b08      	cmp	r3, #8
 800a27a:	d828      	bhi.n	800a2ce <UART_SetConfig+0x462>
 800a27c:	a201      	add	r2, pc, #4	; (adr r2, 800a284 <UART_SetConfig+0x418>)
 800a27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a282:	bf00      	nop
 800a284:	0800a2a9 	.word	0x0800a2a9
 800a288:	0800a2b1 	.word	0x0800a2b1
 800a28c:	0800a2b9 	.word	0x0800a2b9
 800a290:	0800a2cf 	.word	0x0800a2cf
 800a294:	0800a2bf 	.word	0x0800a2bf
 800a298:	0800a2cf 	.word	0x0800a2cf
 800a29c:	0800a2cf 	.word	0x0800a2cf
 800a2a0:	0800a2cf 	.word	0x0800a2cf
 800a2a4:	0800a2c7 	.word	0x0800a2c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2a8:	f7fd ff6e 	bl	8008188 <HAL_RCC_GetPCLK1Freq>
 800a2ac:	61b8      	str	r0, [r7, #24]
        break;
 800a2ae:	e013      	b.n	800a2d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2b0:	f7fd ff7e 	bl	80081b0 <HAL_RCC_GetPCLK2Freq>
 800a2b4:	61b8      	str	r0, [r7, #24]
        break;
 800a2b6:	e00f      	b.n	800a2d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2b8:	4b1d      	ldr	r3, [pc, #116]	; (800a330 <UART_SetConfig+0x4c4>)
 800a2ba:	61bb      	str	r3, [r7, #24]
        break;
 800a2bc:	e00c      	b.n	800a2d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2be:	f7fd fe91 	bl	8007fe4 <HAL_RCC_GetSysClockFreq>
 800a2c2:	61b8      	str	r0, [r7, #24]
        break;
 800a2c4:	e008      	b.n	800a2d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2ca:	61bb      	str	r3, [r7, #24]
        break;
 800a2cc:	e004      	b.n	800a2d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	77bb      	strb	r3, [r7, #30]
        break;
 800a2d6:	bf00      	nop
    }

    if (pclk != 0U)
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d018      	beq.n	800a310 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	085a      	lsrs	r2, r3, #1
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	441a      	add	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	2b0f      	cmp	r3, #15
 800a2f6:	d909      	bls.n	800a30c <UART_SetConfig+0x4a0>
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2fe:	d205      	bcs.n	800a30c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	b29a      	uxth	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	60da      	str	r2, [r3, #12]
 800a30a:	e001      	b.n	800a310 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a31c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3720      	adds	r7, #32
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	40007c00 	.word	0x40007c00
 800a32c:	40023800 	.word	0x40023800
 800a330:	00f42400 	.word	0x00f42400

0800a334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a340:	f003 0301 	and.w	r3, r3, #1
 800a344:	2b00      	cmp	r3, #0
 800a346:	d00a      	beq.n	800a35e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	430a      	orrs	r2, r1
 800a35c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a362:	f003 0302 	and.w	r3, r3, #2
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00a      	beq.n	800a380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	430a      	orrs	r2, r1
 800a37e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a384:	f003 0304 	and.w	r3, r3, #4
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d00a      	beq.n	800a3a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	430a      	orrs	r2, r1
 800a3a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a6:	f003 0308 	and.w	r3, r3, #8
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00a      	beq.n	800a3c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	430a      	orrs	r2, r1
 800a3c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c8:	f003 0310 	and.w	r3, r3, #16
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00a      	beq.n	800a3e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ea:	f003 0320 	and.w	r3, r3, #32
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00a      	beq.n	800a408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	430a      	orrs	r2, r1
 800a406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a410:	2b00      	cmp	r3, #0
 800a412:	d01a      	beq.n	800a44a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	430a      	orrs	r2, r1
 800a428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a432:	d10a      	bne.n	800a44a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	430a      	orrs	r2, r1
 800a448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00a      	beq.n	800a46c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	430a      	orrs	r2, r1
 800a46a:	605a      	str	r2, [r3, #4]
  }
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b086      	sub	sp, #24
 800a47c:	af02      	add	r7, sp, #8
 800a47e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a488:	f7fa f9e6 	bl	8004858 <HAL_GetTick>
 800a48c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f003 0308 	and.w	r3, r3, #8
 800a498:	2b08      	cmp	r3, #8
 800a49a:	d10e      	bne.n	800a4ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a49c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 f81b 	bl	800a4e6 <UART_WaitOnFlagUntilTimeout>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d001      	beq.n	800a4ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e011      	b.n	800a4de <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2220      	movs	r2, #32
 800a4be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2220      	movs	r2, #32
 800a4c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b09c      	sub	sp, #112	; 0x70
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	60f8      	str	r0, [r7, #12]
 800a4ee:	60b9      	str	r1, [r7, #8]
 800a4f0:	603b      	str	r3, [r7, #0]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4f6:	e0a7      	b.n	800a648 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4fe:	f000 80a3 	beq.w	800a648 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a502:	f7fa f9a9 	bl	8004858 <HAL_GetTick>
 800a506:	4602      	mov	r2, r0
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a50e:	429a      	cmp	r2, r3
 800a510:	d302      	bcc.n	800a518 <UART_WaitOnFlagUntilTimeout+0x32>
 800a512:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a514:	2b00      	cmp	r3, #0
 800a516:	d13f      	bne.n	800a598 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a520:	e853 3f00 	ldrex	r3, [r3]
 800a524:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a528:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a52c:	667b      	str	r3, [r7, #100]	; 0x64
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	461a      	mov	r2, r3
 800a534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a536:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a538:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a53c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a53e:	e841 2300 	strex	r3, r2, [r1]
 800a542:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1e6      	bne.n	800a518 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	3308      	adds	r3, #8
 800a550:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a554:	e853 3f00 	ldrex	r3, [r3]
 800a558:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55c:	f023 0301 	bic.w	r3, r3, #1
 800a560:	663b      	str	r3, [r7, #96]	; 0x60
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	3308      	adds	r3, #8
 800a568:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a56a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a56c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a570:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a572:	e841 2300 	strex	r3, r2, [r1]
 800a576:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d1e5      	bne.n	800a54a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2220      	movs	r2, #32
 800a582:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2220      	movs	r2, #32
 800a588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a594:	2303      	movs	r3, #3
 800a596:	e068      	b.n	800a66a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 0304 	and.w	r3, r3, #4
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d050      	beq.n	800a648 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	69db      	ldr	r3, [r3, #28]
 800a5ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5b4:	d148      	bne.n	800a648 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c8:	e853 3f00 	ldrex	r3, [r3]
 800a5cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a5d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5de:	637b      	str	r3, [r7, #52]	; 0x34
 800a5e0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a5e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5e6:	e841 2300 	strex	r3, r2, [r1]
 800a5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1e6      	bne.n	800a5c0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3308      	adds	r3, #8
 800a5f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	e853 3f00 	ldrex	r3, [r3]
 800a600:	613b      	str	r3, [r7, #16]
   return(result);
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	f023 0301 	bic.w	r3, r3, #1
 800a608:	66bb      	str	r3, [r7, #104]	; 0x68
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	3308      	adds	r3, #8
 800a610:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a612:	623a      	str	r2, [r7, #32]
 800a614:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a616:	69f9      	ldr	r1, [r7, #28]
 800a618:	6a3a      	ldr	r2, [r7, #32]
 800a61a:	e841 2300 	strex	r3, r2, [r1]
 800a61e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1e5      	bne.n	800a5f2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2220      	movs	r2, #32
 800a62a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2220      	movs	r2, #32
 800a630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2220      	movs	r2, #32
 800a638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a644:	2303      	movs	r3, #3
 800a646:	e010      	b.n	800a66a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	69da      	ldr	r2, [r3, #28]
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	4013      	ands	r3, r2
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	429a      	cmp	r2, r3
 800a656:	bf0c      	ite	eq
 800a658:	2301      	moveq	r3, #1
 800a65a:	2300      	movne	r3, #0
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	461a      	mov	r2, r3
 800a660:	79fb      	ldrb	r3, [r7, #7]
 800a662:	429a      	cmp	r2, r3
 800a664:	f43f af48 	beq.w	800a4f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3770      	adds	r7, #112	; 0x70
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
	...

0800a674 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d121      	bne.n	800a6ca <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	4b27      	ldr	r3, [pc, #156]	; (800a728 <FMC_SDRAM_Init+0xb4>)
 800a68c:	4013      	ands	r3, r2
 800a68e:	683a      	ldr	r2, [r7, #0]
 800a690:	6851      	ldr	r1, [r2, #4]
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	6892      	ldr	r2, [r2, #8]
 800a696:	4311      	orrs	r1, r2
 800a698:	683a      	ldr	r2, [r7, #0]
 800a69a:	68d2      	ldr	r2, [r2, #12]
 800a69c:	4311      	orrs	r1, r2
 800a69e:	683a      	ldr	r2, [r7, #0]
 800a6a0:	6912      	ldr	r2, [r2, #16]
 800a6a2:	4311      	orrs	r1, r2
 800a6a4:	683a      	ldr	r2, [r7, #0]
 800a6a6:	6952      	ldr	r2, [r2, #20]
 800a6a8:	4311      	orrs	r1, r2
 800a6aa:	683a      	ldr	r2, [r7, #0]
 800a6ac:	6992      	ldr	r2, [r2, #24]
 800a6ae:	4311      	orrs	r1, r2
 800a6b0:	683a      	ldr	r2, [r7, #0]
 800a6b2:	69d2      	ldr	r2, [r2, #28]
 800a6b4:	4311      	orrs	r1, r2
 800a6b6:	683a      	ldr	r2, [r7, #0]
 800a6b8:	6a12      	ldr	r2, [r2, #32]
 800a6ba:	4311      	orrs	r1, r2
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a6c0:	430a      	orrs	r2, r1
 800a6c2:	431a      	orrs	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	601a      	str	r2, [r3, #0]
 800a6c8:	e026      	b.n	800a718 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	69d9      	ldr	r1, [r3, #28]
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	6a1b      	ldr	r3, [r3, #32]
 800a6da:	4319      	orrs	r1, r3
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e0:	430b      	orrs	r3, r1
 800a6e2:	431a      	orrs	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	4b0e      	ldr	r3, [pc, #56]	; (800a728 <FMC_SDRAM_Init+0xb4>)
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	6851      	ldr	r1, [r2, #4]
 800a6f4:	683a      	ldr	r2, [r7, #0]
 800a6f6:	6892      	ldr	r2, [r2, #8]
 800a6f8:	4311      	orrs	r1, r2
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	68d2      	ldr	r2, [r2, #12]
 800a6fe:	4311      	orrs	r1, r2
 800a700:	683a      	ldr	r2, [r7, #0]
 800a702:	6912      	ldr	r2, [r2, #16]
 800a704:	4311      	orrs	r1, r2
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	6952      	ldr	r2, [r2, #20]
 800a70a:	4311      	orrs	r1, r2
 800a70c:	683a      	ldr	r2, [r7, #0]
 800a70e:	6992      	ldr	r2, [r2, #24]
 800a710:	430a      	orrs	r2, r1
 800a712:	431a      	orrs	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	370c      	adds	r7, #12
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	ffff8000 	.word	0xffff8000

0800a72c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d128      	bne.n	800a790 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	1e59      	subs	r1, r3, #1
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	3b01      	subs	r3, #1
 800a752:	011b      	lsls	r3, r3, #4
 800a754:	4319      	orrs	r1, r3
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	3b01      	subs	r3, #1
 800a75c:	021b      	lsls	r3, r3, #8
 800a75e:	4319      	orrs	r1, r3
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	3b01      	subs	r3, #1
 800a766:	031b      	lsls	r3, r3, #12
 800a768:	4319      	orrs	r1, r3
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	3b01      	subs	r3, #1
 800a770:	041b      	lsls	r3, r3, #16
 800a772:	4319      	orrs	r1, r3
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	695b      	ldr	r3, [r3, #20]
 800a778:	3b01      	subs	r3, #1
 800a77a:	051b      	lsls	r3, r3, #20
 800a77c:	4319      	orrs	r1, r3
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	699b      	ldr	r3, [r3, #24]
 800a782:	3b01      	subs	r3, #1
 800a784:	061b      	lsls	r3, r3, #24
 800a786:	430b      	orrs	r3, r1
 800a788:	431a      	orrs	r2, r3
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	609a      	str	r2, [r3, #8]
 800a78e:	e02d      	b.n	800a7ec <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	689a      	ldr	r2, [r3, #8]
 800a794:	4b19      	ldr	r3, [pc, #100]	; (800a7fc <FMC_SDRAM_Timing_Init+0xd0>)
 800a796:	4013      	ands	r3, r2
 800a798:	68ba      	ldr	r2, [r7, #8]
 800a79a:	68d2      	ldr	r2, [r2, #12]
 800a79c:	3a01      	subs	r2, #1
 800a79e:	0311      	lsls	r1, r2, #12
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	6952      	ldr	r2, [r2, #20]
 800a7a4:	3a01      	subs	r2, #1
 800a7a6:	0512      	lsls	r2, r2, #20
 800a7a8:	430a      	orrs	r2, r1
 800a7aa:	431a      	orrs	r2, r3
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	1e59      	subs	r1, r3, #1
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	011b      	lsls	r3, r3, #4
 800a7c6:	4319      	orrs	r1, r3
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	021b      	lsls	r3, r3, #8
 800a7d0:	4319      	orrs	r1, r3
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	041b      	lsls	r3, r3, #16
 800a7da:	4319      	orrs	r1, r3
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	061b      	lsls	r3, r3, #24
 800a7e4:	430b      	orrs	r3, r1
 800a7e6:	431a      	orrs	r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3714      	adds	r7, #20
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	ff0f0fff 	.word	0xff0f0fff

0800a800 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	691a      	ldr	r2, [r3, #16]
 800a810:	4b0c      	ldr	r3, [pc, #48]	; (800a844 <FMC_SDRAM_SendCommand+0x44>)
 800a812:	4013      	ands	r3, r2
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	6811      	ldr	r1, [r2, #0]
 800a818:	68ba      	ldr	r2, [r7, #8]
 800a81a:	6852      	ldr	r2, [r2, #4]
 800a81c:	4311      	orrs	r1, r2
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	6892      	ldr	r2, [r2, #8]
 800a822:	3a01      	subs	r2, #1
 800a824:	0152      	lsls	r2, r2, #5
 800a826:	4311      	orrs	r1, r2
 800a828:	68ba      	ldr	r2, [r7, #8]
 800a82a:	68d2      	ldr	r2, [r2, #12]
 800a82c:	0252      	lsls	r2, r2, #9
 800a82e:	430a      	orrs	r2, r1
 800a830:	431a      	orrs	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3714      	adds	r7, #20
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr
 800a844:	ffc00000 	.word	0xffc00000

0800a848 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	695a      	ldr	r2, [r3, #20]
 800a856:	4b07      	ldr	r3, [pc, #28]	; (800a874 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800a858:	4013      	ands	r3, r2
 800a85a:	683a      	ldr	r2, [r7, #0]
 800a85c:	0052      	lsls	r2, r2, #1
 800a85e:	431a      	orrs	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a864:	2300      	movs	r3, #0
}
 800a866:	4618      	mov	r0, r3
 800a868:	370c      	adds	r7, #12
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	ffffc001 	.word	0xffffc001

0800a878 <__errno>:
 800a878:	4b01      	ldr	r3, [pc, #4]	; (800a880 <__errno+0x8>)
 800a87a:	6818      	ldr	r0, [r3, #0]
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	20000048 	.word	0x20000048

0800a884 <__libc_init_array>:
 800a884:	b570      	push	{r4, r5, r6, lr}
 800a886:	4d0d      	ldr	r5, [pc, #52]	; (800a8bc <__libc_init_array+0x38>)
 800a888:	4c0d      	ldr	r4, [pc, #52]	; (800a8c0 <__libc_init_array+0x3c>)
 800a88a:	1b64      	subs	r4, r4, r5
 800a88c:	10a4      	asrs	r4, r4, #2
 800a88e:	2600      	movs	r6, #0
 800a890:	42a6      	cmp	r6, r4
 800a892:	d109      	bne.n	800a8a8 <__libc_init_array+0x24>
 800a894:	4d0b      	ldr	r5, [pc, #44]	; (800a8c4 <__libc_init_array+0x40>)
 800a896:	4c0c      	ldr	r4, [pc, #48]	; (800a8c8 <__libc_init_array+0x44>)
 800a898:	f000 fc8e 	bl	800b1b8 <_init>
 800a89c:	1b64      	subs	r4, r4, r5
 800a89e:	10a4      	asrs	r4, r4, #2
 800a8a0:	2600      	movs	r6, #0
 800a8a2:	42a6      	cmp	r6, r4
 800a8a4:	d105      	bne.n	800a8b2 <__libc_init_array+0x2e>
 800a8a6:	bd70      	pop	{r4, r5, r6, pc}
 800a8a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ac:	4798      	blx	r3
 800a8ae:	3601      	adds	r6, #1
 800a8b0:	e7ee      	b.n	800a890 <__libc_init_array+0xc>
 800a8b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8b6:	4798      	blx	r3
 800a8b8:	3601      	adds	r6, #1
 800a8ba:	e7f2      	b.n	800a8a2 <__libc_init_array+0x1e>
 800a8bc:	0804cddc 	.word	0x0804cddc
 800a8c0:	0804cddc 	.word	0x0804cddc
 800a8c4:	0804cddc 	.word	0x0804cddc
 800a8c8:	0804cde0 	.word	0x0804cde0

0800a8cc <memset>:
 800a8cc:	4402      	add	r2, r0
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d100      	bne.n	800a8d6 <memset+0xa>
 800a8d4:	4770      	bx	lr
 800a8d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a8da:	e7f9      	b.n	800a8d0 <memset+0x4>

0800a8dc <siprintf>:
 800a8dc:	b40e      	push	{r1, r2, r3}
 800a8de:	b500      	push	{lr}
 800a8e0:	b09c      	sub	sp, #112	; 0x70
 800a8e2:	ab1d      	add	r3, sp, #116	; 0x74
 800a8e4:	9002      	str	r0, [sp, #8]
 800a8e6:	9006      	str	r0, [sp, #24]
 800a8e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a8ec:	4809      	ldr	r0, [pc, #36]	; (800a914 <siprintf+0x38>)
 800a8ee:	9107      	str	r1, [sp, #28]
 800a8f0:	9104      	str	r1, [sp, #16]
 800a8f2:	4909      	ldr	r1, [pc, #36]	; (800a918 <siprintf+0x3c>)
 800a8f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8f8:	9105      	str	r1, [sp, #20]
 800a8fa:	6800      	ldr	r0, [r0, #0]
 800a8fc:	9301      	str	r3, [sp, #4]
 800a8fe:	a902      	add	r1, sp, #8
 800a900:	f000 f868 	bl	800a9d4 <_svfiprintf_r>
 800a904:	9b02      	ldr	r3, [sp, #8]
 800a906:	2200      	movs	r2, #0
 800a908:	701a      	strb	r2, [r3, #0]
 800a90a:	b01c      	add	sp, #112	; 0x70
 800a90c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a910:	b003      	add	sp, #12
 800a912:	4770      	bx	lr
 800a914:	20000048 	.word	0x20000048
 800a918:	ffff0208 	.word	0xffff0208

0800a91c <__ssputs_r>:
 800a91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a920:	688e      	ldr	r6, [r1, #8]
 800a922:	429e      	cmp	r6, r3
 800a924:	4682      	mov	sl, r0
 800a926:	460c      	mov	r4, r1
 800a928:	4690      	mov	r8, r2
 800a92a:	461f      	mov	r7, r3
 800a92c:	d838      	bhi.n	800a9a0 <__ssputs_r+0x84>
 800a92e:	898a      	ldrh	r2, [r1, #12]
 800a930:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a934:	d032      	beq.n	800a99c <__ssputs_r+0x80>
 800a936:	6825      	ldr	r5, [r4, #0]
 800a938:	6909      	ldr	r1, [r1, #16]
 800a93a:	eba5 0901 	sub.w	r9, r5, r1
 800a93e:	6965      	ldr	r5, [r4, #20]
 800a940:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a944:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a948:	3301      	adds	r3, #1
 800a94a:	444b      	add	r3, r9
 800a94c:	106d      	asrs	r5, r5, #1
 800a94e:	429d      	cmp	r5, r3
 800a950:	bf38      	it	cc
 800a952:	461d      	movcc	r5, r3
 800a954:	0553      	lsls	r3, r2, #21
 800a956:	d531      	bpl.n	800a9bc <__ssputs_r+0xa0>
 800a958:	4629      	mov	r1, r5
 800a95a:	f000 fb63 	bl	800b024 <_malloc_r>
 800a95e:	4606      	mov	r6, r0
 800a960:	b950      	cbnz	r0, 800a978 <__ssputs_r+0x5c>
 800a962:	230c      	movs	r3, #12
 800a964:	f8ca 3000 	str.w	r3, [sl]
 800a968:	89a3      	ldrh	r3, [r4, #12]
 800a96a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a96e:	81a3      	strh	r3, [r4, #12]
 800a970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a978:	6921      	ldr	r1, [r4, #16]
 800a97a:	464a      	mov	r2, r9
 800a97c:	f000 fabe 	bl	800aefc <memcpy>
 800a980:	89a3      	ldrh	r3, [r4, #12]
 800a982:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a98a:	81a3      	strh	r3, [r4, #12]
 800a98c:	6126      	str	r6, [r4, #16]
 800a98e:	6165      	str	r5, [r4, #20]
 800a990:	444e      	add	r6, r9
 800a992:	eba5 0509 	sub.w	r5, r5, r9
 800a996:	6026      	str	r6, [r4, #0]
 800a998:	60a5      	str	r5, [r4, #8]
 800a99a:	463e      	mov	r6, r7
 800a99c:	42be      	cmp	r6, r7
 800a99e:	d900      	bls.n	800a9a2 <__ssputs_r+0x86>
 800a9a0:	463e      	mov	r6, r7
 800a9a2:	6820      	ldr	r0, [r4, #0]
 800a9a4:	4632      	mov	r2, r6
 800a9a6:	4641      	mov	r1, r8
 800a9a8:	f000 fab6 	bl	800af18 <memmove>
 800a9ac:	68a3      	ldr	r3, [r4, #8]
 800a9ae:	1b9b      	subs	r3, r3, r6
 800a9b0:	60a3      	str	r3, [r4, #8]
 800a9b2:	6823      	ldr	r3, [r4, #0]
 800a9b4:	4433      	add	r3, r6
 800a9b6:	6023      	str	r3, [r4, #0]
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	e7db      	b.n	800a974 <__ssputs_r+0x58>
 800a9bc:	462a      	mov	r2, r5
 800a9be:	f000 fba5 	bl	800b10c <_realloc_r>
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d1e1      	bne.n	800a98c <__ssputs_r+0x70>
 800a9c8:	6921      	ldr	r1, [r4, #16]
 800a9ca:	4650      	mov	r0, sl
 800a9cc:	f000 fabe 	bl	800af4c <_free_r>
 800a9d0:	e7c7      	b.n	800a962 <__ssputs_r+0x46>
	...

0800a9d4 <_svfiprintf_r>:
 800a9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d8:	4698      	mov	r8, r3
 800a9da:	898b      	ldrh	r3, [r1, #12]
 800a9dc:	061b      	lsls	r3, r3, #24
 800a9de:	b09d      	sub	sp, #116	; 0x74
 800a9e0:	4607      	mov	r7, r0
 800a9e2:	460d      	mov	r5, r1
 800a9e4:	4614      	mov	r4, r2
 800a9e6:	d50e      	bpl.n	800aa06 <_svfiprintf_r+0x32>
 800a9e8:	690b      	ldr	r3, [r1, #16]
 800a9ea:	b963      	cbnz	r3, 800aa06 <_svfiprintf_r+0x32>
 800a9ec:	2140      	movs	r1, #64	; 0x40
 800a9ee:	f000 fb19 	bl	800b024 <_malloc_r>
 800a9f2:	6028      	str	r0, [r5, #0]
 800a9f4:	6128      	str	r0, [r5, #16]
 800a9f6:	b920      	cbnz	r0, 800aa02 <_svfiprintf_r+0x2e>
 800a9f8:	230c      	movs	r3, #12
 800a9fa:	603b      	str	r3, [r7, #0]
 800a9fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa00:	e0d1      	b.n	800aba6 <_svfiprintf_r+0x1d2>
 800aa02:	2340      	movs	r3, #64	; 0x40
 800aa04:	616b      	str	r3, [r5, #20]
 800aa06:	2300      	movs	r3, #0
 800aa08:	9309      	str	r3, [sp, #36]	; 0x24
 800aa0a:	2320      	movs	r3, #32
 800aa0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa10:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa14:	2330      	movs	r3, #48	; 0x30
 800aa16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800abc0 <_svfiprintf_r+0x1ec>
 800aa1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa1e:	f04f 0901 	mov.w	r9, #1
 800aa22:	4623      	mov	r3, r4
 800aa24:	469a      	mov	sl, r3
 800aa26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa2a:	b10a      	cbz	r2, 800aa30 <_svfiprintf_r+0x5c>
 800aa2c:	2a25      	cmp	r2, #37	; 0x25
 800aa2e:	d1f9      	bne.n	800aa24 <_svfiprintf_r+0x50>
 800aa30:	ebba 0b04 	subs.w	fp, sl, r4
 800aa34:	d00b      	beq.n	800aa4e <_svfiprintf_r+0x7a>
 800aa36:	465b      	mov	r3, fp
 800aa38:	4622      	mov	r2, r4
 800aa3a:	4629      	mov	r1, r5
 800aa3c:	4638      	mov	r0, r7
 800aa3e:	f7ff ff6d 	bl	800a91c <__ssputs_r>
 800aa42:	3001      	adds	r0, #1
 800aa44:	f000 80aa 	beq.w	800ab9c <_svfiprintf_r+0x1c8>
 800aa48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa4a:	445a      	add	r2, fp
 800aa4c:	9209      	str	r2, [sp, #36]	; 0x24
 800aa4e:	f89a 3000 	ldrb.w	r3, [sl]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f000 80a2 	beq.w	800ab9c <_svfiprintf_r+0x1c8>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa62:	f10a 0a01 	add.w	sl, sl, #1
 800aa66:	9304      	str	r3, [sp, #16]
 800aa68:	9307      	str	r3, [sp, #28]
 800aa6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa6e:	931a      	str	r3, [sp, #104]	; 0x68
 800aa70:	4654      	mov	r4, sl
 800aa72:	2205      	movs	r2, #5
 800aa74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa78:	4851      	ldr	r0, [pc, #324]	; (800abc0 <_svfiprintf_r+0x1ec>)
 800aa7a:	f7f5 fbc9 	bl	8000210 <memchr>
 800aa7e:	9a04      	ldr	r2, [sp, #16]
 800aa80:	b9d8      	cbnz	r0, 800aaba <_svfiprintf_r+0xe6>
 800aa82:	06d0      	lsls	r0, r2, #27
 800aa84:	bf44      	itt	mi
 800aa86:	2320      	movmi	r3, #32
 800aa88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa8c:	0711      	lsls	r1, r2, #28
 800aa8e:	bf44      	itt	mi
 800aa90:	232b      	movmi	r3, #43	; 0x2b
 800aa92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa96:	f89a 3000 	ldrb.w	r3, [sl]
 800aa9a:	2b2a      	cmp	r3, #42	; 0x2a
 800aa9c:	d015      	beq.n	800aaca <_svfiprintf_r+0xf6>
 800aa9e:	9a07      	ldr	r2, [sp, #28]
 800aaa0:	4654      	mov	r4, sl
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	f04f 0c0a 	mov.w	ip, #10
 800aaa8:	4621      	mov	r1, r4
 800aaaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaae:	3b30      	subs	r3, #48	; 0x30
 800aab0:	2b09      	cmp	r3, #9
 800aab2:	d94e      	bls.n	800ab52 <_svfiprintf_r+0x17e>
 800aab4:	b1b0      	cbz	r0, 800aae4 <_svfiprintf_r+0x110>
 800aab6:	9207      	str	r2, [sp, #28]
 800aab8:	e014      	b.n	800aae4 <_svfiprintf_r+0x110>
 800aaba:	eba0 0308 	sub.w	r3, r0, r8
 800aabe:	fa09 f303 	lsl.w	r3, r9, r3
 800aac2:	4313      	orrs	r3, r2
 800aac4:	9304      	str	r3, [sp, #16]
 800aac6:	46a2      	mov	sl, r4
 800aac8:	e7d2      	b.n	800aa70 <_svfiprintf_r+0x9c>
 800aaca:	9b03      	ldr	r3, [sp, #12]
 800aacc:	1d19      	adds	r1, r3, #4
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	9103      	str	r1, [sp, #12]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	bfbb      	ittet	lt
 800aad6:	425b      	neglt	r3, r3
 800aad8:	f042 0202 	orrlt.w	r2, r2, #2
 800aadc:	9307      	strge	r3, [sp, #28]
 800aade:	9307      	strlt	r3, [sp, #28]
 800aae0:	bfb8      	it	lt
 800aae2:	9204      	strlt	r2, [sp, #16]
 800aae4:	7823      	ldrb	r3, [r4, #0]
 800aae6:	2b2e      	cmp	r3, #46	; 0x2e
 800aae8:	d10c      	bne.n	800ab04 <_svfiprintf_r+0x130>
 800aaea:	7863      	ldrb	r3, [r4, #1]
 800aaec:	2b2a      	cmp	r3, #42	; 0x2a
 800aaee:	d135      	bne.n	800ab5c <_svfiprintf_r+0x188>
 800aaf0:	9b03      	ldr	r3, [sp, #12]
 800aaf2:	1d1a      	adds	r2, r3, #4
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	9203      	str	r2, [sp, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	bfb8      	it	lt
 800aafc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ab00:	3402      	adds	r4, #2
 800ab02:	9305      	str	r3, [sp, #20]
 800ab04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800abd0 <_svfiprintf_r+0x1fc>
 800ab08:	7821      	ldrb	r1, [r4, #0]
 800ab0a:	2203      	movs	r2, #3
 800ab0c:	4650      	mov	r0, sl
 800ab0e:	f7f5 fb7f 	bl	8000210 <memchr>
 800ab12:	b140      	cbz	r0, 800ab26 <_svfiprintf_r+0x152>
 800ab14:	2340      	movs	r3, #64	; 0x40
 800ab16:	eba0 000a 	sub.w	r0, r0, sl
 800ab1a:	fa03 f000 	lsl.w	r0, r3, r0
 800ab1e:	9b04      	ldr	r3, [sp, #16]
 800ab20:	4303      	orrs	r3, r0
 800ab22:	3401      	adds	r4, #1
 800ab24:	9304      	str	r3, [sp, #16]
 800ab26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab2a:	4826      	ldr	r0, [pc, #152]	; (800abc4 <_svfiprintf_r+0x1f0>)
 800ab2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab30:	2206      	movs	r2, #6
 800ab32:	f7f5 fb6d 	bl	8000210 <memchr>
 800ab36:	2800      	cmp	r0, #0
 800ab38:	d038      	beq.n	800abac <_svfiprintf_r+0x1d8>
 800ab3a:	4b23      	ldr	r3, [pc, #140]	; (800abc8 <_svfiprintf_r+0x1f4>)
 800ab3c:	bb1b      	cbnz	r3, 800ab86 <_svfiprintf_r+0x1b2>
 800ab3e:	9b03      	ldr	r3, [sp, #12]
 800ab40:	3307      	adds	r3, #7
 800ab42:	f023 0307 	bic.w	r3, r3, #7
 800ab46:	3308      	adds	r3, #8
 800ab48:	9303      	str	r3, [sp, #12]
 800ab4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab4c:	4433      	add	r3, r6
 800ab4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab50:	e767      	b.n	800aa22 <_svfiprintf_r+0x4e>
 800ab52:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab56:	460c      	mov	r4, r1
 800ab58:	2001      	movs	r0, #1
 800ab5a:	e7a5      	b.n	800aaa8 <_svfiprintf_r+0xd4>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	3401      	adds	r4, #1
 800ab60:	9305      	str	r3, [sp, #20]
 800ab62:	4619      	mov	r1, r3
 800ab64:	f04f 0c0a 	mov.w	ip, #10
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab6e:	3a30      	subs	r2, #48	; 0x30
 800ab70:	2a09      	cmp	r2, #9
 800ab72:	d903      	bls.n	800ab7c <_svfiprintf_r+0x1a8>
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d0c5      	beq.n	800ab04 <_svfiprintf_r+0x130>
 800ab78:	9105      	str	r1, [sp, #20]
 800ab7a:	e7c3      	b.n	800ab04 <_svfiprintf_r+0x130>
 800ab7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab80:	4604      	mov	r4, r0
 800ab82:	2301      	movs	r3, #1
 800ab84:	e7f0      	b.n	800ab68 <_svfiprintf_r+0x194>
 800ab86:	ab03      	add	r3, sp, #12
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	462a      	mov	r2, r5
 800ab8c:	4b0f      	ldr	r3, [pc, #60]	; (800abcc <_svfiprintf_r+0x1f8>)
 800ab8e:	a904      	add	r1, sp, #16
 800ab90:	4638      	mov	r0, r7
 800ab92:	f3af 8000 	nop.w
 800ab96:	1c42      	adds	r2, r0, #1
 800ab98:	4606      	mov	r6, r0
 800ab9a:	d1d6      	bne.n	800ab4a <_svfiprintf_r+0x176>
 800ab9c:	89ab      	ldrh	r3, [r5, #12]
 800ab9e:	065b      	lsls	r3, r3, #25
 800aba0:	f53f af2c 	bmi.w	800a9fc <_svfiprintf_r+0x28>
 800aba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aba6:	b01d      	add	sp, #116	; 0x74
 800aba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abac:	ab03      	add	r3, sp, #12
 800abae:	9300      	str	r3, [sp, #0]
 800abb0:	462a      	mov	r2, r5
 800abb2:	4b06      	ldr	r3, [pc, #24]	; (800abcc <_svfiprintf_r+0x1f8>)
 800abb4:	a904      	add	r1, sp, #16
 800abb6:	4638      	mov	r0, r7
 800abb8:	f000 f87a 	bl	800acb0 <_printf_i>
 800abbc:	e7eb      	b.n	800ab96 <_svfiprintf_r+0x1c2>
 800abbe:	bf00      	nop
 800abc0:	0804cda0 	.word	0x0804cda0
 800abc4:	0804cdaa 	.word	0x0804cdaa
 800abc8:	00000000 	.word	0x00000000
 800abcc:	0800a91d 	.word	0x0800a91d
 800abd0:	0804cda6 	.word	0x0804cda6

0800abd4 <_printf_common>:
 800abd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abd8:	4616      	mov	r6, r2
 800abda:	4699      	mov	r9, r3
 800abdc:	688a      	ldr	r2, [r1, #8]
 800abde:	690b      	ldr	r3, [r1, #16]
 800abe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abe4:	4293      	cmp	r3, r2
 800abe6:	bfb8      	it	lt
 800abe8:	4613      	movlt	r3, r2
 800abea:	6033      	str	r3, [r6, #0]
 800abec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800abf0:	4607      	mov	r7, r0
 800abf2:	460c      	mov	r4, r1
 800abf4:	b10a      	cbz	r2, 800abfa <_printf_common+0x26>
 800abf6:	3301      	adds	r3, #1
 800abf8:	6033      	str	r3, [r6, #0]
 800abfa:	6823      	ldr	r3, [r4, #0]
 800abfc:	0699      	lsls	r1, r3, #26
 800abfe:	bf42      	ittt	mi
 800ac00:	6833      	ldrmi	r3, [r6, #0]
 800ac02:	3302      	addmi	r3, #2
 800ac04:	6033      	strmi	r3, [r6, #0]
 800ac06:	6825      	ldr	r5, [r4, #0]
 800ac08:	f015 0506 	ands.w	r5, r5, #6
 800ac0c:	d106      	bne.n	800ac1c <_printf_common+0x48>
 800ac0e:	f104 0a19 	add.w	sl, r4, #25
 800ac12:	68e3      	ldr	r3, [r4, #12]
 800ac14:	6832      	ldr	r2, [r6, #0]
 800ac16:	1a9b      	subs	r3, r3, r2
 800ac18:	42ab      	cmp	r3, r5
 800ac1a:	dc26      	bgt.n	800ac6a <_printf_common+0x96>
 800ac1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac20:	1e13      	subs	r3, r2, #0
 800ac22:	6822      	ldr	r2, [r4, #0]
 800ac24:	bf18      	it	ne
 800ac26:	2301      	movne	r3, #1
 800ac28:	0692      	lsls	r2, r2, #26
 800ac2a:	d42b      	bmi.n	800ac84 <_printf_common+0xb0>
 800ac2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac30:	4649      	mov	r1, r9
 800ac32:	4638      	mov	r0, r7
 800ac34:	47c0      	blx	r8
 800ac36:	3001      	adds	r0, #1
 800ac38:	d01e      	beq.n	800ac78 <_printf_common+0xa4>
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	68e5      	ldr	r5, [r4, #12]
 800ac3e:	6832      	ldr	r2, [r6, #0]
 800ac40:	f003 0306 	and.w	r3, r3, #6
 800ac44:	2b04      	cmp	r3, #4
 800ac46:	bf08      	it	eq
 800ac48:	1aad      	subeq	r5, r5, r2
 800ac4a:	68a3      	ldr	r3, [r4, #8]
 800ac4c:	6922      	ldr	r2, [r4, #16]
 800ac4e:	bf0c      	ite	eq
 800ac50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac54:	2500      	movne	r5, #0
 800ac56:	4293      	cmp	r3, r2
 800ac58:	bfc4      	itt	gt
 800ac5a:	1a9b      	subgt	r3, r3, r2
 800ac5c:	18ed      	addgt	r5, r5, r3
 800ac5e:	2600      	movs	r6, #0
 800ac60:	341a      	adds	r4, #26
 800ac62:	42b5      	cmp	r5, r6
 800ac64:	d11a      	bne.n	800ac9c <_printf_common+0xc8>
 800ac66:	2000      	movs	r0, #0
 800ac68:	e008      	b.n	800ac7c <_printf_common+0xa8>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	4652      	mov	r2, sl
 800ac6e:	4649      	mov	r1, r9
 800ac70:	4638      	mov	r0, r7
 800ac72:	47c0      	blx	r8
 800ac74:	3001      	adds	r0, #1
 800ac76:	d103      	bne.n	800ac80 <_printf_common+0xac>
 800ac78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac80:	3501      	adds	r5, #1
 800ac82:	e7c6      	b.n	800ac12 <_printf_common+0x3e>
 800ac84:	18e1      	adds	r1, r4, r3
 800ac86:	1c5a      	adds	r2, r3, #1
 800ac88:	2030      	movs	r0, #48	; 0x30
 800ac8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac8e:	4422      	add	r2, r4
 800ac90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac98:	3302      	adds	r3, #2
 800ac9a:	e7c7      	b.n	800ac2c <_printf_common+0x58>
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	4622      	mov	r2, r4
 800aca0:	4649      	mov	r1, r9
 800aca2:	4638      	mov	r0, r7
 800aca4:	47c0      	blx	r8
 800aca6:	3001      	adds	r0, #1
 800aca8:	d0e6      	beq.n	800ac78 <_printf_common+0xa4>
 800acaa:	3601      	adds	r6, #1
 800acac:	e7d9      	b.n	800ac62 <_printf_common+0x8e>
	...

0800acb0 <_printf_i>:
 800acb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acb4:	7e0f      	ldrb	r7, [r1, #24]
 800acb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acb8:	2f78      	cmp	r7, #120	; 0x78
 800acba:	4691      	mov	r9, r2
 800acbc:	4680      	mov	r8, r0
 800acbe:	460c      	mov	r4, r1
 800acc0:	469a      	mov	sl, r3
 800acc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800acc6:	d807      	bhi.n	800acd8 <_printf_i+0x28>
 800acc8:	2f62      	cmp	r7, #98	; 0x62
 800acca:	d80a      	bhi.n	800ace2 <_printf_i+0x32>
 800accc:	2f00      	cmp	r7, #0
 800acce:	f000 80d8 	beq.w	800ae82 <_printf_i+0x1d2>
 800acd2:	2f58      	cmp	r7, #88	; 0x58
 800acd4:	f000 80a3 	beq.w	800ae1e <_printf_i+0x16e>
 800acd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ace0:	e03a      	b.n	800ad58 <_printf_i+0xa8>
 800ace2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ace6:	2b15      	cmp	r3, #21
 800ace8:	d8f6      	bhi.n	800acd8 <_printf_i+0x28>
 800acea:	a101      	add	r1, pc, #4	; (adr r1, 800acf0 <_printf_i+0x40>)
 800acec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acf0:	0800ad49 	.word	0x0800ad49
 800acf4:	0800ad5d 	.word	0x0800ad5d
 800acf8:	0800acd9 	.word	0x0800acd9
 800acfc:	0800acd9 	.word	0x0800acd9
 800ad00:	0800acd9 	.word	0x0800acd9
 800ad04:	0800acd9 	.word	0x0800acd9
 800ad08:	0800ad5d 	.word	0x0800ad5d
 800ad0c:	0800acd9 	.word	0x0800acd9
 800ad10:	0800acd9 	.word	0x0800acd9
 800ad14:	0800acd9 	.word	0x0800acd9
 800ad18:	0800acd9 	.word	0x0800acd9
 800ad1c:	0800ae69 	.word	0x0800ae69
 800ad20:	0800ad8d 	.word	0x0800ad8d
 800ad24:	0800ae4b 	.word	0x0800ae4b
 800ad28:	0800acd9 	.word	0x0800acd9
 800ad2c:	0800acd9 	.word	0x0800acd9
 800ad30:	0800ae8b 	.word	0x0800ae8b
 800ad34:	0800acd9 	.word	0x0800acd9
 800ad38:	0800ad8d 	.word	0x0800ad8d
 800ad3c:	0800acd9 	.word	0x0800acd9
 800ad40:	0800acd9 	.word	0x0800acd9
 800ad44:	0800ae53 	.word	0x0800ae53
 800ad48:	682b      	ldr	r3, [r5, #0]
 800ad4a:	1d1a      	adds	r2, r3, #4
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	602a      	str	r2, [r5, #0]
 800ad50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e0a3      	b.n	800aea4 <_printf_i+0x1f4>
 800ad5c:	6820      	ldr	r0, [r4, #0]
 800ad5e:	6829      	ldr	r1, [r5, #0]
 800ad60:	0606      	lsls	r6, r0, #24
 800ad62:	f101 0304 	add.w	r3, r1, #4
 800ad66:	d50a      	bpl.n	800ad7e <_printf_i+0xce>
 800ad68:	680e      	ldr	r6, [r1, #0]
 800ad6a:	602b      	str	r3, [r5, #0]
 800ad6c:	2e00      	cmp	r6, #0
 800ad6e:	da03      	bge.n	800ad78 <_printf_i+0xc8>
 800ad70:	232d      	movs	r3, #45	; 0x2d
 800ad72:	4276      	negs	r6, r6
 800ad74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad78:	485e      	ldr	r0, [pc, #376]	; (800aef4 <_printf_i+0x244>)
 800ad7a:	230a      	movs	r3, #10
 800ad7c:	e019      	b.n	800adb2 <_printf_i+0x102>
 800ad7e:	680e      	ldr	r6, [r1, #0]
 800ad80:	602b      	str	r3, [r5, #0]
 800ad82:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad86:	bf18      	it	ne
 800ad88:	b236      	sxthne	r6, r6
 800ad8a:	e7ef      	b.n	800ad6c <_printf_i+0xbc>
 800ad8c:	682b      	ldr	r3, [r5, #0]
 800ad8e:	6820      	ldr	r0, [r4, #0]
 800ad90:	1d19      	adds	r1, r3, #4
 800ad92:	6029      	str	r1, [r5, #0]
 800ad94:	0601      	lsls	r1, r0, #24
 800ad96:	d501      	bpl.n	800ad9c <_printf_i+0xec>
 800ad98:	681e      	ldr	r6, [r3, #0]
 800ad9a:	e002      	b.n	800ada2 <_printf_i+0xf2>
 800ad9c:	0646      	lsls	r6, r0, #25
 800ad9e:	d5fb      	bpl.n	800ad98 <_printf_i+0xe8>
 800ada0:	881e      	ldrh	r6, [r3, #0]
 800ada2:	4854      	ldr	r0, [pc, #336]	; (800aef4 <_printf_i+0x244>)
 800ada4:	2f6f      	cmp	r7, #111	; 0x6f
 800ada6:	bf0c      	ite	eq
 800ada8:	2308      	moveq	r3, #8
 800adaa:	230a      	movne	r3, #10
 800adac:	2100      	movs	r1, #0
 800adae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adb2:	6865      	ldr	r5, [r4, #4]
 800adb4:	60a5      	str	r5, [r4, #8]
 800adb6:	2d00      	cmp	r5, #0
 800adb8:	bfa2      	ittt	ge
 800adba:	6821      	ldrge	r1, [r4, #0]
 800adbc:	f021 0104 	bicge.w	r1, r1, #4
 800adc0:	6021      	strge	r1, [r4, #0]
 800adc2:	b90e      	cbnz	r6, 800adc8 <_printf_i+0x118>
 800adc4:	2d00      	cmp	r5, #0
 800adc6:	d04d      	beq.n	800ae64 <_printf_i+0x1b4>
 800adc8:	4615      	mov	r5, r2
 800adca:	fbb6 f1f3 	udiv	r1, r6, r3
 800adce:	fb03 6711 	mls	r7, r3, r1, r6
 800add2:	5dc7      	ldrb	r7, [r0, r7]
 800add4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800add8:	4637      	mov	r7, r6
 800adda:	42bb      	cmp	r3, r7
 800addc:	460e      	mov	r6, r1
 800adde:	d9f4      	bls.n	800adca <_printf_i+0x11a>
 800ade0:	2b08      	cmp	r3, #8
 800ade2:	d10b      	bne.n	800adfc <_printf_i+0x14c>
 800ade4:	6823      	ldr	r3, [r4, #0]
 800ade6:	07de      	lsls	r6, r3, #31
 800ade8:	d508      	bpl.n	800adfc <_printf_i+0x14c>
 800adea:	6923      	ldr	r3, [r4, #16]
 800adec:	6861      	ldr	r1, [r4, #4]
 800adee:	4299      	cmp	r1, r3
 800adf0:	bfde      	ittt	le
 800adf2:	2330      	movle	r3, #48	; 0x30
 800adf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800adf8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800adfc:	1b52      	subs	r2, r2, r5
 800adfe:	6122      	str	r2, [r4, #16]
 800ae00:	f8cd a000 	str.w	sl, [sp]
 800ae04:	464b      	mov	r3, r9
 800ae06:	aa03      	add	r2, sp, #12
 800ae08:	4621      	mov	r1, r4
 800ae0a:	4640      	mov	r0, r8
 800ae0c:	f7ff fee2 	bl	800abd4 <_printf_common>
 800ae10:	3001      	adds	r0, #1
 800ae12:	d14c      	bne.n	800aeae <_printf_i+0x1fe>
 800ae14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae18:	b004      	add	sp, #16
 800ae1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae1e:	4835      	ldr	r0, [pc, #212]	; (800aef4 <_printf_i+0x244>)
 800ae20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae24:	6829      	ldr	r1, [r5, #0]
 800ae26:	6823      	ldr	r3, [r4, #0]
 800ae28:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae2c:	6029      	str	r1, [r5, #0]
 800ae2e:	061d      	lsls	r5, r3, #24
 800ae30:	d514      	bpl.n	800ae5c <_printf_i+0x1ac>
 800ae32:	07df      	lsls	r7, r3, #31
 800ae34:	bf44      	itt	mi
 800ae36:	f043 0320 	orrmi.w	r3, r3, #32
 800ae3a:	6023      	strmi	r3, [r4, #0]
 800ae3c:	b91e      	cbnz	r6, 800ae46 <_printf_i+0x196>
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	f023 0320 	bic.w	r3, r3, #32
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	2310      	movs	r3, #16
 800ae48:	e7b0      	b.n	800adac <_printf_i+0xfc>
 800ae4a:	6823      	ldr	r3, [r4, #0]
 800ae4c:	f043 0320 	orr.w	r3, r3, #32
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	2378      	movs	r3, #120	; 0x78
 800ae54:	4828      	ldr	r0, [pc, #160]	; (800aef8 <_printf_i+0x248>)
 800ae56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae5a:	e7e3      	b.n	800ae24 <_printf_i+0x174>
 800ae5c:	0659      	lsls	r1, r3, #25
 800ae5e:	bf48      	it	mi
 800ae60:	b2b6      	uxthmi	r6, r6
 800ae62:	e7e6      	b.n	800ae32 <_printf_i+0x182>
 800ae64:	4615      	mov	r5, r2
 800ae66:	e7bb      	b.n	800ade0 <_printf_i+0x130>
 800ae68:	682b      	ldr	r3, [r5, #0]
 800ae6a:	6826      	ldr	r6, [r4, #0]
 800ae6c:	6961      	ldr	r1, [r4, #20]
 800ae6e:	1d18      	adds	r0, r3, #4
 800ae70:	6028      	str	r0, [r5, #0]
 800ae72:	0635      	lsls	r5, r6, #24
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	d501      	bpl.n	800ae7c <_printf_i+0x1cc>
 800ae78:	6019      	str	r1, [r3, #0]
 800ae7a:	e002      	b.n	800ae82 <_printf_i+0x1d2>
 800ae7c:	0670      	lsls	r0, r6, #25
 800ae7e:	d5fb      	bpl.n	800ae78 <_printf_i+0x1c8>
 800ae80:	8019      	strh	r1, [r3, #0]
 800ae82:	2300      	movs	r3, #0
 800ae84:	6123      	str	r3, [r4, #16]
 800ae86:	4615      	mov	r5, r2
 800ae88:	e7ba      	b.n	800ae00 <_printf_i+0x150>
 800ae8a:	682b      	ldr	r3, [r5, #0]
 800ae8c:	1d1a      	adds	r2, r3, #4
 800ae8e:	602a      	str	r2, [r5, #0]
 800ae90:	681d      	ldr	r5, [r3, #0]
 800ae92:	6862      	ldr	r2, [r4, #4]
 800ae94:	2100      	movs	r1, #0
 800ae96:	4628      	mov	r0, r5
 800ae98:	f7f5 f9ba 	bl	8000210 <memchr>
 800ae9c:	b108      	cbz	r0, 800aea2 <_printf_i+0x1f2>
 800ae9e:	1b40      	subs	r0, r0, r5
 800aea0:	6060      	str	r0, [r4, #4]
 800aea2:	6863      	ldr	r3, [r4, #4]
 800aea4:	6123      	str	r3, [r4, #16]
 800aea6:	2300      	movs	r3, #0
 800aea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aeac:	e7a8      	b.n	800ae00 <_printf_i+0x150>
 800aeae:	6923      	ldr	r3, [r4, #16]
 800aeb0:	462a      	mov	r2, r5
 800aeb2:	4649      	mov	r1, r9
 800aeb4:	4640      	mov	r0, r8
 800aeb6:	47d0      	blx	sl
 800aeb8:	3001      	adds	r0, #1
 800aeba:	d0ab      	beq.n	800ae14 <_printf_i+0x164>
 800aebc:	6823      	ldr	r3, [r4, #0]
 800aebe:	079b      	lsls	r3, r3, #30
 800aec0:	d413      	bmi.n	800aeea <_printf_i+0x23a>
 800aec2:	68e0      	ldr	r0, [r4, #12]
 800aec4:	9b03      	ldr	r3, [sp, #12]
 800aec6:	4298      	cmp	r0, r3
 800aec8:	bfb8      	it	lt
 800aeca:	4618      	movlt	r0, r3
 800aecc:	e7a4      	b.n	800ae18 <_printf_i+0x168>
 800aece:	2301      	movs	r3, #1
 800aed0:	4632      	mov	r2, r6
 800aed2:	4649      	mov	r1, r9
 800aed4:	4640      	mov	r0, r8
 800aed6:	47d0      	blx	sl
 800aed8:	3001      	adds	r0, #1
 800aeda:	d09b      	beq.n	800ae14 <_printf_i+0x164>
 800aedc:	3501      	adds	r5, #1
 800aede:	68e3      	ldr	r3, [r4, #12]
 800aee0:	9903      	ldr	r1, [sp, #12]
 800aee2:	1a5b      	subs	r3, r3, r1
 800aee4:	42ab      	cmp	r3, r5
 800aee6:	dcf2      	bgt.n	800aece <_printf_i+0x21e>
 800aee8:	e7eb      	b.n	800aec2 <_printf_i+0x212>
 800aeea:	2500      	movs	r5, #0
 800aeec:	f104 0619 	add.w	r6, r4, #25
 800aef0:	e7f5      	b.n	800aede <_printf_i+0x22e>
 800aef2:	bf00      	nop
 800aef4:	0804cdb1 	.word	0x0804cdb1
 800aef8:	0804cdc2 	.word	0x0804cdc2

0800aefc <memcpy>:
 800aefc:	440a      	add	r2, r1
 800aefe:	4291      	cmp	r1, r2
 800af00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800af04:	d100      	bne.n	800af08 <memcpy+0xc>
 800af06:	4770      	bx	lr
 800af08:	b510      	push	{r4, lr}
 800af0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af12:	4291      	cmp	r1, r2
 800af14:	d1f9      	bne.n	800af0a <memcpy+0xe>
 800af16:	bd10      	pop	{r4, pc}

0800af18 <memmove>:
 800af18:	4288      	cmp	r0, r1
 800af1a:	b510      	push	{r4, lr}
 800af1c:	eb01 0402 	add.w	r4, r1, r2
 800af20:	d902      	bls.n	800af28 <memmove+0x10>
 800af22:	4284      	cmp	r4, r0
 800af24:	4623      	mov	r3, r4
 800af26:	d807      	bhi.n	800af38 <memmove+0x20>
 800af28:	1e43      	subs	r3, r0, #1
 800af2a:	42a1      	cmp	r1, r4
 800af2c:	d008      	beq.n	800af40 <memmove+0x28>
 800af2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af36:	e7f8      	b.n	800af2a <memmove+0x12>
 800af38:	4402      	add	r2, r0
 800af3a:	4601      	mov	r1, r0
 800af3c:	428a      	cmp	r2, r1
 800af3e:	d100      	bne.n	800af42 <memmove+0x2a>
 800af40:	bd10      	pop	{r4, pc}
 800af42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af4a:	e7f7      	b.n	800af3c <memmove+0x24>

0800af4c <_free_r>:
 800af4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af4e:	2900      	cmp	r1, #0
 800af50:	d044      	beq.n	800afdc <_free_r+0x90>
 800af52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af56:	9001      	str	r0, [sp, #4]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f1a1 0404 	sub.w	r4, r1, #4
 800af5e:	bfb8      	it	lt
 800af60:	18e4      	addlt	r4, r4, r3
 800af62:	f000 f913 	bl	800b18c <__malloc_lock>
 800af66:	4a1e      	ldr	r2, [pc, #120]	; (800afe0 <_free_r+0x94>)
 800af68:	9801      	ldr	r0, [sp, #4]
 800af6a:	6813      	ldr	r3, [r2, #0]
 800af6c:	b933      	cbnz	r3, 800af7c <_free_r+0x30>
 800af6e:	6063      	str	r3, [r4, #4]
 800af70:	6014      	str	r4, [r2, #0]
 800af72:	b003      	add	sp, #12
 800af74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af78:	f000 b90e 	b.w	800b198 <__malloc_unlock>
 800af7c:	42a3      	cmp	r3, r4
 800af7e:	d908      	bls.n	800af92 <_free_r+0x46>
 800af80:	6825      	ldr	r5, [r4, #0]
 800af82:	1961      	adds	r1, r4, r5
 800af84:	428b      	cmp	r3, r1
 800af86:	bf01      	itttt	eq
 800af88:	6819      	ldreq	r1, [r3, #0]
 800af8a:	685b      	ldreq	r3, [r3, #4]
 800af8c:	1949      	addeq	r1, r1, r5
 800af8e:	6021      	streq	r1, [r4, #0]
 800af90:	e7ed      	b.n	800af6e <_free_r+0x22>
 800af92:	461a      	mov	r2, r3
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	b10b      	cbz	r3, 800af9c <_free_r+0x50>
 800af98:	42a3      	cmp	r3, r4
 800af9a:	d9fa      	bls.n	800af92 <_free_r+0x46>
 800af9c:	6811      	ldr	r1, [r2, #0]
 800af9e:	1855      	adds	r5, r2, r1
 800afa0:	42a5      	cmp	r5, r4
 800afa2:	d10b      	bne.n	800afbc <_free_r+0x70>
 800afa4:	6824      	ldr	r4, [r4, #0]
 800afa6:	4421      	add	r1, r4
 800afa8:	1854      	adds	r4, r2, r1
 800afaa:	42a3      	cmp	r3, r4
 800afac:	6011      	str	r1, [r2, #0]
 800afae:	d1e0      	bne.n	800af72 <_free_r+0x26>
 800afb0:	681c      	ldr	r4, [r3, #0]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	6053      	str	r3, [r2, #4]
 800afb6:	4421      	add	r1, r4
 800afb8:	6011      	str	r1, [r2, #0]
 800afba:	e7da      	b.n	800af72 <_free_r+0x26>
 800afbc:	d902      	bls.n	800afc4 <_free_r+0x78>
 800afbe:	230c      	movs	r3, #12
 800afc0:	6003      	str	r3, [r0, #0]
 800afc2:	e7d6      	b.n	800af72 <_free_r+0x26>
 800afc4:	6825      	ldr	r5, [r4, #0]
 800afc6:	1961      	adds	r1, r4, r5
 800afc8:	428b      	cmp	r3, r1
 800afca:	bf04      	itt	eq
 800afcc:	6819      	ldreq	r1, [r3, #0]
 800afce:	685b      	ldreq	r3, [r3, #4]
 800afd0:	6063      	str	r3, [r4, #4]
 800afd2:	bf04      	itt	eq
 800afd4:	1949      	addeq	r1, r1, r5
 800afd6:	6021      	streq	r1, [r4, #0]
 800afd8:	6054      	str	r4, [r2, #4]
 800afda:	e7ca      	b.n	800af72 <_free_r+0x26>
 800afdc:	b003      	add	sp, #12
 800afde:	bd30      	pop	{r4, r5, pc}
 800afe0:	20000a24 	.word	0x20000a24

0800afe4 <sbrk_aligned>:
 800afe4:	b570      	push	{r4, r5, r6, lr}
 800afe6:	4e0e      	ldr	r6, [pc, #56]	; (800b020 <sbrk_aligned+0x3c>)
 800afe8:	460c      	mov	r4, r1
 800afea:	6831      	ldr	r1, [r6, #0]
 800afec:	4605      	mov	r5, r0
 800afee:	b911      	cbnz	r1, 800aff6 <sbrk_aligned+0x12>
 800aff0:	f000 f8bc 	bl	800b16c <_sbrk_r>
 800aff4:	6030      	str	r0, [r6, #0]
 800aff6:	4621      	mov	r1, r4
 800aff8:	4628      	mov	r0, r5
 800affa:	f000 f8b7 	bl	800b16c <_sbrk_r>
 800affe:	1c43      	adds	r3, r0, #1
 800b000:	d00a      	beq.n	800b018 <sbrk_aligned+0x34>
 800b002:	1cc4      	adds	r4, r0, #3
 800b004:	f024 0403 	bic.w	r4, r4, #3
 800b008:	42a0      	cmp	r0, r4
 800b00a:	d007      	beq.n	800b01c <sbrk_aligned+0x38>
 800b00c:	1a21      	subs	r1, r4, r0
 800b00e:	4628      	mov	r0, r5
 800b010:	f000 f8ac 	bl	800b16c <_sbrk_r>
 800b014:	3001      	adds	r0, #1
 800b016:	d101      	bne.n	800b01c <sbrk_aligned+0x38>
 800b018:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b01c:	4620      	mov	r0, r4
 800b01e:	bd70      	pop	{r4, r5, r6, pc}
 800b020:	20000a28 	.word	0x20000a28

0800b024 <_malloc_r>:
 800b024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b028:	1ccd      	adds	r5, r1, #3
 800b02a:	f025 0503 	bic.w	r5, r5, #3
 800b02e:	3508      	adds	r5, #8
 800b030:	2d0c      	cmp	r5, #12
 800b032:	bf38      	it	cc
 800b034:	250c      	movcc	r5, #12
 800b036:	2d00      	cmp	r5, #0
 800b038:	4607      	mov	r7, r0
 800b03a:	db01      	blt.n	800b040 <_malloc_r+0x1c>
 800b03c:	42a9      	cmp	r1, r5
 800b03e:	d905      	bls.n	800b04c <_malloc_r+0x28>
 800b040:	230c      	movs	r3, #12
 800b042:	603b      	str	r3, [r7, #0]
 800b044:	2600      	movs	r6, #0
 800b046:	4630      	mov	r0, r6
 800b048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b04c:	4e2e      	ldr	r6, [pc, #184]	; (800b108 <_malloc_r+0xe4>)
 800b04e:	f000 f89d 	bl	800b18c <__malloc_lock>
 800b052:	6833      	ldr	r3, [r6, #0]
 800b054:	461c      	mov	r4, r3
 800b056:	bb34      	cbnz	r4, 800b0a6 <_malloc_r+0x82>
 800b058:	4629      	mov	r1, r5
 800b05a:	4638      	mov	r0, r7
 800b05c:	f7ff ffc2 	bl	800afe4 <sbrk_aligned>
 800b060:	1c43      	adds	r3, r0, #1
 800b062:	4604      	mov	r4, r0
 800b064:	d14d      	bne.n	800b102 <_malloc_r+0xde>
 800b066:	6834      	ldr	r4, [r6, #0]
 800b068:	4626      	mov	r6, r4
 800b06a:	2e00      	cmp	r6, #0
 800b06c:	d140      	bne.n	800b0f0 <_malloc_r+0xcc>
 800b06e:	6823      	ldr	r3, [r4, #0]
 800b070:	4631      	mov	r1, r6
 800b072:	4638      	mov	r0, r7
 800b074:	eb04 0803 	add.w	r8, r4, r3
 800b078:	f000 f878 	bl	800b16c <_sbrk_r>
 800b07c:	4580      	cmp	r8, r0
 800b07e:	d13a      	bne.n	800b0f6 <_malloc_r+0xd2>
 800b080:	6821      	ldr	r1, [r4, #0]
 800b082:	3503      	adds	r5, #3
 800b084:	1a6d      	subs	r5, r5, r1
 800b086:	f025 0503 	bic.w	r5, r5, #3
 800b08a:	3508      	adds	r5, #8
 800b08c:	2d0c      	cmp	r5, #12
 800b08e:	bf38      	it	cc
 800b090:	250c      	movcc	r5, #12
 800b092:	4629      	mov	r1, r5
 800b094:	4638      	mov	r0, r7
 800b096:	f7ff ffa5 	bl	800afe4 <sbrk_aligned>
 800b09a:	3001      	adds	r0, #1
 800b09c:	d02b      	beq.n	800b0f6 <_malloc_r+0xd2>
 800b09e:	6823      	ldr	r3, [r4, #0]
 800b0a0:	442b      	add	r3, r5
 800b0a2:	6023      	str	r3, [r4, #0]
 800b0a4:	e00e      	b.n	800b0c4 <_malloc_r+0xa0>
 800b0a6:	6822      	ldr	r2, [r4, #0]
 800b0a8:	1b52      	subs	r2, r2, r5
 800b0aa:	d41e      	bmi.n	800b0ea <_malloc_r+0xc6>
 800b0ac:	2a0b      	cmp	r2, #11
 800b0ae:	d916      	bls.n	800b0de <_malloc_r+0xba>
 800b0b0:	1961      	adds	r1, r4, r5
 800b0b2:	42a3      	cmp	r3, r4
 800b0b4:	6025      	str	r5, [r4, #0]
 800b0b6:	bf18      	it	ne
 800b0b8:	6059      	strne	r1, [r3, #4]
 800b0ba:	6863      	ldr	r3, [r4, #4]
 800b0bc:	bf08      	it	eq
 800b0be:	6031      	streq	r1, [r6, #0]
 800b0c0:	5162      	str	r2, [r4, r5]
 800b0c2:	604b      	str	r3, [r1, #4]
 800b0c4:	4638      	mov	r0, r7
 800b0c6:	f104 060b 	add.w	r6, r4, #11
 800b0ca:	f000 f865 	bl	800b198 <__malloc_unlock>
 800b0ce:	f026 0607 	bic.w	r6, r6, #7
 800b0d2:	1d23      	adds	r3, r4, #4
 800b0d4:	1af2      	subs	r2, r6, r3
 800b0d6:	d0b6      	beq.n	800b046 <_malloc_r+0x22>
 800b0d8:	1b9b      	subs	r3, r3, r6
 800b0da:	50a3      	str	r3, [r4, r2]
 800b0dc:	e7b3      	b.n	800b046 <_malloc_r+0x22>
 800b0de:	6862      	ldr	r2, [r4, #4]
 800b0e0:	42a3      	cmp	r3, r4
 800b0e2:	bf0c      	ite	eq
 800b0e4:	6032      	streq	r2, [r6, #0]
 800b0e6:	605a      	strne	r2, [r3, #4]
 800b0e8:	e7ec      	b.n	800b0c4 <_malloc_r+0xa0>
 800b0ea:	4623      	mov	r3, r4
 800b0ec:	6864      	ldr	r4, [r4, #4]
 800b0ee:	e7b2      	b.n	800b056 <_malloc_r+0x32>
 800b0f0:	4634      	mov	r4, r6
 800b0f2:	6876      	ldr	r6, [r6, #4]
 800b0f4:	e7b9      	b.n	800b06a <_malloc_r+0x46>
 800b0f6:	230c      	movs	r3, #12
 800b0f8:	603b      	str	r3, [r7, #0]
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	f000 f84c 	bl	800b198 <__malloc_unlock>
 800b100:	e7a1      	b.n	800b046 <_malloc_r+0x22>
 800b102:	6025      	str	r5, [r4, #0]
 800b104:	e7de      	b.n	800b0c4 <_malloc_r+0xa0>
 800b106:	bf00      	nop
 800b108:	20000a24 	.word	0x20000a24

0800b10c <_realloc_r>:
 800b10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b110:	4680      	mov	r8, r0
 800b112:	4614      	mov	r4, r2
 800b114:	460e      	mov	r6, r1
 800b116:	b921      	cbnz	r1, 800b122 <_realloc_r+0x16>
 800b118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b11c:	4611      	mov	r1, r2
 800b11e:	f7ff bf81 	b.w	800b024 <_malloc_r>
 800b122:	b92a      	cbnz	r2, 800b130 <_realloc_r+0x24>
 800b124:	f7ff ff12 	bl	800af4c <_free_r>
 800b128:	4625      	mov	r5, r4
 800b12a:	4628      	mov	r0, r5
 800b12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b130:	f000 f838 	bl	800b1a4 <_malloc_usable_size_r>
 800b134:	4284      	cmp	r4, r0
 800b136:	4607      	mov	r7, r0
 800b138:	d802      	bhi.n	800b140 <_realloc_r+0x34>
 800b13a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b13e:	d812      	bhi.n	800b166 <_realloc_r+0x5a>
 800b140:	4621      	mov	r1, r4
 800b142:	4640      	mov	r0, r8
 800b144:	f7ff ff6e 	bl	800b024 <_malloc_r>
 800b148:	4605      	mov	r5, r0
 800b14a:	2800      	cmp	r0, #0
 800b14c:	d0ed      	beq.n	800b12a <_realloc_r+0x1e>
 800b14e:	42bc      	cmp	r4, r7
 800b150:	4622      	mov	r2, r4
 800b152:	4631      	mov	r1, r6
 800b154:	bf28      	it	cs
 800b156:	463a      	movcs	r2, r7
 800b158:	f7ff fed0 	bl	800aefc <memcpy>
 800b15c:	4631      	mov	r1, r6
 800b15e:	4640      	mov	r0, r8
 800b160:	f7ff fef4 	bl	800af4c <_free_r>
 800b164:	e7e1      	b.n	800b12a <_realloc_r+0x1e>
 800b166:	4635      	mov	r5, r6
 800b168:	e7df      	b.n	800b12a <_realloc_r+0x1e>
	...

0800b16c <_sbrk_r>:
 800b16c:	b538      	push	{r3, r4, r5, lr}
 800b16e:	4d06      	ldr	r5, [pc, #24]	; (800b188 <_sbrk_r+0x1c>)
 800b170:	2300      	movs	r3, #0
 800b172:	4604      	mov	r4, r0
 800b174:	4608      	mov	r0, r1
 800b176:	602b      	str	r3, [r5, #0]
 800b178:	f7f8 ff18 	bl	8003fac <_sbrk>
 800b17c:	1c43      	adds	r3, r0, #1
 800b17e:	d102      	bne.n	800b186 <_sbrk_r+0x1a>
 800b180:	682b      	ldr	r3, [r5, #0]
 800b182:	b103      	cbz	r3, 800b186 <_sbrk_r+0x1a>
 800b184:	6023      	str	r3, [r4, #0]
 800b186:	bd38      	pop	{r3, r4, r5, pc}
 800b188:	20000a2c 	.word	0x20000a2c

0800b18c <__malloc_lock>:
 800b18c:	4801      	ldr	r0, [pc, #4]	; (800b194 <__malloc_lock+0x8>)
 800b18e:	f000 b811 	b.w	800b1b4 <__retarget_lock_acquire_recursive>
 800b192:	bf00      	nop
 800b194:	20000a30 	.word	0x20000a30

0800b198 <__malloc_unlock>:
 800b198:	4801      	ldr	r0, [pc, #4]	; (800b1a0 <__malloc_unlock+0x8>)
 800b19a:	f000 b80c 	b.w	800b1b6 <__retarget_lock_release_recursive>
 800b19e:	bf00      	nop
 800b1a0:	20000a30 	.word	0x20000a30

0800b1a4 <_malloc_usable_size_r>:
 800b1a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1a8:	1f18      	subs	r0, r3, #4
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	bfbc      	itt	lt
 800b1ae:	580b      	ldrlt	r3, [r1, r0]
 800b1b0:	18c0      	addlt	r0, r0, r3
 800b1b2:	4770      	bx	lr

0800b1b4 <__retarget_lock_acquire_recursive>:
 800b1b4:	4770      	bx	lr

0800b1b6 <__retarget_lock_release_recursive>:
 800b1b6:	4770      	bx	lr

0800b1b8 <_init>:
 800b1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ba:	bf00      	nop
 800b1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1be:	bc08      	pop	{r3}
 800b1c0:	469e      	mov	lr, r3
 800b1c2:	4770      	bx	lr

0800b1c4 <_fini>:
 800b1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c6:	bf00      	nop
 800b1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ca:	bc08      	pop	{r3}
 800b1cc:	469e      	mov	lr, r3
 800b1ce:	4770      	bx	lr
